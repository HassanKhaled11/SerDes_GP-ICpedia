Coverage Report by instance with details

=================================================================================
=== Instance: /top/dut_if
=== Design Unit: work.BFM_if
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        172       162        10    94.18%

================================Toggle Details================================

Toggle Coverage for instance /top/dut_if --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                       MAC_Data_En           5           5      100.00 
                                 MAC_TX_Data[0-31]           5           5      100.00 
                                 MAC_TX_DataK[0-3]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                           Ref_CLK           5           5      100.00 
                                           Reset_n           5           5      100.00 
                                        RxPolarity           0           0        0.00 
                                     Rx_Data[0-31]           5           5      100.00 
                                          Rx_DataK           5           5      100.00 
                                    Rx_Status[0-2]           5           5      100.00 
                                          Rx_Valid           5           5      100.00 
                                          TX_Out_N           5           5      100.00 
                                          TX_Out_P           5           5      100.00 

Total Node Count     =         86 
Toggled Node Count   =         80 
Untoggled Node Count =          6 

Toggle Coverage      =      94.18% (162 of 172 bins)

=================================================================================
=== Instance: /top/internals_if
=== Design Unit: work.INTERNALS_if
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         32        24         8    75.00%

================================Toggle Details================================

Toggle Coverage for instance /top/internals_if --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           Bit_CLK           5           5      100.00 
                                       COMMA_PULSE           5           5      100.00 
                                        Clk_offset           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                      Decode_Error           5           5      100.00 
                                   Disparity_Error           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                              PCLK           5           5      100.00 
                                          TX_Out_P           5           5      100.00 
                                          Word_CLK           5           5      100.00 
                                  recovered_clk_5G           5           5      100.00 

Total Node Count     =         16 
Toggled Node Count   =         11 
Untoggled Node Count =          5 

Toggle Coverage      =      75.00% (24 of 32 bins)

=================================================================================
=== Instance: /top/DUT/Common_Block_U/PLL_frquency_mult
=== Design Unit: work.PLL
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11        11         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/Common_Block_U/PLL_frquency_mult --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PLL.v
    2                                                module PLL (
    3                                                    input Ref_Clk,
    4                                                    output reg CLK
    5                                                );
    6                                                
    7                                                  integer first, second;
    8                                                  // reg[3:0] first , second;
    9                                                  initial begin
    10              1                          5         CLK = 0;
    11              1                          5         @(posedge Ref_Clk);
    12              1                          5         first = $time();
    13              1                          5         $display(first);
    14              1                          5         @(posedge Ref_Clk);
    15              1                          5         second = $time();
    16              1                          5         $display(first);
    17              1                          5         $display(second);
    18                                               
    19                                               
    20                                               
    21                                                   // if (!RST) CLK = 0;
    22              1                          5         forever #((second - first) / 100) CLK = ~CLK;  //#((first - second) / 100)
    22              2                    2199650     
    22              3                    2199645     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        132         4       128     3.03%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/Common_Block_U/PLL_frquency_mult --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               CLK           5           5      100.00 
                                           Ref_Clk           5           5      100.00 
                                       first[0-31]           0           0        0.00 
                                      second[0-31]           0           0        0.00 

Total Node Count     =         66 
Toggled Node Count   =          2 
Untoggled Node Count =         64 

Toggle Coverage      =       3.03% (4 of 132 bins)

=================================================================================
=== Instance: /top/DUT/Common_Block_U/clock_divider
=== Design Unit: work.Clock_Div
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         3         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/Common_Block_U/clock_divider

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clock_Div.v
------------------------------------IF Branch------------------------------------
    14                                   1099840     Count coming in to IF
    14              1                         15     	if(!rst) begin
    18              1                     219965     	else if(count == half) begin 
    21              1                     879860     	end else begin
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/Common_Block_U/clock_divider --

  File Clock_Div.v
----------------Focused Condition View-------------------
Line       18 Item    1  (count == half)
Condition totals: 1 of 1 input term covered = 100.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (count == half)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (count == half)_0     -                             
  Row   2:          5  (count == half)_1     -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       7         7         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/Common_Block_U/clock_divider --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clock_Div.v
    1                                                module Clock_Div #(parameter WIDTH = 8)
    2                                                				(
    3                                                					input Ref_Clk,
    4                                                					input rst,
    5                                                					input [WIDTH-1:0] div_ratio,
    6                                                					output reg divided_clk
    7                                                					
    8                                                				);
    9                                                
    10                                               wire [WIDTH-2:0] half ;
    11                                               reg  [WIDTH-2:0] count;
    12                                               
    13              1                    1099840     always @(posedge Ref_Clk or negedge rst) begin
    14                                               	if(!rst) begin
    15              1                         15     		divided_clk <= 1'b1;
    16              1                         15     		count <= 'b1;//{WIDTH-2{1'b0}};
    17                                               	end
    18                                               	else if(count == half) begin 
    19              1                     219965     		divided_clk <= ~divided_clk;
    20              1                     219965     		count <= 'b1;
    21                                               	end else begin
    22              1                     879860     		count <= count + 1'b1;
    23                                               	end
    24                                               end
    25                                               
    26              1                         10     assign half = (div_ratio >> 1);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        12        38    24.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/Common_Block_U/clock_divider --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           Ref_Clk           5           5      100.00 
                                        count[0-2]           5           5      100.00 
                                        count[3-6]           0           0        0.00 
                                    div_ratio[0-7]           0           0        0.00 
                                       divided_clk           5           5      100.00 
                                         half[0-6]           0           0        0.00 
                                               rst           5           5      100.00 

Total Node Count     =         25 
Toggled Node Count   =          6 
Untoggled Node Count =         19 

Toggle Coverage      =      24.00% (12 of 50 bins)

=================================================================================
=== Instance: /top/DUT/Common_Block_U/clock_divider1
=== Design Unit: work.Clock_Div
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         3         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/Common_Block_U/clock_divider1

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clock_Div.v
------------------------------------IF Branch------------------------------------
    14                                   1099840     Count coming in to IF
    14              1                         15     	if(!rst) begin
    18              1                      94985     	else if(count == half) begin 
    21              1                    1004840     	end else begin
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/Common_Block_U/clock_divider1 --

  File Clock_Div.v
----------------Focused Condition View-------------------
Line       18 Item    1  (count == half)
Condition totals: 1 of 1 input term covered = 100.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (count == half)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (count == half)_0     -                             
  Row   2:          5  (count == half)_1     -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       7         7         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/Common_Block_U/clock_divider1 --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Clock_Div.v
    1                                                module Clock_Div #(parameter WIDTH = 8)
    2                                                				(
    3                                                					input Ref_Clk,
    4                                                					input rst,
    5                                                					input [WIDTH-1:0] div_ratio,
    6                                                					output reg divided_clk
    7                                                					
    8                                                				);
    9                                                
    10                                               wire [WIDTH-2:0] half ;
    11                                               reg  [WIDTH-2:0] count;
    12                                               
    13              1                    1099840     always @(posedge Ref_Clk or negedge rst) begin
    14                                               	if(!rst) begin
    15              1                         15     		divided_clk <= 1'b1;
    16              1                         15     		count <= 'b1;//{WIDTH-2{1'b0}};
    17                                               	end
    18                                               	else if(count == half) begin 
    19              1                      94985     		divided_clk <= ~divided_clk;
    20              1                      94985     		count <= 'b1;
    21                                               	end else begin
    22              1                    1004840     		count <= count + 1'b1;
    23                                               	end
    24                                               end
    25                                               
    26              1                         20     assign half = (div_ratio >> 1);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        32        18    64.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/Common_Block_U/clock_divider1 --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           Ref_Clk           5           5      100.00 
                                        count[0-4]           5           5      100.00 
                                        count[5-6]           0           0        0.00 
                                      div_ratio[0]           0           0        0.00 
                                      div_ratio[1]           0           5       50.00 
                                    div_ratio[2-4]           5           5      100.00 
                                      div_ratio[5]           5           0       50.00 
                                    div_ratio[6-7]           0           0        0.00 
                                       divided_clk           5           5      100.00 
                                           half[0]           0           5       50.00 
                                         half[1-3]           5           5      100.00 
                                           half[4]           5           0       50.00 
                                         half[5-6]           0           0        0.00 
                                               rst           5           5      100.00 

Total Node Count     =         25 
Toggled Node Count   =         14 
Untoggled Node Count =         11 

Toggle Coverage      =      64.00% (32 of 50 bins)

=================================================================================
=== Instance: /top/DUT/Common_Block_U
=== Design Unit: work.Common_Block
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         3         1    75.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/Common_Block_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Common_Block.v
------------------------------------CASE Branch------------------------------------
    69                                        15     Count coming in to CASE
    71              1                          5        6'd8    :  ratio = 8'd10 ;
    72              1                          5        6'd16   :  ratio = 8'd20 ;
    73              1                          5        6'd32   :  ratio = 8'd40 ;  
    75              1                    ***0***        default :  ratio = 8'd10 ;
Branch totals: 3 hits of 4 branches = 75.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      12        11         1    91.66%

================================Statement Details================================

Statement Coverage for instance /top/DUT/Common_Block_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Common_Block.v
    3                                                module Common_Block (
    4                                                    input Ref_Clk,  // 100 MG 
    5                                                    input Rst_n,
    6                                                    //input [7:0]div_ratio,
    7                                                    input  [5:0] DataBusWidth ,
    8                                                    output Bit_Rate_Clk,
    9                                                    output Bit_Rate_CLK_10,
    10                                                   `ifdef OFFSET_TEST
    11                                                      output reg Bit_Rate_Clk_offset,
    12                                                   `endif
    13                                                   output PCLK
    14                                               );
    15                                               
    16                                               
    17                                                 reg [7:0] ratio ;
    18                                               
    19                                               
    20                                                 PLL PLL_frquency_mult (
    21                                                     .Ref_Clk(Ref_Clk),
    22                                                     .CLK(Bit_Rate_Clk)  // 5G
    23                                                 );
    24                                               
    25                                               
    26                                                 Clock_Div clock_divider (
    27                                                     .Ref_Clk(Bit_Rate_Clk),  // 5G/10
    28                                                     .rst(Rst_n),
    29                                                     .div_ratio(8'b0000_1010),
    30                                                     .divided_clk(Bit_Rate_CLK_10)
    31                                                 );
    32                                               
    33                                               
    34                                                 Clock_Div clock_divider1 (
    35                                                     .Ref_Clk(Bit_Rate_Clk),  //PCLK
    36                                                     .rst(Rst_n),
    37                                                     .div_ratio(ratio),
    38                                                     .divided_clk(PCLK)
    39                                                 );
    40                                               
    41                                                
    42                                                `ifdef OFFSET_TEST
    43                                                  initial begin
    44              1                          5          Bit_Rate_Clk_offset = 0 ;
    45              1                          5          @(posedge Bit_Rate_Clk) ;
    46              1                          5          #0.0001
    47              1                          5          Bit_Rate_Clk_offset  = 1 ;
    48              1                          5          forever begin
    49              1                    2199640            #0.1 Bit_Rate_Clk_offset = ~ Bit_Rate_Clk_offset ;
    49              2                    2199635     
    50                                                    end 
    51                                                  end
    52                                               
    53                                                  // initial begin
    54                                                  //   Bit_Rate_Clk_offset = 0 ;
    55                                                  //   @(posedge Bit_Rate_Clk) ;
    56                                                  //   //#0.00003
    57                                                  //   Bit_Rate_Clk_offset  = 1 ;
    58                                                  //   forever begin
    59                                                  //     #0.10003 Bit_Rate_Clk_offset = ~ Bit_Rate_Clk_offset ;
    60                                                  //   end
    61                                                  //end
    62                                               
    63                                               
    64                                                `endif
    65                                               
    66                                               
    67              1                         15     always @(*) begin
    68                                                 
    69                                                case (DataBusWidth)
    70                                                  
    71              1                          5        6'd8    :  ratio = 8'd10 ;
    72              1                          5        6'd16   :  ratio = 8'd20 ;
    73              1                          5        6'd32   :  ratio = 8'd40 ;  
    74                                               
    75              1                    ***0***        default :  ratio = 8'd10 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         40        24        16    60.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/Common_Block_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Bit_Rate_CLK_10           5           5      100.00 
                                      Bit_Rate_Clk           5           5      100.00 
                               Bit_Rate_Clk_offset           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                              PCLK           5           5      100.00 
                                           Ref_Clk           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                          ratio[0]           0           0        0.00 
                                          ratio[1]           0           5       50.00 
                                        ratio[2-4]           5           5      100.00 
                                          ratio[5]           5           0       50.00 
                                        ratio[6-7]           0           0        0.00 

Total Node Count     =         20 
Toggled Node Count   =         10 
Untoggled Node Count =         10 

Toggle Coverage      =      60.00% (24 of 40 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_TX_U/GasKet_U
=== Design Unit: work.GasKet
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        21        20         1    95.23%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_TX_U/GasKet_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File GasKet.v
------------------------------------IF Branch------------------------------------
    29                                     47500     Count coming in to IF
    29              1                         15       if(~Reset_n) begin
    34              1                      44985       else if(MAC_Data_En)begin
    40              1                       2500       else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    53                                    107520     Count coming in to IF
    53              1                         45     if (!Reset_n) begin
    59              1                     107475     else  begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    61                                    107475     Count coming in to CASE
    63              1                      15000       6'd8 : begin
    69              1                      32500       6'd16 : begin
    82              1                      59975       6'd32 : begin
    104             1                    ***0***       default: begin
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    70                                     32500     Count coming in to IF
    70              1                      17500               if(Counter_16 == 0)  begin 
    75              1                      15000               else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    83                                     59975     Count coming in to IF
    83              1                      15000                if      (Counter_32 == 0) begin 
    88              1                      14995                else if (Counter_32 == 1) begin
    93              1                      14990                else if (Counter_32 == 2) begin
    98              1                      14990                else  begin
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    119                                   107490     Count coming in to IF
    119             1                         20     if(!Reset_n) begin
    126             1                     104960     else if (Enable) begin
    151             1                       2510     else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    128                                   104960     Count coming in to IF
    128             1                      14995           if(DataBusWidth == 8)begin
    135             1                      29995           else if(DataBusWidth == 16)begin
    142             1                      59970           else begin
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       5         5         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_TX_U/GasKet_U --

  File GasKet.v
----------------Focused Condition View-------------------
Line       83 Item    1  (Counter_32 == 0)
Condition totals: 1 of 1 input term covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (Counter_32 == 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Counter_32 == 0)_0   -                             
  Row   2:          5  (Counter_32 == 0)_1   -                             

----------------Focused Condition View-------------------
Line       88 Item    1  (Counter_32 == 1)
Condition totals: 1 of 1 input term covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (Counter_32 == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Counter_32 == 1)_0   -                             
  Row   2:          5  (Counter_32 == 1)_1   -                             

----------------Focused Condition View-------------------
Line       93 Item    1  (Counter_32 == 2)
Condition totals: 1 of 1 input term covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (Counter_32 == 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Counter_32 == 2)_0   -                             
  Row   2:          5  (Counter_32 == 2)_1   -                             

----------------Focused Condition View-------------------
Line       128 Item    1  (DataBusWidth == 8)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (DataBusWidth == 8)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          5  (DataBusWidth == 8)_0  -                             
  Row   2:          5  (DataBusWidth == 8)_1  -                             

----------------Focused Condition View-------------------
Line       135 Item    1  (DataBusWidth == 16)
Condition totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (DataBusWidth == 16)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          5  (DataBusWidth == 16)_0  -                             
  Row   2:          5  (DataBusWidth == 16)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      49        47         2    95.91%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_TX_U/GasKet_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File GasKet.v
    1                                                module GasKet
    2                                                (
    3                                                  input                                      PCLK                   ,
    4                                                  input                                      Bit_Rate_CLK_10        ,
    5                                                  input                                      Reset_n                ,
    6                                                  input         [5  : 0 ]                    DataBusWidth           ,
    7                                                  input         [31 : 0 ]                    MAC_TX_Data            ,
    8                                                  input         [3  : 0 ]                    MAC_TX_DataK           ,
    9                                                  input                                      MAC_Data_En            , 
    10                                                 
    11                                                 output  reg                                TxDataK                ,
    12                                                 output  reg   [7  : 0 ]                    TxData                                
    13                                               
    14                                               );
    15                                               
    16                                               
    17                                               
    18                                               reg        Counter_16         ;
    19                                               reg [1:0]  Counter_32         ;
    20                                               reg [7:0]  Temp_Reg           ; 
    21                                               reg        Tempk_Reg          ;  
    22                                               reg [31:0] MAC_TX_Data_temp   ;
    23                                               reg [3 :0] MAC_TX_DataK_temp  ;
    24                                               reg        Enable             ;
    25                                               
    26                                               ///////////////////////////////////////////////////////////////
    27                                               
    28              1                      47500     always @(posedge PCLK) begin
    29                                                 if(~Reset_n) begin
    30              1                         15          MAC_TX_Data_temp  <= 0 ;
    31              1                         15          MAC_TX_DataK_temp <= 0 ;
    32                                                 end 
    33                                               
    34                                                 else if(MAC_Data_En)begin
    35              1                      44985         MAC_TX_Data_temp   <= MAC_TX_Data  ;
    36              1                      44985         MAC_TX_DataK_temp  <= MAC_TX_DataK ;
    37              1                      44985         Enable             <= 1            ;
    38                                                 end
    39                                               
    40                                                 else begin
    41              1                       2500         MAC_TX_Data_temp   <= MAC_TX_Data  ;
    42              1                       2500         MAC_TX_DataK_temp  <= MAC_TX_DataK ;
    43              1                       2500         Enable             <= 0            ;
    44                                                 end
    45                                               end
    46                                               
    47                                               
    48                                               ///////////////////////////////////////////////////////////////
    49                                               
    50                                               
    51              1                     107520     always@(*) begin
    52                                               
    53                                               if (!Reset_n) begin
    54              1                         45        Temp_Reg  = 0 ;
    55              1                         45        Tempk_Reg = 0 ;
    56                                               end
    57                                               
    58                                               
    59                                               else  begin
    60                                                 
    61                                                 case (DataBusWidth)
    62                                                 
    63                                                 6'd8 : begin
    64              1                      15000               Temp_Reg  = MAC_TX_Data_temp [7:0];
    65              1                      15000               Tempk_Reg = MAC_TX_DataK_temp[0]  ;
    66                                                        end
    67                                               
    68                                               
    69                                                 6'd16 : begin
    70                                                         if(Counter_16 == 0)  begin 
    71              1                      17500                Temp_Reg  = MAC_TX_Data_temp[7 :0 ];
    72              1                      17500                Tempk_Reg = MAC_TX_DataK_temp[0]  ;
    73                                                         end
    74                                               
    75                                                         else begin
    76              1                      15000                 Temp_Reg  = MAC_TX_Data_temp[15:8 ];
    77              1                      15000                 Tempk_Reg = MAC_TX_DataK_temp[1]  ;             
    78                                                         end
    79                                                         end 
    80                                               
    81                                               
    82                                                 6'd32 : begin
    83                                                          if      (Counter_32 == 0) begin 
    84              1                      15000                Temp_Reg  = MAC_TX_Data_temp[7 :0 ];
    85              1                      15000                Tempk_Reg = MAC_TX_DataK_temp[0]   ;
    86                                                          end
    87                                               
    88                                                          else if (Counter_32 == 1) begin
    89              1                      14995                Temp_Reg  = MAC_TX_Data_temp  [15:8 ];
    90              1                      14995                Tempk_Reg = MAC_TX_DataK_temp [1]    ;
    91                                                          end
    92                                               
    93                                                          else if (Counter_32 == 2) begin
    94              1                      14990                 Temp_Reg  = MAC_TX_Data_temp[23:16];
    95              1                      14990                 Tempk_Reg = MAC_TX_DataK_temp[2]   ;
    96                                                          end
    97                                               
    98                                                          else  begin
    99              1                      14990                 Temp_Reg  = MAC_TX_Data_temp[31:24];                  
    100             1                      14990                 Tempk_Reg = MAC_TX_DataK_temp[3]   ;            
    101                                                         end
    102                                                       end 
    103                                              
    104                                                default: begin
    105             1                    ***0***                 Temp_Reg  = MAC_TX_Data_temp[7:0] ;
    106             1                    ***0***                 Tempk_Reg = MAC_TX_DataK_temp[0]  ;
    107                                                        end
    108                                                endcase
    109                                              
    110                                               end
    111                                              end
    112                                              
    113                                              
    114                                              ///////////////////////////////////////////////////////////////
    115                                              
    116                                              
    117             1                     107490     always@(posedge Bit_Rate_CLK_10 or negedge Reset_n) begin
    118                                              
    119                                              if(!Reset_n) begin
    120             1                         20     Counter_16 <= 0           ;
    121             1                         20     Counter_32 <= 0           ; 
    122             1                         20     TxData     <= 0           ;
    123             1                         20     TxDataK    <= 0           ;
    124                                              end
    125                                              
    126                                              else if (Enable) begin
    127                                              
    128                                                    if(DataBusWidth == 8)begin
    129             1                      14995           Counter_16 <= 0              ;
    130             1                      14995           Counter_32 <= 0              ;
    131             1                      14995           TxData     <= Temp_Reg       ;
    132             1                      14995           TxDataK    <= Tempk_Reg      ;
    133                                                    end
    134                                                    
    135                                                    else if(DataBusWidth == 16)begin
    136             1                      29995           Counter_32 <= 0              ;  
    137             1                      29995           TxData     <= Temp_Reg       ;
    138             1                      29995           TxDataK    <= Tempk_Reg      ;
    139             1                      29995           Counter_16 <= Counter_16 + 1 ; 
    140                                                    end
    141                                                    
    142                                                    else begin
    143             1                      59970           Counter_16 <= 0              ;
    144             1                      59970           TxData     <= Temp_Reg       ;
    145             1                      59970           TxDataK    <= Tempk_Reg      ;
    146             1                      59970           Counter_32 <= Counter_32 + 1 ; 
    147                                                    end
    148                                              end 
    149                                              
    150                                              
    151                                              else begin
    152                                              
    153             1                       2510     Counter_16 <= 0           ;
    154             1                       2510     Counter_32 <= 0           ; 
    155             1                       2510     TxData     <= 0           ;
    156             1                       2510     TxDataK    <= 0           ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        208       200         8    96.15%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_TX_U/GasKet_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Bit_Rate_CLK_10           5           5      100.00 
                                        Counter_16           5           5      100.00 
                                   Counter_32[0-1]           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                            Enable           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                 MAC_TX_Data[0-31]           5           5      100.00 
                                 MAC_TX_DataK[0-3]           5           5      100.00 
                            MAC_TX_DataK_temp[0-3]           5           5      100.00 
                            MAC_TX_Data_temp[0-31]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                           Reset_n           5           5      100.00 
                                     Temp_Reg[0-7]           5           5      100.00 
                                         Tempk_Reg           5           5      100.00 
                                       TxData[0-7]           5           5      100.00 
                                           TxDataK           5           5      100.00 

Total Node Count     =        104 
Toggled Node Count   =         99 
Untoggled Node Count =          5 

Toggle Coverage      =      96.15% (200 of 208 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_TX_U/Encoding_U/line_coding_8_10_U
=== Design Unit: work.line_coding_8_10
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       273       260        13    95.23%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/line_coding_8_10_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File line_coding_8_10.v
------------------------------------IF Branch------------------------------------
    11                                     59931     Count coming in to IF
    11              1                      37401         if (enable && !TXDataK) begin
    1055            1                      22500         end else if (enable && TXDataK) begin // send command k28.0 --> k30.7
    1106            1                         30         end else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    12                                     37401     Count coming in to CASE
    13              1                        111             8'b0000_0000: begin
    17              1                         82             8'b0000_0001: begin
    21              1                         97             8'b0000_0010: begin
    25              1                        117             8'b0000_0011: begin
    29              1                         94             8'b0000_0100: begin
    33              1                         91             8'b0000_0101: begin
    37              1                        102             8'b0000_0110: begin
    41              1                        109             8'b0000_0111: begin
    45              1                         99             8'b0000_1000: begin
    49              1                        121             8'b0000_1001: begin
    53              1                         87             8'b0000_1010: begin
    57              1                         95             8'b0000_1011: begin
    61              1                         97             8'b0000_1100: begin
    65              1                         97             8'b0000_1101: begin
    69              1                        120             8'b0000_1110: begin
    73              1                         96             8'b0000_1111: begin
    77              1                        110             8'b0001_0000: begin
    81              1                         98             8'b0001_0001: begin
    85              1                         98             8'b0001_0010: begin
    89              1                        114             8'b0001_0011: begin
    93              1                         89             8'b0001_0100: begin
    97              1                        107             8'b0001_0101: begin
    101             1                        106             8'b0001_0110: begin
    105             1                        104             8'b0001_0111: begin
    109             1                        108             8'b0001_1000: begin
    113             1                         96             8'b0001_1001: begin
    117             1                        126             8'b0001_1010: begin
    121             1                        116             8'b0001_1011: begin
    125             1                        104             8'b0001_1100: begin
    129             1                        118             8'b0001_1101: begin
    133             1                         91             8'b0001_1110: begin
    137             1                        117             8'b0001_1111: begin
    142             1                         98             8'b0010_0000: begin
    146             1                         90             8'b0010_0001: begin
    150             1                        104             8'b0010_0010: begin
    154             1                        108             8'b0010_0011: begin
    158             1                        104             8'b0010_0100: begin
    162             1                         96             8'b0010_0101: begin
    166             1                        102             8'b0010_0110: begin
    170             1                         99             8'b0010_0111: begin
    174             1                         94             8'b0010_1000: begin
    178             1                        120             8'b0010_1001: begin
    182             1                         85             8'b0010_1010: begin
    186             1                        101             8'b0010_1011: begin
    190             1                         90             8'b0010_1100: begin
    194             1                         93             8'b0010_1101: begin
    198             1                        104             8'b0010_1110: begin
    202             1                         82             8'b0010_1111: begin
    206             1                        125             8'b0011_0000: begin
    210             1                        101             8'b0011_0001: begin
    214             1                        123             8'b0011_0010: begin
    218             1                        123             8'b0011_0011: begin
    222             1                         98             8'b0011_0100: begin
    226             1                        110             8'b0011_0101: begin
    230             1                        110             8'b0011_0110: begin
    234             1                         94             8'b0011_0111: begin
    238             1                         74             8'b0011_1000: begin
    242             1                         96             8'b0011_1001: begin
    246             1                        110             8'b0011_1010: begin
    250             1                        120             8'b0011_1011: begin
    254             1                        123             8'b0011_1100: begin
    258             1                        100             8'b0011_1101: begin
    262             1                        106             8'b0011_1110: begin
    266             1                        107             8'b0011_1111: begin
    272             1                        110             8'b0100_0000: begin
    276             1                         97             8'b0100_0001: begin
    280             1                        107             8'b0100_0010: begin
    284             1                         94             8'b0100_0011: begin
    288             1                        108             8'b0100_0100: begin
    292             1                        106             8'b0100_0101: begin
    296             1                        109             8'b0100_0110: begin
    300             1                         93             8'b0100_0111: begin
    304             1                         89             8'b0100_1000: begin
    308             1                        118             8'b0100_1001: begin
    312             1                      11352             8'b0100_1010: begin
    316             1                         96             8'b0100_1011: begin
    320             1                         92             8'b0100_1100: begin
    324             1                         94             8'b0100_1101: begin
    328             1                         95             8'b0100_1110: begin
    332             1                        104             8'b0100_1111: begin
    336             1                         89             8'b0101_0000: begin
    340             1                        111             8'b0101_0001: begin
    344             1                         91             8'b0101_0010: begin
    348             1                        104             8'b0101_0011: begin
    352             1                        101             8'b0101_0100: begin
    356             1                         94             8'b0101_0101: begin
    360             1                        107             8'b0101_0110: begin
    364             1                        101             8'b0101_0111: begin
    368             1                        114             8'b0101_1000: begin
    372             1                        105             8'b0101_1001: begin
    376             1                        101             8'b0101_1010: begin
    380             1                         89             8'b0101_1011: begin
    384             1                        102             8'b0101_1100: begin
    388             1                         92             8'b0101_1101: begin
    392             1                         90             8'b0101_1110: begin
    396             1                         93             8'b0101_1111: begin
    403             1                        102             8'b0110_0000: begin
    407             1                        104             8'b0110_0001: begin
    411             1                        115             8'b0110_0010: begin
    415             1                        122             8'b0110_0011: begin
    419             1                         95             8'b0110_0100: begin
    423             1                         98             8'b0110_0101: begin
    427             1                         89             8'b0110_0110: begin
    431             1                        108             8'b0110_0111: begin
    435             1                         86             8'b0110_1000: begin
    439             1                        115             8'b0110_1001: begin
    443             1                         90             8'b0110_1010: begin
    447             1                         92             8'b0110_1011: begin
    451             1                        114             8'b0110_1100: begin
    455             1                        114             8'b0110_1101: begin
    459             1                        113             8'b0110_1110: begin
    463             1                        100             8'b0110_1111: begin
    467             1                        118             8'b0111_0000: begin
    471             1                        109             8'b0111_0001: begin
    475             1                         92             8'b0111_0010: begin
    479             1                        112             8'b0111_0011: begin
    483             1                        107             8'b0111_0100: begin
    487             1                        101             8'b0111_0101: begin
    491             1                         97             8'b0111_0110: begin
    495             1                         93             8'b0111_0111: begin
    499             1                        102             8'b0111_1000: begin
    503             1                         96             8'b0111_1001: begin
    507             1                        111             8'b0111_1010: begin
    511             1                         98             8'b0111_1011: begin
    515             1                        117             8'b0111_1100: begin
    519             1                        106             8'b0111_1101: begin
    523             1                        110             8'b0111_1110: begin
    527             1                         97             8'b0111_1111: begin
    536             1                         99             8'b1000_0000: begin
    540             1                         98             8'b1000_0001: begin
    544             1                         90             8'b1000_0010: begin
    548             1                        106             8'b1000_0011: begin
    552             1                        107             8'b1000_0100: begin
    556             1                        117             8'b1000_0101: begin
    560             1                        111             8'b1000_0110: begin
    564             1                        106             8'b1000_0111: begin
    568             1                        127             8'b1000_1000: begin
    572             1                        105             8'b1000_1001: begin
    576             1                        108             8'b1000_1010: begin
    580             1                        106             8'b1000_1011: begin
    584             1                        103             8'b1000_1100: begin
    588             1                        107             8'b1000_1101: begin
    592             1                         98             8'b1000_1110: begin
    596             1                         99             8'b1000_1111: begin
    600             1                        111             8'b1001_0000: begin
    604             1                         98             8'b1001_0001: begin
    608             1                        127             8'b1001_0010: begin
    612             1                         88             8'b1001_0011: begin
    616             1                        106             8'b1001_0100: begin
    620             1                         88             8'b1001_0101: begin
    624             1                        114             8'b1001_0110: begin
    628             1                         87             8'b1001_0111: begin
    632             1                        111             8'b1001_1000: begin
    636             1                        107             8'b1001_1001: begin
    640             1                         87             8'b1001_1010: begin
    644             1                         90             8'b1001_1011: begin
    648             1                        120             8'b1001_1100: begin
    652             1                         74             8'b1001_1101: begin
    656             1                        106             8'b1001_1110: begin
    660             1                        120             8'b1001_1111: begin
    665             1                        111             8'b1010_0000: begin
    669             1                         98             8'b1010_0001: begin
    673             1                         94             8'b1010_0010: begin
    677             1                        101             8'b1010_0011: begin
    681             1                        101             8'b1010_0100: begin
    685             1                         97             8'b1010_0101: begin
    689             1                         99             8'b1010_0110: begin
    693             1                         87             8'b1010_0111: begin
    697             1                         97             8'b1010_1000: begin
    701             1                        100             8'b1010_1001: begin
    705             1                         89             8'b1010_1010: begin
    709             1                        103             8'b1010_1011: begin
    713             1                        101             8'b1010_1100: begin
    717             1                        112             8'b1010_1101: begin
    721             1                        102             8'b1010_1110: begin
    725             1                        106             8'b1010_1111: begin
    729             1                         85             8'b1011_0000: begin
    733             1                        100             8'b1011_0001: begin
    737             1                        100             8'b1011_0010: begin
    741             1                        109             8'b1011_0011: begin
    745             1                         96             8'b1011_0100: begin
    749             1                         98             8'b1011_0101: begin
    753             1                        106             8'b1011_0110: begin
    757             1                         97             8'b1011_0111: begin
    761             1                         97             8'b1011_1000: begin
    765             1                        118             8'b1011_1001: begin
    769             1                        112             8'b1011_1010: begin
    773             1                        118             8'b1011_1011: begin
    777             1                         96             8'b1011_1100: begin
    781             1                        104             8'b1011_1101: begin
    785             1                        109             8'b1011_1110: begin
    789             1                        110             8'b1011_1111: begin
    795             1                         94             8'b1100_0000: begin
    799             1                        124             8'b1100_0001: begin
    803             1                         88             8'b1100_0010: begin
    807             1                         93             8'b1100_0011: begin
    811             1                         92             8'b1100_0100: begin
    815             1                         87             8'b1100_0101: begin
    819             1                        108             8'b1100_0110: begin
    823             1                        120             8'b1100_0111: begin
    827             1                         96             8'b1100_1000: begin
    831             1                        103             8'b1100_1001: begin
    835             1                        100             8'b1100_1010: begin
    839             1                         98             8'b1100_1011: begin
    843             1                         86             8'b1100_1100: begin
    847             1                        109             8'b1100_1101: begin
    851             1                         96             8'b1100_1110: begin
    855             1                        101             8'b1100_1111: begin
    859             1                        102             8'b1101_0000: begin
    863             1                         99             8'b1101_0001: begin
    867             1                        112             8'b1101_0010: begin
    871             1                        110             8'b1101_0011: begin
    875             1                        103             8'b1101_0100: begin
    879             1                         92             8'b1101_0101: begin
    883             1                        113             8'b1101_0110: begin
    887             1                        103             8'b1101_0111: begin
    891             1                         98             8'b1101_1000: begin
    895             1                        100             8'b1101_1001: begin
    899             1                        107             8'b1101_1010: begin
    903             1                        102             8'b1101_1011: begin
    907             1                        108             8'b1101_1100: begin
    911             1                         90             8'b1101_1101: begin
    915             1                        101             8'b1101_1110: begin
    919             1                        124             8'b1101_1111: begin
    926             1                        102             8'b1110_0000: begin
    930             1                        102             8'b1110_0001: begin
    934             1                         88             8'b1110_0010: begin
    938             1                        120             8'b1110_0011: begin
    942             1                         98             8'b1110_0100: begin
    946             1                         79             8'b1110_0101: begin
    950             1                        100             8'b1110_0110: begin
    954             1                        104             8'b1110_0111: begin
    958             1                        117             8'b1110_1000: begin
    962             1                         94             8'b1110_1001: begin
    966             1                         99             8'b1110_1010: begin
    970             1                        110             8'b1110_1011: begin
    974             1                        116             8'b1110_1100: begin
    978             1                        109             8'b1110_1101: begin
    982             1                        101             8'b1110_1110: begin
    986             1                         99             8'b1110_1111: begin
    990             1                         96             8'b1111_0000: begin
    994             1                        105             8'b1111_0001: begin
    998             1                         97             8'b1111_0010: begin
    1002            1                         85             8'b1111_0011: begin
    1006            1                         86             8'b1111_0100: begin
    1010            1                        100             8'b1111_0101: begin
    1014            1                        111             8'b1111_0110: begin
    1018            1                         97             8'b1111_0111: begin
    1022            1                         94             8'b1111_1000: begin
    1026            1                         88             8'b1111_1001: begin
    1030            1                        102             8'b1111_1010: begin
    1034            1                        100             8'b1111_1011: begin
    1038            1                        103             8'b1111_1100: begin
    1042            1                        108             8'b1111_1101: begin
    1046            1                         84             8'b1111_1110: begin
    1050            1                         96             8'b1111_1111: begin
                                         ***0***     All False Count
Branch totals: 256 hits of 257 branches = 99.61%

------------------------------------CASE Branch------------------------------------
    1056                                   22500     Count coming in to CASE
    1057            1                    ***0***             8'b0001_1100: begin
    1061            1                    ***0***             8'b0011_1100: begin
    1065            1                    ***0***             8'b0101_1100: begin
    1069            1                    ***0***             8'b0111_1100: begin
    1073            1                    ***0***             8'b1001_1100: begin
    1077            1                      22500             8'b1011_1100: begin
    1081            1                    ***0***             8'b1101_1100: begin
    1085            1                    ***0***             8'b1111_1100: begin
    1089            1                    ***0***             8'b1111_0111: begin
    1093            1                    ***0***             8'b1111_1011: begin
    1097            1                    ***0***             8'b1111_1101: begin
    1101            1                    ***0***             8'b1111_1110: begin
                                         ***0***     All False Count
Branch totals: 1 hit of 13 branches = 7.69%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         3         1    75.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/line_coding_8_10_U --

  File line_coding_8_10.v
----------------Focused Condition View-------------------
Line       11 Item    1  (enable && ~TXDataK)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      enable         Y
     TXDataK         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  enable_0              -                             
  Row   2:          5  enable_1              ~TXDataK                      
  Row   3:          5  TXDataK_0             enable                        
  Row   4:          5  TXDataK_1             enable                        

----------------Focused Condition View-------------------
Line       1055 Item    1  (enable && TXDataK)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      enable         Y
     TXDataK         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  enable_0              -                             
  Row   2:          5  enable_1              TXDataK                       
  Row   3:    ***0***  TXDataK_0             enable                        
  Row   4:          5  TXDataK_1             enable                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     539       517        22    95.91%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/line_coding_8_10_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File line_coding_8_10.v
    1                                                module line_coding_8_10  //#(parameter DATAWIDTH = 8)
    2                                                (  // inut wire pclk,
    3                                                    input wire enable,
    4                                                    input wire  TXDataK,
    5                                                    input wire [7:0] data,
    6                                                    output reg [9:0] encoded_data_pos,
    7                                                    output reg [9:0] encoded_data_neg
    8                                                );
    9                                                
    10              1                      59931       always @(*) begin
    11                                                   if (enable && !TXDataK) begin
    12                                                     case (data)  //////////// D0.0 --> D31.0
    13                                                       8'b0000_0000: begin
    14              1                        111               encoded_data_neg = 10'b100111_0100;
    15              1                        111               encoded_data_pos = 10'b011000_1011;
    16                                                       end
    17                                                       8'b0000_0001: begin
    18              1                         82               encoded_data_neg = 10'b011101_0100;
    19              1                         82               encoded_data_pos = 10'b100010_1011;
    20                                                       end
    21                                                       8'b0000_0010: begin
    22              1                         97               encoded_data_neg = 10'b101101_0100;
    23              1                         97               encoded_data_pos = 10'b010010_1011;
    24                                                       end
    25                                                       8'b0000_0011: begin
    26              1                        117               encoded_data_neg = 10'b110001_1011;
    27              1                        117               encoded_data_pos = 10'b110001_0100;
    28                                                       end
    29                                                       8'b0000_0100: begin
    30              1                         94               encoded_data_neg = 10'b110101_0100;
    31              1                         94               encoded_data_pos = 10'b001010_1011;
    32                                                       end
    33                                                       8'b0000_0101: begin
    34              1                         91               encoded_data_neg = 10'b101001_1011;
    35              1                         91               encoded_data_pos = 10'b101001_0100;
    36                                                       end
    37                                                       8'b0000_0110: begin
    38              1                        102               encoded_data_neg = 10'b011001_1011;
    39              1                        102               encoded_data_pos = 10'b011001_0100;
    40                                                       end
    41                                                       8'b0000_0111: begin
    42              1                        109               encoded_data_neg = 10'b111000_1011;
    43              1                        109               encoded_data_pos = 10'b000111_0100;
    44                                                       end
    45                                                       8'b0000_1000: begin
    46              1                         99               encoded_data_neg = 10'b111001_0100;
    47              1                         99               encoded_data_pos = 10'b000110_1011;
    48                                                       end
    49                                                       8'b0000_1001: begin
    50              1                        121               encoded_data_neg = 10'b100101_1011;
    51              1                        121               encoded_data_pos = 10'b100101_0100;
    52                                                       end
    53                                                       8'b0000_1010: begin
    54              1                         87               encoded_data_neg = 10'b010101_1011;
    55              1                         87               encoded_data_pos = 10'b010101_0100;
    56                                                       end
    57                                                       8'b0000_1011: begin
    58              1                         95               encoded_data_neg = 10'b110100_1011;
    59              1                         95               encoded_data_pos = 10'b110100_0100;
    60                                                       end
    61                                                       8'b0000_1100: begin
    62              1                         97               encoded_data_neg = 10'b001101_1011;
    63              1                         97               encoded_data_pos = 10'b001101_0100;
    64                                                       end
    65                                                       8'b0000_1101: begin
    66              1                         97               encoded_data_neg = 10'b101100_1011;
    67              1                         97               encoded_data_pos = 10'b101100_0100;
    68                                                       end
    69                                                       8'b0000_1110: begin
    70              1                        120               encoded_data_neg = 10'b011100_1011;
    71              1                        120               encoded_data_pos = 10'b011100_0100;
    72                                                       end
    73                                                       8'b0000_1111: begin
    74              1                         96               encoded_data_neg = 10'b010111_0100;
    75              1                         96               encoded_data_pos = 10'b101000_1011;
    76                                                       end
    77                                                       8'b0001_0000: begin
    78              1                        110               encoded_data_neg = 10'b011011_0100;
    79              1                        110               encoded_data_pos = 10'b100100_1011;
    80                                                       end
    81                                                       8'b0001_0001: begin
    82              1                         98               encoded_data_neg = 10'b100011_1011;
    83              1                         98               encoded_data_pos = 10'b100011_0100;
    84                                                       end
    85                                                       8'b0001_0010: begin
    86              1                         98               encoded_data_neg = 10'b010011_1011;
    87              1                         98               encoded_data_pos = 10'b010011_0100;
    88                                                       end
    89                                                       8'b0001_0011: begin
    90              1                        114               encoded_data_neg = 10'b110010_1011;
    91              1                        114               encoded_data_pos = 10'b110010_0100;
    92                                                       end
    93                                                       8'b0001_0100: begin
    94              1                         89               encoded_data_neg = 10'b001011_1011;
    95              1                         89               encoded_data_pos = 10'b001011_0100;
    96                                                       end
    97                                                       8'b0001_0101: begin
    98              1                        107               encoded_data_neg = 10'b101010_1011;
    99              1                        107               encoded_data_pos = 10'b101010_0100;
    100                                                      end
    101                                                      8'b0001_0110: begin
    102             1                        106               encoded_data_neg = 10'b011010_1011;
    103             1                        106               encoded_data_pos = 10'b011010_0100;
    104                                                      end
    105                                                      8'b0001_0111: begin
    106             1                        104               encoded_data_neg = 10'b111010_0100;
    107             1                        104               encoded_data_pos = 10'b000101_1011;
    108                                                      end
    109                                                      8'b0001_1000: begin
    110             1                        108               encoded_data_neg = 10'b110011_0100;
    111             1                        108               encoded_data_pos = 10'b001100_1011;
    112                                                      end
    113                                                      8'b0001_1001: begin
    114             1                         96               encoded_data_neg = 10'b100110_1011;
    115             1                         96               encoded_data_pos = 10'b100110_0100;
    116                                                      end
    117                                                      8'b0001_1010: begin
    118             1                        126               encoded_data_neg = 10'b010110_1011;
    119             1                        126               encoded_data_pos = 10'b010110_0100;
    120                                                      end
    121                                                      8'b0001_1011: begin
    122             1                        116               encoded_data_neg = 10'b110110_0100;
    123             1                        116               encoded_data_pos = 10'b001001_1011;
    124                                                      end
    125                                                      8'b0001_1100: begin
    126             1                        104               encoded_data_neg = 10'b001110_1011;
    127             1                        104               encoded_data_pos = 10'b001110_0100;
    128                                                      end
    129                                                      8'b0001_1101: begin
    130             1                        118               encoded_data_neg = 10'b101110_0100;
    131             1                        118               encoded_data_pos = 10'b010001_1011;
    132                                                      end
    133                                                      8'b0001_1110: begin
    134             1                         91               encoded_data_neg = 10'b011110_0100;
    135             1                         91               encoded_data_pos = 10'b100001_1011;
    136                                                      end
    137                                                      8'b0001_1111: begin
    138             1                        117               encoded_data_neg = 10'b101011_0100;
    139             1                        117               encoded_data_pos = 10'b010100_1011;
    140                                                      end
    141                                                      //////////// D0.1 --> D31.1
    142                                                      8'b0010_0000: begin
    143             1                         98               encoded_data_neg = 10'b100111_1001;
    144             1                         98               encoded_data_pos = 10'b011000_1001;
    145                                                      end
    146                                                      8'b0010_0001: begin
    147             1                         90               encoded_data_neg = 10'b011101_1001;
    148             1                         90               encoded_data_pos = 10'b100010_1001;
    149                                                      end
    150                                                      8'b0010_0010: begin
    151             1                        104               encoded_data_neg = 10'b101101_1001;
    152             1                        104               encoded_data_pos = 10'b010010_1001;
    153                                                      end
    154                                                      8'b0010_0011: begin
    155             1                        108               encoded_data_neg = 10'b110001_1001;
    156             1                        108               encoded_data_pos = 10'b110001_1001;
    157                                                      end
    158                                                      8'b0010_0100: begin
    159             1                        104               encoded_data_neg = 10'b110101_1001;
    160             1                        104               encoded_data_pos = 10'b001010_1001;
    161                                                      end
    162                                                      8'b0010_0101: begin
    163             1                         96               encoded_data_neg = 10'b101001_1001;
    164             1                         96               encoded_data_pos = 10'b101001_1001;
    165                                                      end
    166                                                      8'b0010_0110: begin
    167             1                        102               encoded_data_neg = 10'b011001_1001;
    168             1                        102               encoded_data_pos = 10'b011001_1001;
    169                                                      end
    170                                                      8'b0010_0111: begin
    171             1                         99               encoded_data_neg = 10'b111000_1001;
    172             1                         99               encoded_data_pos = 10'b000111_1001;
    173                                                      end
    174                                                      8'b0010_1000: begin
    175             1                         94               encoded_data_neg = 10'b111001_1001;
    176             1                         94               encoded_data_pos = 10'b000110_1001;
    177                                                      end
    178                                                      8'b0010_1001: begin
    179             1                        120               encoded_data_neg = 10'b100101_1001;
    180             1                        120               encoded_data_pos = 10'b100101_1001;
    181                                                      end
    182                                                      8'b0010_1010: begin
    183             1                         85               encoded_data_neg = 10'b010101_1001;
    184             1                         85               encoded_data_pos = 10'b010101_1001;
    185                                                      end
    186                                                      8'b0010_1011: begin
    187             1                        101               encoded_data_neg = 10'b110100_1001;
    188             1                        101               encoded_data_pos = 10'b110100_1001;
    189                                                      end
    190                                                      8'b0010_1100: begin
    191             1                         90               encoded_data_neg = 10'b001101_1001;
    192             1                         90               encoded_data_pos = 10'b001101_1001;
    193                                                      end
    194                                                      8'b0010_1101: begin
    195             1                         93               encoded_data_neg = 10'b101100_1001;
    196             1                         93               encoded_data_pos = 10'b101100_1001;
    197                                                      end
    198                                                      8'b0010_1110: begin
    199             1                        104               encoded_data_neg = 10'b011100_1001;
    200             1                        104               encoded_data_pos = 10'b011100_1001;
    201                                                      end
    202                                                      8'b0010_1111: begin
    203             1                         82               encoded_data_neg = 10'b010111_1001;
    204             1                         82               encoded_data_pos = 10'b101000_1001;
    205                                                      end
    206                                                      8'b0011_0000: begin
    207             1                        125               encoded_data_neg = 10'b011011_1001;
    208             1                        125               encoded_data_pos = 10'b100100_1001;
    209                                                      end
    210                                                      8'b0011_0001: begin
    211             1                        101               encoded_data_neg = 10'b100011_1001;
    212             1                        101               encoded_data_pos = 10'b100011_1001;
    213                                                      end
    214                                                      8'b0011_0010: begin
    215             1                        123               encoded_data_neg = 10'b010011_1001;
    216             1                        123               encoded_data_pos = 10'b010011_1001;
    217                                                      end
    218                                                      8'b0011_0011: begin
    219             1                        123               encoded_data_neg = 10'b110010_1001;
    220             1                        123               encoded_data_pos = 10'b110010_1001;
    221                                                      end
    222                                                      8'b0011_0100: begin
    223             1                         98               encoded_data_neg = 10'b001011_1001;
    224             1                         98               encoded_data_pos = 10'b001011_1001;
    225                                                      end
    226                                                      8'b0011_0101: begin
    227             1                        110               encoded_data_neg = 10'b101010_1001;
    228             1                        110               encoded_data_pos = 10'b101010_1001;
    229                                                      end
    230                                                      8'b0011_0110: begin
    231             1                        110               encoded_data_neg = 10'b011010_1001;
    232             1                        110               encoded_data_pos = 10'b011010_1001;
    233                                                      end
    234                                                      8'b0011_0111: begin
    235             1                         94               encoded_data_neg = 10'b111010_1001;
    236             1                         94               encoded_data_pos = 10'b000101_1001;
    237                                                      end
    238                                                      8'b0011_1000: begin
    239             1                         74               encoded_data_neg = 10'b110011_1001;
    240             1                         74               encoded_data_pos = 10'b001100_1001;
    241                                                      end
    242                                                      8'b0011_1001: begin
    243             1                         96               encoded_data_neg = 10'b100110_1001;
    244             1                         96               encoded_data_pos = 10'b100110_1001;
    245                                                      end
    246                                                      8'b0011_1010: begin
    247             1                        110               encoded_data_neg = 10'b010110_1001;
    248             1                        110               encoded_data_pos = 10'b010110_1001;
    249                                                      end
    250                                                      8'b0011_1011: begin
    251             1                        120               encoded_data_neg = 10'b110110_1001;
    252             1                        120               encoded_data_pos = 10'b001001_1001;
    253                                                      end
    254                                                      8'b0011_1100: begin
    255             1                        123               encoded_data_neg = 10'b001110_1001;
    256             1                        123               encoded_data_pos = 10'b001110_1001;
    257                                                      end
    258                                                      8'b0011_1101: begin
    259             1                        100               encoded_data_neg = 10'b101110_1001;
    260             1                        100               encoded_data_pos = 10'b010001_1001;
    261                                                      end
    262                                                      8'b0011_1110: begin
    263             1                        106               encoded_data_neg = 10'b011110_1001;
    264             1                        106               encoded_data_pos = 10'b100001_1001;
    265                                                      end
    266                                                      8'b0011_1111: begin
    267             1                        107               encoded_data_neg = 10'b101011_1001;
    268             1                        107               encoded_data_pos = 10'b010100_1001;
    269                                                      end
    270                                                      ///////////// D0.2 --> D31.2
    271                                                      ////////////////////////////
    272                                                      8'b0100_0000: begin
    273             1                        110               encoded_data_neg = 10'b100111_0101;
    274             1                        110               encoded_data_pos = 10'b011000_0101;
    275                                                      end
    276                                                      8'b0100_0001: begin
    277             1                         97               encoded_data_neg = 10'b011101_0101;
    278             1                         97               encoded_data_pos = 10'b100010_0101;
    279                                                      end
    280                                                      8'b0100_0010: begin
    281             1                        107               encoded_data_neg = 10'b101101_0101;
    282             1                        107               encoded_data_pos = 10'b010010_0101;
    283                                                      end
    284                                                      8'b0100_0011: begin
    285             1                         94               encoded_data_neg = 10'b110001_0101;
    286             1                         94               encoded_data_pos = 10'b110001_0101;
    287                                                      end
    288                                                      8'b0100_0100: begin
    289             1                        108               encoded_data_neg = 10'b110101_0101;
    290             1                        108               encoded_data_pos = 10'b001010_0101;
    291                                                      end
    292                                                      8'b0100_0101: begin
    293             1                        106               encoded_data_neg = 10'b101001_0101;
    294             1                        106               encoded_data_pos = 10'b101001_0101;
    295                                                      end
    296                                                      8'b0100_0110: begin
    297             1                        109               encoded_data_neg = 10'b011001_0101;
    298             1                        109               encoded_data_pos = 10'b011001_0101;
    299                                                      end
    300                                                      8'b0100_0111: begin
    301             1                         93               encoded_data_neg = 10'b111000_0101;
    302             1                         93               encoded_data_pos = 10'b000111_0101;
    303                                                      end
    304                                                      8'b0100_1000: begin
    305             1                         89               encoded_data_neg = 10'b111001_0101;
    306             1                         89               encoded_data_pos = 10'b000110_0101;
    307                                                      end
    308                                                      8'b0100_1001: begin
    309             1                        118               encoded_data_neg = 10'b100101_0101;
    310             1                        118               encoded_data_pos = 10'b100101_0101;
    311                                                      end
    312                                                      8'b0100_1010: begin
    313             1                      11352               encoded_data_neg = 10'b010101_0101;
    314             1                      11352               encoded_data_pos = 10'b010101_0101;
    315                                                      end
    316                                                      8'b0100_1011: begin
    317             1                         96               encoded_data_neg = 10'b110100_0101;
    318             1                         96               encoded_data_pos = 10'b110100_0101;
    319                                                      end
    320                                                      8'b0100_1100: begin
    321             1                         92               encoded_data_neg = 10'b001101_0101;
    322             1                         92               encoded_data_pos = 10'b001101_0101;
    323                                                      end
    324                                                      8'b0100_1101: begin
    325             1                         94               encoded_data_neg = 10'b101100_0101;
    326             1                         94               encoded_data_pos = 10'b101100_0101;
    327                                                      end
    328                                                      8'b0100_1110: begin
    329             1                         95               encoded_data_neg = 10'b011100_0101;
    330             1                         95               encoded_data_pos = 10'b011100_0101;
    331                                                      end
    332                                                      8'b0100_1111: begin
    333             1                        104               encoded_data_neg = 10'b010111_0101;
    334             1                        104               encoded_data_pos = 10'b101000_0101;
    335                                                      end
    336                                                      8'b0101_0000: begin
    337             1                         89               encoded_data_neg = 10'b011011_0101;
    338             1                         89               encoded_data_pos = 10'b100100_0101;
    339                                                      end
    340                                                      8'b0101_0001: begin
    341             1                        111               encoded_data_neg = 10'b100011_0101;
    342             1                        111               encoded_data_pos = 10'b100011_0101;
    343                                                      end
    344                                                      8'b0101_0010: begin
    345             1                         91               encoded_data_neg = 10'b010011_0101;
    346             1                         91               encoded_data_pos = 10'b010011_0101;
    347                                                      end
    348                                                      8'b0101_0011: begin
    349             1                        104               encoded_data_neg = 10'b110010_0101;
    350             1                        104               encoded_data_pos = 10'b110010_0101;
    351                                                      end
    352                                                      8'b0101_0100: begin
    353             1                        101               encoded_data_neg = 10'b001011_0101;
    354             1                        101               encoded_data_pos = 10'b001011_0101;
    355                                                      end
    356                                                      8'b0101_0101: begin
    357             1                         94               encoded_data_neg = 10'b101010_0101;
    358             1                         94               encoded_data_pos = 10'b101010_0101;
    359                                                      end
    360                                                      8'b0101_0110: begin
    361             1                        107               encoded_data_neg = 10'b011010_0101;
    362             1                        107               encoded_data_pos = 10'b011010_0101;
    363                                                      end
    364                                                      8'b0101_0111: begin
    365             1                        101               encoded_data_neg = 10'b111010_0101;
    366             1                        101               encoded_data_pos = 10'b000101_0101;
    367                                                      end
    368                                                      8'b0101_1000: begin
    369             1                        114               encoded_data_neg = 10'b110011_0101;
    370             1                        114               encoded_data_pos = 10'b001100_0101;
    371                                                      end
    372                                                      8'b0101_1001: begin
    373             1                        105               encoded_data_neg = 10'b100110_0101;
    374             1                        105               encoded_data_pos = 10'b100110_0101;
    375                                                      end
    376                                                      8'b0101_1010: begin
    377             1                        101               encoded_data_neg = 10'b010110_0101;
    378             1                        101               encoded_data_pos = 10'b010110_0101;
    379                                                      end
    380                                                      8'b0101_1011: begin
    381             1                         89               encoded_data_neg = 10'b110110_0101;
    382             1                         89               encoded_data_pos = 10'b001001_0101;
    383                                                      end
    384                                                      8'b0101_1100: begin
    385             1                        102               encoded_data_neg = 10'b001110_0101;
    386             1                        102               encoded_data_pos = 10'b001110_0101;
    387                                                      end
    388                                                      8'b0101_1101: begin
    389             1                         92               encoded_data_neg = 10'b101110_0101;
    390             1                         92               encoded_data_pos = 10'b010001_0101;
    391                                                      end
    392                                                      8'b0101_1110: begin
    393             1                         90               encoded_data_neg = 10'b011110_0101;
    394             1                         90               encoded_data_pos = 10'b100001_0101;
    395                                                      end
    396                                                      8'b0101_1111: begin
    397             1                         93               encoded_data_neg = 10'b101011_0101;
    398             1                         93               encoded_data_pos = 10'b010100_0101;
    399                                                      end
    400                                                      //////////// D0.3 --> D31.3
    401                                                      ////////////////////////
    402                                                      ////////////////////////
    403                                                      8'b0110_0000: begin
    404             1                        102               encoded_data_neg = 10'b100111_0011;
    405             1                        102               encoded_data_pos = 10'b011000_1100;
    406                                                      end
    407                                                      8'b0110_0001: begin
    408             1                        104               encoded_data_neg = 10'b011101_0011;
    409             1                        104               encoded_data_pos = 10'b100010_1100;
    410                                                      end
    411                                                      8'b0110_0010: begin
    412             1                        115               encoded_data_neg = 10'b101101_0011;
    413             1                        115               encoded_data_pos = 10'b010010_1100;
    414                                                      end
    415                                                      8'b0110_0011: begin
    416             1                        122               encoded_data_neg = 10'b110001_1100;
    417             1                        122               encoded_data_pos = 10'b110001_0011;
    418                                                      end
    419                                                      8'b0110_0100: begin
    420             1                         95               encoded_data_neg = 10'b110101_0011;
    421             1                         95               encoded_data_pos = 10'b001010_1100;
    422                                                      end
    423                                                      8'b0110_0101: begin
    424             1                         98               encoded_data_neg = 10'b101001_1100;
    425             1                         98               encoded_data_pos = 10'b101001_0011;
    426                                                      end
    427                                                      8'b0110_0110: begin
    428             1                         89               encoded_data_neg = 10'b011001_1100;
    429             1                         89               encoded_data_pos = 10'b011001_0011;
    430                                                      end
    431                                                      8'b0110_0111: begin
    432             1                        108               encoded_data_neg = 10'b111000_1100;
    433             1                        108               encoded_data_pos = 10'b000111_0011;
    434                                                      end
    435                                                      8'b0110_1000: begin
    436             1                         86               encoded_data_neg = 10'b111001_0011;
    437             1                         86               encoded_data_pos = 10'b000110_1100;
    438                                                      end
    439                                                      8'b0110_1001: begin
    440             1                        115               encoded_data_neg = 10'b100101_1100;
    441             1                        115               encoded_data_pos = 10'b100101_0011;
    442                                                      end
    443                                                      8'b0110_1010: begin
    444             1                         90               encoded_data_neg = 10'b010101_1100;
    445             1                         90               encoded_data_pos = 10'b010101_0011;
    446                                                      end
    447                                                      8'b0110_1011: begin
    448             1                         92               encoded_data_neg = 10'b110100_1100;
    449             1                         92               encoded_data_pos = 10'b110100_0011;
    450                                                      end
    451                                                      8'b0110_1100: begin
    452             1                        114               encoded_data_neg = 10'b001101_1100;
    453             1                        114               encoded_data_pos = 10'b001101_0011;
    454                                                      end
    455                                                      8'b0110_1101: begin
    456             1                        114               encoded_data_neg = 10'b101100_1100;
    457             1                        114               encoded_data_pos = 10'b101100_0011;
    458                                                      end
    459                                                      8'b0110_1110: begin
    460             1                        113               encoded_data_neg = 10'b011100_1100;
    461             1                        113               encoded_data_pos = 10'b011100_0011;
    462                                                      end
    463                                                      8'b0110_1111: begin
    464             1                        100               encoded_data_neg = 10'b010111_0011;
    465             1                        100               encoded_data_pos = 10'b101000_1100;
    466                                                      end
    467                                                      8'b0111_0000: begin
    468             1                        118               encoded_data_neg = 10'b011011_0011;
    469             1                        118               encoded_data_pos = 10'b100100_1100;
    470                                                      end
    471                                                      8'b0111_0001: begin
    472             1                        109               encoded_data_neg = 10'b100011_1100;
    473             1                        109               encoded_data_pos = 10'b100011_0011;
    474                                                      end
    475                                                      8'b0111_0010: begin
    476             1                         92               encoded_data_neg = 10'b010011_1100;
    477             1                         92               encoded_data_pos = 10'b010011_0011;
    478                                                      end
    479                                                      8'b0111_0011: begin
    480             1                        112               encoded_data_neg = 10'b110010_1100;
    481             1                        112               encoded_data_pos = 10'b110010_0011;
    482                                                      end
    483                                                      8'b0111_0100: begin
    484             1                        107               encoded_data_neg = 10'b001011_1100;
    485             1                        107               encoded_data_pos = 10'b001011_0011;
    486                                                      end
    487                                                      8'b0111_0101: begin
    488             1                        101               encoded_data_neg = 10'b101010_1100;
    489             1                        101               encoded_data_pos = 10'b101010_0011;
    490                                                      end
    491                                                      8'b0111_0110: begin
    492             1                         97               encoded_data_neg = 10'b011010_1100;
    493             1                         97               encoded_data_pos = 10'b011010_0011;
    494                                                      end
    495                                                      8'b0111_0111: begin
    496             1                         93               encoded_data_neg = 10'b111010_0011;
    497             1                         93               encoded_data_pos = 10'b000101_1100;
    498                                                      end
    499                                                      8'b0111_1000: begin
    500             1                        102               encoded_data_neg = 10'b110011_0011;
    501             1                        102               encoded_data_pos = 10'b001100_1100;
    502                                                      end
    503                                                      8'b0111_1001: begin
    504             1                         96               encoded_data_neg = 10'b100110_1100;
    505             1                         96               encoded_data_pos = 10'b100110_0011;
    506                                                      end
    507                                                      8'b0111_1010: begin
    508             1                        111               encoded_data_neg = 10'b010110_1100;
    509             1                        111               encoded_data_pos = 10'b010110_0011;
    510                                                      end
    511                                                      8'b0111_1011: begin
    512             1                         98               encoded_data_neg = 10'b110110_0011;
    513             1                         98               encoded_data_pos = 10'b001001_1100;
    514                                                      end
    515                                                      8'b0111_1100: begin
    516             1                        117               encoded_data_neg = 10'b001110_1100;
    517             1                        117               encoded_data_pos = 10'b001110_0011;
    518                                                      end
    519                                                      8'b0111_1101: begin
    520             1                        106               encoded_data_neg = 10'b101110_0011;
    521             1                        106               encoded_data_pos = 10'b010001_1100;
    522                                                      end
    523                                                      8'b0111_1110: begin
    524             1                        110               encoded_data_neg = 10'b011110_0011;
    525             1                        110               encoded_data_pos = 10'b100001_1100;
    526                                                      end
    527                                                      8'b0111_1111: begin
    528             1                         97               encoded_data_neg = 10'b101011_0011;
    529             1                         97               encoded_data_pos = 10'b010100_1100;
    530                                                      end
    531                                                      ////////////////////  D0.4 --> D31.4
    532                                                      ///////////////
    533                                                      ///////////////
    534                                                      ///////////////
    535                                                      ///////////////
    536                                                      8'b1000_0000: begin
    537             1                         99               encoded_data_neg = 10'b100111_0010;
    538             1                         99               encoded_data_pos = 10'b011000_1101;
    539                                                      end
    540                                                      8'b1000_0001: begin
    541             1                         98               encoded_data_neg = 10'b011101_0010;
    542             1                         98               encoded_data_pos = 10'b100010_1101;
    543                                                      end
    544                                                      8'b1000_0010: begin
    545             1                         90               encoded_data_neg = 10'b101101_0010;
    546             1                         90               encoded_data_pos = 10'b010010_1101;
    547                                                      end
    548                                                      8'b1000_0011: begin
    549             1                        106               encoded_data_neg = 10'b110001_1101;
    550             1                        106               encoded_data_pos = 10'b110001_0010;
    551                                                      end
    552                                                      8'b1000_0100: begin
    553             1                        107               encoded_data_neg = 10'b110101_0010;
    554             1                        107               encoded_data_pos = 10'b001010_1101;
    555                                                      end
    556                                                      8'b1000_0101: begin
    557             1                        117               encoded_data_neg = 10'b101001_1101;
    558             1                        117               encoded_data_pos = 10'b101001_0010;
    559                                                      end
    560                                                      8'b1000_0110: begin
    561             1                        111               encoded_data_neg = 10'b011001_1101;
    562             1                        111               encoded_data_pos = 10'b011001_0010;
    563                                                      end
    564                                                      8'b1000_0111: begin
    565             1                        106               encoded_data_neg = 10'b111000_1101;
    566             1                        106               encoded_data_pos = 10'b000111_0010;
    567                                                      end
    568                                                      8'b1000_1000: begin
    569             1                        127               encoded_data_neg = 10'b111001_0010;
    570             1                        127               encoded_data_pos = 10'b000110_1101;
    571                                                      end
    572                                                      8'b1000_1001: begin
    573             1                        105               encoded_data_neg = 10'b100101_1101;
    574             1                        105               encoded_data_pos = 10'b100101_0010;
    575                                                      end
    576                                                      8'b1000_1010: begin
    577             1                        108               encoded_data_neg = 10'b010101_1101;
    578             1                        108               encoded_data_pos = 10'b010101_0010;
    579                                                      end  //()//
    580                                                      8'b1000_1011: begin
    581             1                        106               encoded_data_neg = 10'b110100_1101;
    582             1                        106               encoded_data_pos = 10'b110100_0010;
    583                                                      end
    584                                                      8'b1000_1100: begin
    585             1                        103               encoded_data_neg = 10'b001101_1101;
    586             1                        103               encoded_data_pos = 10'b001101_0010;
    587                                                      end
    588                                                      8'b1000_1101: begin
    589             1                        107               encoded_data_neg = 10'b101100_1101;
    590             1                        107               encoded_data_pos = 10'b101100_0010;
    591                                                      end
    592                                                      8'b1000_1110: begin
    593             1                         98               encoded_data_neg = 10'b011100_1101;
    594             1                         98               encoded_data_pos = 10'b011100_0010;
    595                                                      end
    596                                                      8'b1000_1111: begin
    597             1                         99               encoded_data_neg = 10'b010111_0010;
    598             1                         99               encoded_data_pos = 10'b101000_1101;
    599                                                      end
    600                                                      8'b1001_0000: begin
    601             1                        111               encoded_data_neg = 10'b011011_0010;
    602             1                        111               encoded_data_pos = 10'b100100_1101;
    603                                                      end
    604                                                      8'b1001_0001: begin
    605             1                         98               encoded_data_neg = 10'b100011_1101;
    606             1                         98               encoded_data_pos = 10'b100011_0010;
    607                                                      end
    608                                                      8'b1001_0010: begin
    609             1                        127               encoded_data_neg = 10'b010011_1101;
    610             1                        127               encoded_data_pos = 10'b010011_0010;
    611                                                      end
    612                                                      8'b1001_0011: begin
    613             1                         88               encoded_data_neg = 10'b110010_1101;
    614             1                         88               encoded_data_pos = 10'b110010_0010;
    615                                                      end
    616                                                      8'b1001_0100: begin
    617             1                        106               encoded_data_neg = 10'b001011_1101;
    618             1                        106               encoded_data_pos = 10'b001011_0010;
    619                                                      end
    620                                                      8'b1001_0101: begin
    621             1                         88               encoded_data_neg = 10'b101010_1101;
    622             1                         88               encoded_data_pos = 10'b101010_0010;
    623                                                      end
    624                                                      8'b1001_0110: begin
    625             1                        114               encoded_data_neg = 10'b011010_1101;
    626             1                        114               encoded_data_pos = 10'b011010_0010;
    627                                                      end
    628                                                      8'b1001_0111: begin
    629             1                         87               encoded_data_neg = 10'b111010_0010;
    630             1                         87               encoded_data_pos = 10'b000101_1101;
    631                                                      end
    632                                                      8'b1001_1000: begin
    633             1                        111               encoded_data_neg = 10'b110011_0010;
    634             1                        111               encoded_data_pos = 10'b001100_1101;
    635                                                      end
    636                                                      8'b1001_1001: begin
    637             1                        107               encoded_data_neg = 10'b100110_1101;
    638             1                        107               encoded_data_pos = 10'b100110_0010;
    639                                                      end
    640                                                      8'b1001_1010: begin
    641             1                         87               encoded_data_neg = 10'b010110_1101;
    642             1                         87               encoded_data_pos = 10'b010110_0010;
    643                                                      end
    644                                                      8'b1001_1011: begin
    645             1                         90               encoded_data_neg = 10'b110110_0010;
    646             1                         90               encoded_data_pos = 10'b001001_1101;
    647                                                      end
    648                                                      8'b1001_1100: begin
    649             1                        120               encoded_data_neg = 10'b001110_1101;
    650             1                        120               encoded_data_pos = 10'b001110_0010;
    651                                                      end
    652                                                      8'b1001_1101: begin
    653             1                         74               encoded_data_neg = 10'b101110_0010;
    654             1                         74               encoded_data_pos = 10'b010001_1101;
    655                                                      end
    656                                                      8'b1001_1110: begin
    657             1                        106               encoded_data_neg = 10'b011110_0010;
    658             1                        106               encoded_data_pos = 10'b100001_1101;
    659                                                      end
    660                                                      8'b1001_1111: begin
    661             1                        120               encoded_data_neg = 10'b101011_0010;
    662             1                        120               encoded_data_pos = 10'b010100_1101;
    663                                                      end
    664                                                      //////////// D0.5 --> D31.5
    665                                                      8'b1010_0000: begin
    666             1                        111               encoded_data_neg = 10'b100111_1010;
    667             1                        111               encoded_data_pos = 10'b011000_1010;
    668                                                      end
    669                                                      8'b1010_0001: begin
    670             1                         98               encoded_data_neg = 10'b011101_1010;
    671             1                         98               encoded_data_pos = 10'b100010_1010;
    672                                                      end
    673                                                      8'b1010_0010: begin
    674             1                         94               encoded_data_neg = 10'b101101_1010;
    675             1                         94               encoded_data_pos = 10'b010010_1010;
    676                                                      end
    677                                                      8'b1010_0011: begin
    678             1                        101               encoded_data_neg = 10'b110001_1010;
    679             1                        101               encoded_data_pos = 10'b110001_1010;
    680                                                      end
    681                                                      8'b1010_0100: begin
    682             1                        101               encoded_data_neg = 10'b110101_1010;
    683             1                        101               encoded_data_pos = 10'b001010_1010;
    684                                                      end
    685                                                      8'b1010_0101: begin
    686             1                         97               encoded_data_neg = 10'b101001_1010;
    687             1                         97               encoded_data_pos = 10'b101001_1010;
    688                                                      end
    689                                                      8'b1010_0110: begin
    690             1                         99               encoded_data_neg = 10'b011001_1010;
    691             1                         99               encoded_data_pos = 10'b011001_1010;
    692                                                      end
    693                                                      8'b1010_0111: begin
    694             1                         87               encoded_data_neg = 10'b111000_1010;
    695             1                         87               encoded_data_pos = 10'b000111_1010;
    696                                                      end
    697                                                      8'b1010_1000: begin
    698             1                         97               encoded_data_neg = 10'b111001_1010;
    699             1                         97               encoded_data_pos = 10'b000110_1010;
    700                                                      end
    701                                                      8'b1010_1001: begin
    702             1                        100               encoded_data_neg = 10'b100101_1010;
    703             1                        100               encoded_data_pos = 10'b100101_1010;
    704                                                      end
    705                                                      8'b1010_1010: begin
    706             1                         89               encoded_data_neg = 10'b010101_1010;
    707             1                         89               encoded_data_pos = 10'b010101_1010;
    708                                                      end
    709                                                      8'b1010_1011: begin
    710             1                        103               encoded_data_neg = 10'b110100_1010;
    711             1                        103               encoded_data_pos = 10'b110100_1010;
    712                                                      end
    713                                                      8'b1010_1100: begin
    714             1                        101               encoded_data_neg = 10'b001101_1010;
    715             1                        101               encoded_data_pos = 10'b001101_1010;
    716                                                      end
    717                                                      8'b1010_1101: begin
    718             1                        112               encoded_data_neg = 10'b101100_1010;
    719             1                        112               encoded_data_pos = 10'b101100_1010;
    720                                                      end
    721                                                      8'b1010_1110: begin
    722             1                        102               encoded_data_neg = 10'b011100_1010;
    723             1                        102               encoded_data_pos = 10'b011100_1010;
    724                                                      end
    725                                                      8'b1010_1111: begin
    726             1                        106               encoded_data_neg = 10'b010111_1010;
    727             1                        106               encoded_data_pos = 10'b101000_1010;
    728                                                      end
    729                                                      8'b1011_0000: begin
    730             1                         85               encoded_data_neg = 10'b011011_1010;
    731             1                         85               encoded_data_pos = 10'b100100_1010;
    732                                                      end
    733                                                      8'b1011_0001: begin
    734             1                        100               encoded_data_neg = 10'b100011_1010;
    735             1                        100               encoded_data_pos = 10'b100011_1010;
    736                                                      end
    737                                                      8'b1011_0010: begin
    738             1                        100               encoded_data_neg = 10'b010011_1010;
    739             1                        100               encoded_data_pos = 10'b010011_1010;
    740                                                      end
    741                                                      8'b1011_0011: begin
    742             1                        109               encoded_data_neg = 10'b110010_1010;
    743             1                        109               encoded_data_pos = 10'b110010_1010;
    744                                                      end
    745                                                      8'b1011_0100: begin
    746             1                         96               encoded_data_neg = 10'b001011_1010;
    747             1                         96               encoded_data_pos = 10'b001011_1010;
    748                                                      end
    749                                                      8'b1011_0101: begin
    750             1                         98               encoded_data_neg = 10'b101010_1010;
    751             1                         98               encoded_data_pos = 10'b101010_1010;
    752                                                      end
    753                                                      8'b1011_0110: begin
    754             1                        106               encoded_data_neg = 10'b011010_1010;
    755             1                        106               encoded_data_pos = 10'b011010_1010;
    756                                                      end
    757                                                      8'b1011_0111: begin
    758             1                         97               encoded_data_neg = 10'b111010_1010;
    759             1                         97               encoded_data_pos = 10'b000101_1010;
    760                                                      end
    761                                                      8'b1011_1000: begin
    762             1                         97               encoded_data_neg = 10'b110011_1010;
    763             1                         97               encoded_data_pos = 10'b001100_1010;
    764                                                      end
    765                                                      8'b1011_1001: begin
    766             1                        118               encoded_data_neg = 10'b100110_1010;
    767             1                        118               encoded_data_pos = 10'b100110_1010;
    768                                                      end
    769                                                      8'b1011_1010: begin
    770             1                        112               encoded_data_neg = 10'b010110_1010;
    771             1                        112               encoded_data_pos = 10'b010110_1010;
    772                                                      end
    773                                                      8'b1011_1011: begin
    774             1                        118               encoded_data_neg = 10'b110110_1010;
    775             1                        118               encoded_data_pos = 10'b001001_1010;
    776                                                      end
    777                                                      8'b1011_1100: begin
    778             1                         96               encoded_data_neg = 10'b001110_1010;
    779             1                         96               encoded_data_pos = 10'b001110_1010;
    780                                                      end
    781                                                      8'b1011_1101: begin
    782             1                        104               encoded_data_neg = 10'b101110_1010;
    783             1                        104               encoded_data_pos = 10'b010001_1010;
    784                                                      end
    785                                                      8'b1011_1110: begin
    786             1                        109               encoded_data_neg = 10'b011110_1010;
    787             1                        109               encoded_data_pos = 10'b100001_1010;
    788                                                      end
    789                                                      8'b1011_1111: begin
    790             1                        110               encoded_data_neg = 10'b101011_1010;
    791             1                        110               encoded_data_pos = 10'b010100_1010;
    792                                                      end
    793                                                      ///////////// D0.6 --> D31.6
    794                                                      ////////////////////////////
    795                                                      8'b1100_0000: begin
    796             1                         94               encoded_data_neg = 10'b100111_0110;
    797             1                         94               encoded_data_pos = 10'b011000_0110;
    798                                                      end
    799                                                      8'b1100_0001: begin
    800             1                        124               encoded_data_neg = 10'b011101_0110;
    801             1                        124               encoded_data_pos = 10'b100010_0110;
    802                                                      end
    803                                                      8'b1100_0010: begin
    804             1                         88               encoded_data_neg = 10'b101101_0110;
    805             1                         88               encoded_data_pos = 10'b010010_0110;
    806                                                      end
    807                                                      8'b1100_0011: begin
    808             1                         93               encoded_data_neg = 10'b110001_0110;
    809             1                         93               encoded_data_pos = 10'b110001_0110;
    810                                                      end
    811                                                      8'b1100_0100: begin
    812             1                         92               encoded_data_neg = 10'b110101_0110;
    813             1                         92               encoded_data_pos = 10'b001010_0110;
    814                                                      end
    815                                                      8'b1100_0101: begin
    816             1                         87               encoded_data_neg = 10'b101001_0110;
    817             1                         87               encoded_data_pos = 10'b101001_0110;
    818                                                      end
    819                                                      8'b1100_0110: begin
    820             1                        108               encoded_data_neg = 10'b011001_0110;
    821             1                        108               encoded_data_pos = 10'b011001_0110;
    822                                                      end
    823                                                      8'b1100_0111: begin
    824             1                        120               encoded_data_neg = 10'b111000_0110;
    825             1                        120               encoded_data_pos = 10'b000111_0110;
    826                                                      end
    827                                                      8'b1100_1000: begin
    828             1                         96               encoded_data_neg = 10'b111001_0110;
    829             1                         96               encoded_data_pos = 10'b000110_0110;
    830                                                      end
    831                                                      8'b1100_1001: begin
    832             1                        103               encoded_data_neg = 10'b100101_0110;
    833             1                        103               encoded_data_pos = 10'b100101_0110;
    834                                                      end
    835                                                      8'b1100_1010: begin
    836             1                        100               encoded_data_neg = 10'b010101_0110;
    837             1                        100               encoded_data_pos = 10'b010101_0110;
    838                                                      end
    839                                                      8'b1100_1011: begin
    840             1                         98               encoded_data_neg = 10'b110100_0110;
    841             1                         98               encoded_data_pos = 10'b110100_0110;
    842                                                      end
    843                                                      8'b1100_1100: begin
    844             1                         86               encoded_data_neg = 10'b001101_0110;
    845             1                         86               encoded_data_pos = 10'b001101_0110;
    846                                                      end
    847                                                      8'b1100_1101: begin
    848             1                        109               encoded_data_neg = 10'b101100_0110;
    849             1                        109               encoded_data_pos = 10'b101100_0110;
    850                                                      end
    851                                                      8'b1100_1110: begin
    852             1                         96               encoded_data_neg = 10'b011100_0110;
    853             1                         96               encoded_data_pos = 10'b011100_0110;
    854                                                      end
    855                                                      8'b1100_1111: begin
    856             1                        101               encoded_data_neg = 10'b010111_0110;
    857             1                        101               encoded_data_pos = 10'b101000_0110;
    858                                                      end
    859                                                      8'b1101_0000: begin
    860             1                        102               encoded_data_neg = 10'b011011_0110;
    861             1                        102               encoded_data_pos = 10'b100100_0110;
    862                                                      end
    863                                                      8'b1101_0001: begin
    864             1                         99               encoded_data_neg = 10'b100011_0110;
    865             1                         99               encoded_data_pos = 10'b100011_0110;
    866                                                      end
    867                                                      8'b1101_0010: begin
    868             1                        112               encoded_data_neg = 10'b010011_0110;
    869             1                        112               encoded_data_pos = 10'b010011_0110;
    870                                                      end
    871                                                      8'b1101_0011: begin
    872             1                        110               encoded_data_neg = 10'b110010_0110;
    873             1                        110               encoded_data_pos = 10'b110010_0110;
    874                                                      end
    875                                                      8'b1101_0100: begin
    876             1                        103               encoded_data_neg = 10'b001011_0110;
    877             1                        103               encoded_data_pos = 10'b001011_0110;
    878                                                      end
    879                                                      8'b1101_0101: begin
    880             1                         92               encoded_data_neg = 10'b101010_0110;
    881             1                         92               encoded_data_pos = 10'b101010_0110;
    882                                                      end
    883                                                      8'b1101_0110: begin
    884             1                        113               encoded_data_neg = 10'b011010_0110;
    885             1                        113               encoded_data_pos = 10'b011010_0110;
    886                                                      end
    887                                                      8'b1101_0111: begin
    888             1                        103               encoded_data_neg = 10'b111010_0110;
    889             1                        103               encoded_data_pos = 10'b000101_0110;
    890                                                      end
    891                                                      8'b1101_1000: begin
    892             1                         98               encoded_data_neg = 10'b110011_0110;
    893             1                         98               encoded_data_pos = 10'b001100_0110;
    894                                                      end
    895                                                      8'b1101_1001: begin
    896             1                        100               encoded_data_neg = 10'b100110_0110;
    897             1                        100               encoded_data_pos = 10'b100110_0110;
    898                                                      end
    899                                                      8'b1101_1010: begin
    900             1                        107               encoded_data_neg = 10'b010110_0110;
    901             1                        107               encoded_data_pos = 10'b010110_0110;
    902                                                      end
    903                                                      8'b1101_1011: begin
    904             1                        102               encoded_data_neg = 10'b110110_0110;
    905             1                        102               encoded_data_pos = 10'b001001_0110;
    906                                                      end
    907                                                      8'b1101_1100: begin
    908             1                        108               encoded_data_neg = 10'b001110_0110;
    909             1                        108               encoded_data_pos = 10'b001110_0110;
    910                                                      end
    911                                                      8'b1101_1101: begin
    912             1                         90               encoded_data_neg = 10'b101110_0110;
    913             1                         90               encoded_data_pos = 10'b010001_0110;
    914                                                      end
    915                                                      8'b1101_1110: begin
    916             1                        101               encoded_data_neg = 10'b011110_0110;
    917             1                        101               encoded_data_pos = 10'b100001_0110;
    918                                                      end
    919                                                      8'b1101_1111: begin
    920             1                        124               encoded_data_neg = 10'b101011_0110;
    921             1                        124               encoded_data_pos = 10'b010100_0110;
    922                                                      end
    923                                                      //////////// D0.7 --> D31.7
    924                                                      ////////////////////////
    925                                                      ////////////////////////
    926                                                      8'b1110_0000: begin
    927             1                        102               encoded_data_neg = 10'b100111_0001;
    928             1                        102               encoded_data_pos = 10'b011000_1110;
    929                                                      end
    930                                                      8'b1110_0001: begin
    931             1                        102               encoded_data_neg = 10'b011101_0001;
    932             1                        102               encoded_data_pos = 10'b100010_1110;
    933                                                      end
    934                                                      8'b1110_0010: begin
    935             1                         88               encoded_data_neg = 10'b101101_0001;
    936             1                         88               encoded_data_pos = 10'b010010_1110;
    937                                                      end
    938                                                      8'b1110_0011: begin
    939             1                        120               encoded_data_neg = 10'b110001_1110;
    940             1                        120               encoded_data_pos = 10'b110001_0001;
    941                                                      end
    942                                                      8'b1110_0100: begin
    943             1                         98               encoded_data_neg = 10'b110101_0001;
    944             1                         98               encoded_data_pos = 10'b001010_1110;
    945                                                      end
    946                                                      8'b1110_0101: begin
    947             1                         79               encoded_data_neg = 10'b101001_1110;
    948             1                         79               encoded_data_pos = 10'b101001_0001;
    949                                                      end
    950                                                      8'b1110_0110: begin
    951             1                        100               encoded_data_neg = 10'b011001_1110;
    952             1                        100               encoded_data_pos = 10'b011001_0001;
    953                                                      end
    954                                                      8'b1110_0111: begin
    955             1                        104               encoded_data_neg = 10'b111000_1110;
    956             1                        104               encoded_data_pos = 10'b000111_0001;
    957                                                      end
    958                                                      8'b1110_1000: begin
    959             1                        117               encoded_data_neg = 10'b111001_0001;
    960             1                        117               encoded_data_pos = 10'b000110_1110;
    961                                                      end
    962                                                      8'b1110_1001: begin
    963             1                         94               encoded_data_neg = 10'b100101_1110;
    964             1                         94               encoded_data_pos = 10'b100101_0001;
    965                                                      end
    966                                                      8'b1110_1010: begin
    967             1                         99               encoded_data_neg = 10'b010101_1110;
    968             1                         99               encoded_data_pos = 10'b010101_0001;
    969                                                      end
    970                                                      8'b1110_1011: begin
    971             1                        110               encoded_data_neg = 10'b110100_1110;
    972             1                        110               encoded_data_pos = 10'b110100_1000;
    973                                                      end
    974                                                      8'b1110_1100: begin
    975             1                        116               encoded_data_neg = 10'b001101_1110;
    976             1                        116               encoded_data_pos = 10'b001101_0001;
    977                                                      end
    978                                                      8'b1110_1101: begin
    979             1                        109               encoded_data_neg = 10'b101100_1110;
    980             1                        109               encoded_data_pos = 10'b101100_1000;
    981                                                      end
    982                                                      8'b1110_1110: begin
    983             1                        101               encoded_data_neg = 10'b011100_1110;
    984             1                        101               encoded_data_pos = 10'b011100_1000;
    985                                                      end
    986                                                      8'b1110_1111: begin
    987             1                         99               encoded_data_neg = 10'b010111_0001;
    988             1                         99               encoded_data_pos = 10'b101000_1110;
    989                                                      end
    990                                                      8'b1111_0000: begin
    991             1                         96               encoded_data_neg = 10'b011011_0001;
    992             1                         96               encoded_data_pos = 10'b100100_1110;
    993                                                      end
    994                                                      8'b1111_0001: begin
    995             1                        105               encoded_data_neg = 10'b100011_0111;
    996             1                        105               encoded_data_pos = 10'b100011_0001;
    997                                                      end
    998                                                      8'b1111_0010: begin
    999             1                         97               encoded_data_neg = 10'b010011_0111;
    1000            1                         97               encoded_data_pos = 10'b010011_0001;
    1001                                                     end
    1002                                                     8'b1111_0011: begin
    1003            1                         85               encoded_data_neg = 10'b110010_1110;
    1004            1                         85               encoded_data_pos = 10'b110010_0001;
    1005                                                     end
    1006                                                     8'b1111_0100: begin
    1007            1                         86               encoded_data_neg = 10'b001011_0111;
    1008            1                         86               encoded_data_pos = 10'b001011_0001;
    1009                                                     end
    1010                                                     8'b1111_0101: begin
    1011            1                        100               encoded_data_neg = 10'b101010_1110;
    1012            1                        100               encoded_data_pos = 10'b101010_0001;
    1013                                                     end
    1014                                                     8'b1111_0110: begin
    1015            1                        111               encoded_data_neg = 10'b011010_1110;
    1016            1                        111               encoded_data_pos = 10'b011010_0001;
    1017                                                     end
    1018                                                     8'b1111_0111: begin
    1019            1                         97               encoded_data_neg = 10'b111010_0001;
    1020            1                         97               encoded_data_pos = 10'b000101_1110;
    1021                                                     end
    1022                                                     8'b1111_1000: begin
    1023            1                         94               encoded_data_neg = 10'b110011_0001;
    1024            1                         94               encoded_data_pos = 10'b001100_1110;
    1025                                                     end
    1026                                                     8'b1111_1001: begin
    1027            1                         88               encoded_data_neg = 10'b100110_1110;
    1028            1                         88               encoded_data_pos = 10'b100110_0001;
    1029                                                     end
    1030                                                     8'b1111_1010: begin
    1031            1                        102               encoded_data_neg = 10'b010110_1110;
    1032            1                        102               encoded_data_pos = 10'b010110_0001;
    1033                                                     end
    1034                                                     8'b1111_1011: begin
    1035            1                        100               encoded_data_neg = 10'b110110_0001;
    1036            1                        100               encoded_data_pos = 10'b001001_1110;
    1037                                                     end
    1038                                                     8'b1111_1100: begin
    1039            1                        103               encoded_data_neg = 10'b001110_1110;
    1040            1                        103               encoded_data_pos = 10'b001110_0001;
    1041                                                     end
    1042                                                     8'b1111_1101: begin
    1043            1                        108               encoded_data_neg = 10'b101110_0001;
    1044            1                        108               encoded_data_pos = 10'b010001_1110;
    1045                                                     end
    1046                                                     8'b1111_1110: begin
    1047            1                         84               encoded_data_neg = 10'b011110_0001;
    1048            1                         84               encoded_data_pos = 10'b100001_1110;
    1049                                                     end
    1050                                                     8'b1111_1111: begin
    1051            1                         96               encoded_data_neg = 10'b101011_0001;
    1052            1                         96               encoded_data_pos = 10'b010100_1110;
    1053                                                     end
    1054                                                   endcase
    1055                                                 end else if (enable && TXDataK) begin // send command k28.0 --> k30.7
    1056                                                     case(data)
    1057                                                     8'b0001_1100: begin
    1058            1                    ***0***               encoded_data_neg = 10'b001111_0100;
    1059            1                    ***0***               encoded_data_pos = 10'b110000_1011;
    1060                                                     end
    1061                                                     8'b0011_1100: begin
    1062            1                    ***0***               encoded_data_neg = 10'b001111_1001;
    1063            1                    ***0***               encoded_data_pos = 10'b110000_0110;
    1064                                                     end
    1065                                                     8'b0101_1100: begin
    1066            1                    ***0***               encoded_data_neg = 10'b001111_0101;
    1067            1                    ***0***               encoded_data_pos = 10'b110000_1010;
    1068                                                     end
    1069                                                     8'b0111_1100: begin
    1070            1                    ***0***               encoded_data_neg = 10'b001111_0011;
    1071            1                    ***0***               encoded_data_pos = 10'b110000_1100;
    1072                                                     end
    1073                                                     8'b1001_1100: begin
    1074            1                    ***0***               encoded_data_neg = 10'b001111_0010;
    1075            1                    ***0***               encoded_data_pos = 10'b110000_1101;
    1076                                                     end
    1077                                                     8'b1011_1100: begin
    1078            1                      22500               encoded_data_neg = 10'b001111_1010;
    1079            1                      22500               encoded_data_pos = 10'b110000_0101;
    1080                                                     end
    1081                                                     8'b1101_1100: begin
    1082            1                    ***0***               encoded_data_neg = 10'b001111_0110;
    1083            1                    ***0***               encoded_data_pos = 10'b110000_1001;
    1084                                                     end
    1085                                                     8'b1111_1100: begin
    1086            1                    ***0***               encoded_data_neg = 10'b001111_1000;
    1087            1                    ***0***               encoded_data_pos = 10'b110000_0111;
    1088                                                     end
    1089                                                     8'b1111_0111: begin
    1090            1                    ***0***               encoded_data_neg = 10'b111010_1000;
    1091            1                    ***0***               encoded_data_pos = 10'b000101_0111;
    1092                                                     end
    1093                                                     8'b1111_1011: begin
    1094            1                    ***0***               encoded_data_neg = 10'b110110_1000;
    1095            1                    ***0***               encoded_data_pos = 10'b001001_0111;
    1096                                                     end
    1097                                                     8'b1111_1101: begin
    1098            1                    ***0***               encoded_data_neg = 10'b101110_1000;
    1099            1                    ***0***               encoded_data_pos = 10'b010001_0111;
    1100                                                     end
    1101                                                     8'b1111_1110: begin
    1102            1                    ***0***               encoded_data_neg = 10'b011110_1000;
    1103            1                    ***0***               encoded_data_pos = 10'b100001_0111;
    1104                                                     end
    1105                                                     endcase
    1106                                                 end else begin
    1107            1                         30           encoded_data_neg = 10'b100111_0100;
    1108            1                         30           encoded_data_pos = 10'b011000_1011;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        60         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/line_coding_8_10_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           TXDataK           5           5      100.00 
                                         data[0-7]           5           5      100.00 
                                            enable           5           5      100.00 
                             encoded_data_neg[0-9]           5           5      100.00 
                             encoded_data_pos[0-9]           5           5      100.00 

Total Node Count     =         30 
Toggled Node Count   =         30 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (60 of 60 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_TX_U/Encoding_U/FSM_RD_U
=== Design Unit: work.FSM_RD
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        13        10         3    76.92%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/FSM_RD_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File FSM_RD.v
------------------------------------IF Branch------------------------------------
    18                                    110000     Count coming in to IF
    18              1                         20     	if(!Rst) begin 
    27              1                       5000     	else if (!enable) begin
    37              1                     104980     	else 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    20                                        20     Count coming in to IF
    20              1                    ***0***     		if(pos_flag)
    22              1                         20     		else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    29                                      5000     Count coming in to IF
    29              1                       2500     		if(pos_flag)
    32              1                       2500     		else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    44                                    109990     Count coming in to CASE
    45              1                      54995     		RD_neg : next_state = RD_pos;
    46              1                      54995     		RD_pos : next_state = RD_neg;
    47              1                    ***0***     		default : next_state = RD_neg;
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------CASE Branch------------------------------------
    54                                    169896     Count coming in to CASE
    55              1                      73689     		RD_neg : begin 
    59              1                      96207     		RD_pos : begin 
    63              1                    ***0***     		default : Data_10 = data_neg;
Branch totals: 2 hits of 3 branches = 66.66%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      16        13         3    81.25%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/FSM_RD_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File FSM_RD.v
    1                                                module FSM_RD(
    2                                                	            input wire enable,
    3                                                				input wire TXDataK ,	            
    4                                                				input wire[9:0] data_neg,
    5                                                				input wire[9:0] data_pos,
    6                                                				input Bit_Rate_10,
    7                                                				input Rst,
    8                                                				output reg[9:0] Data_10
    9                                                				);
    10                                               
    11                                               localparam RD_neg = 1'b0,
    12                                               		   RD_pos = 1'b1;
    13                                               
    14                                               reg current_state , next_state , pos_flag;
    15                                               
    16              1                     110000     always @(posedge Bit_Rate_10 , negedge Rst) begin
    17                                               
    18                                               	if(!Rst) begin 
    19                                               
    20                                               		if(pos_flag)
    21              1                    ***0***     			current_state <= RD_pos; 
    22                                               		else 
    23              1                         20     			current_state <= RD_neg;
    24                                               	end 
    25                                               
    26                                               
    27                                               	else if (!enable) begin
    28                                               
    29                                               		if(pos_flag)
    30              1                       2500     			current_state <= RD_pos; 
    31                                               		
    32                                               		else 
    33              1                       2500     			current_state <= RD_neg;		
    34                                               		
    35                                               	end
    36                                               	
    37                                               	else 
    38              1                     104980     		current_state <= next_state;
    39                                               
    40                                               end
    41                                               
    42                                               
    43              1                     109990     always @(*) begin
    44                                               	case (current_state)
    45              1                      54995     		RD_neg : next_state = RD_pos;
    46              1                      54995     		RD_pos : next_state = RD_neg;
    47              1                    ***0***     		default : next_state = RD_neg;
    48                                               	endcase
    49                                               end
    50                                               
    51                                               
    52              1                     169896     always @(*) begin
    53                                               
    54                                               	case (current_state)
    55                                               		RD_neg : begin 
    56              1                      73689     			Data_10 = data_neg;
    57              1                      73689     			pos_flag = 1'b1;
    58                                               		end    
    59                                               		RD_pos : begin 
    60              1                      96207     			Data_10 = data_pos;
    61              1                      96207     			pos_flag = 1'b0;
    62                                               		end 
    63              1                    ***0***     		default : Data_10 = data_neg;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        74         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U/FSM_RD_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       Bit_Rate_10           5           5      100.00 
                                      Data_10[0-9]           5           5      100.00 
                                               Rst           5           5      100.00 
                                           TXDataK           5           5      100.00 
                                     current_state           5           5      100.00 
                                     data_neg[0-9]           5           5      100.00 
                                     data_pos[0-9]           5           5      100.00 
                                            enable           5           5      100.00 
                                        next_state           5           5      100.00 
                                          pos_flag           5           5      100.00 

Total Node Count     =         37 
Toggled Node Count   =         37 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (74 of 74 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_TX_U/Encoding_U
=== Design Unit: work.Encoding
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         84        84         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_TX_U/Encoding_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       Bit_Rate_10           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                               Rst           5           5      100.00 
                                           TXDataK           5           5      100.00 
                                         data[0-7]           5           5      100.00 
                                     data_out[0-9]           5           5      100.00 
                             encoded_neg_data[0-9]           5           5      100.00 
                             encoded_pos_data[0-9]           5           5      100.00 

Total Node Count     =         42 
Toggled Node Count   =         42 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (84 of 84 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_TX_U
=== Design Unit: work.PCS_TX
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        130       122         8    93.84%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_TX_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Bit_Rate_Clk_10           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                  Data_In_PMA[0-9]           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                 MAC_TX_Data[0-31]           5           5      100.00 
                                 MAC_TX_Datak[0-3]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                             RST_n           5           5      100.00 
                                           TXDataK           5           5      100.00 
                                       TxData[0-7]           5           5      100.00 

Total Node Count     =         65 
Toggled Node Count   =         60 
Untoggled Node Count =          5 

Toggle Coverage      =      93.84% (122 of 130 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U
=== Design Unit: work.Comma_Detection
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        46        42         4    91.30%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Comma_Detection.v
------------------------------------IF Branch------------------------------------
    22                                        30     Count coming in to IF
    22              1                         10       assign CP1 = (COMMA_NUMBER == 1) ? 6'd0 : (CP2 - 10);
    22              2                         20       assign CP1 = (COMMA_NUMBER == 1) ? 6'd0 : (CP2 - 10);
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    26                                    113785     Count coming in to IF
    26              1                         20         if (!rst_n) begin
    28              1                     113765         end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    34                                   1100381     Count coming in to CASE
    35              1                     302856           IDLE: begin
    43              1                     292760           COMMA: begin
    82              1                     504760           DATA: begin
    87              1                          5           default: ns = IDLE;
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    36                                    302856     Count coming in to IF
    36              1                      21217             if (Data_Collected == 10'h0FA || Data_Collected == 10'h305) begin
    40              1                     281639             end else ns = IDLE;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    37                                     21217     Count coming in to IF
    37              1                       6761               if (COMMA_NUMBER == 1) begin
    39              1                      14456               end else ns = COMMA;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    45                                    292760     Count coming in to CASE
    46              1                      14456               6'd9: begin
    54              1                       7410               6'd19: begin
    62              1                       7410               6'd29: begin
    70              1                     263484               default: ns = COMMA;
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    47                                     14456     Count coming in to IF
    47              1                          5                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    48              1                      14451                 else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    49                                     14451     Count coming in to IF
    49              1                       7041                   if (9 == CP1) ns = DATA;
    50              1                       7410                   else ns = COMMA;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                      7410     Count coming in to IF
    55              1                    ***0***                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    56              1                       7410                 else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    57                                      7410     Count coming in to IF
    57              1                    ***0***                   if (19 == CP1) ns = DATA;
    58              1                       7410                   else ns = COMMA;
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    63                                      7410     Count coming in to IF
    63              1                    ***0***                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    64              1                       7410                 else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    65                                      7410     Count coming in to IF
    65              1                       7410                   if (29 == CP1) ns = DATA;
    66              1                    ***0***                   else ns = COMMA;
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    83                                    504760     Count coming in to IF
    83              1                      21202             if (count == CP2) ns = IDLE;
    84              1                     483558             else ns = DATA;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    94                                   1100381     Count coming in to CASE
    95              1                     302856           IDLE: begin
    106             1                     292760           COMMA: begin
    116             1                     504760           DATA: begin
    144             1                          5           default: begin
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    100                                   302856     Count coming in to IF
    100             1                      21217             if (Data_Collected == 10'h0FA || Data_Collected == 10'h305) count_reset = 1'b1;
    101             1                     281639             else count_reset = 1'b0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    110                                   292760     Count coming in to IF
    110             1                      14451             if (count == CP1) count_reset = 1'b1;
    112             1                     278309             else count_reset = 1'b0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    119                                   504760     Count coming in to CASE
    120             1                      21207               6'd9: begin
    124             1                      14446               6'd19: begin
    128             1                       7410               6'd29: begin
    132             1                       7405               6'd39: begin
    136             1                     454292               default: begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------IF Branch------------------------------------
    154                                  1100371     Count coming in to IF
    154             1                         20         if (!rst_n) count <= 4'b0;
    155             1                      35668         else if (count_reset) count <= 4'b0;
    156             1                    1064683         else count <= count + 1'b1;
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      17        10         7    58.82%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U --

  File Comma_Detection.v
----------------Focused Condition View-------------------
Line       22 Item    1  (COMMA_NUMBER == 1)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (COMMA_NUMBER == 1)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          5  (COMMA_NUMBER == 1)_0  -                             
  Row   2:          5  (COMMA_NUMBER == 1)_1  -                             

----------------Focused Condition View-------------------
Line       36 Item    1  ((Data_Collected == 250) || (Data_Collected == 773))
Condition totals: 2 of 2 input terms covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Data_Collected == 250)         Y
  (Data_Collected == 773)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          5  (Data_Collected == 250)_0  ~(Data_Collected == 773)      
  Row   2:          5  (Data_Collected == 250)_1  -                             
  Row   3:          5  (Data_Collected == 773)_0  ~(Data_Collected == 250)      
  Row   4:          5  (Data_Collected == 773)_1  ~(Data_Collected == 250)      

----------------Focused Condition View-------------------
Line       37 Item    1  (COMMA_NUMBER == 1)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (COMMA_NUMBER == 1)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          5  (COMMA_NUMBER == 1)_0  -                             
  Row   2:          5  (COMMA_NUMBER == 1)_1  -                             

----------------Focused Condition View-------------------
Line       47 Item    1  ((Data_Collected != 250) && (Data_Collected != 773))
Condition totals: 1 of 2 input terms covered = 50.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Data_Collected != 250)         Y
  (Data_Collected != 773)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          5  (Data_Collected != 250)_0  -                             
  Row   2:          5  (Data_Collected != 250)_1  (Data_Collected != 773)       
  Row   3:    ***0***  (Data_Collected != 773)_0  (Data_Collected != 250)       
  Row   4:          5  (Data_Collected != 773)_1  (Data_Collected != 250)       

----------------Focused Condition View-------------------
Line       49 Item    1  (9 == CP1)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  (9 == CP1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (9 == CP1)_0          -                             
  Row   2:          5  (9 == CP1)_1          -                             

----------------Focused Condition View-------------------
Line       55 Item    1  ((Data_Collected != 250) && (Data_Collected != 773))
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Data_Collected != 250)         N  No hits                  Hit '_0' and '_1'
  (Data_Collected != 773)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (Data_Collected != 250)_0  -                             
  Row   2:    ***0***  (Data_Collected != 250)_1  (Data_Collected != 773)       
  Row   3:          5  (Data_Collected != 773)_0  (Data_Collected != 250)       
  Row   4:    ***0***  (Data_Collected != 773)_1  (Data_Collected != 250)       

----------------Focused Condition View-------------------
Line       57 Item    1  (19 == CP1)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (19 == CP1)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (19 == CP1)_0         -                             
  Row   2:    ***0***  (19 == CP1)_1         -                             

----------------Focused Condition View-------------------
Line       63 Item    1  ((Data_Collected != 250) && (Data_Collected != 773))
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Data_Collected != 250)         N  '_1' not hit             Hit '_1'
  (Data_Collected != 773)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          5  (Data_Collected != 250)_0  -                             
  Row   2:    ***0***  (Data_Collected != 250)_1  (Data_Collected != 773)       
  Row   3:    ***0***  (Data_Collected != 773)_0  (Data_Collected != 250)       
  Row   4:    ***0***  (Data_Collected != 773)_1  (Data_Collected != 250)       

----------------Focused Condition View-------------------
Line       65 Item    1  (29 == CP1)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (29 == CP1)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (29 == CP1)_0         -                             
  Row   2:          5  (29 == CP1)_1         -                             

----------------Focused Condition View-------------------
Line       83 Item    1  (count == CP2)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (count == CP2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (count == CP2)_0      -                             
  Row   2:          5  (count == CP2)_1      -                             

----------------Focused Condition View-------------------
Line       100 Item    1  ((Data_Collected == 250) || (Data_Collected == 773))
Condition totals: 2 of 2 input terms covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (Data_Collected == 250)         Y
  (Data_Collected == 773)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          5  (Data_Collected == 250)_0  ~(Data_Collected == 773)      
  Row   2:          5  (Data_Collected == 250)_1  -                             
  Row   3:          5  (Data_Collected == 773)_0  ~(Data_Collected == 250)      
  Row   4:          5  (Data_Collected == 773)_1  ~(Data_Collected == 250)      

----------------Focused Condition View-------------------
Line       110 Item    1  (count == CP1)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (count == CP1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (count == CP1)_0      -                             
  Row   2:          5  (count == CP1)_1      -                             


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       3         3         0   100.00%
    FSM Transitions                  5         5         0   100.00%

================================FSM Details================================

FSM Coverage for instance /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U --

FSM_ID: cs
    Current State Object : cs
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  35                IDLE                   0
  43               COMMA                   1
  82                DATA                   2
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE               42444          
                   COMMA               28912          
                    DATA               42424          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  39                   0               14456          IDLE -> COMMA                 
  38                   1                6761          IDLE -> DATA                  
  65                   2               14451          COMMA -> DATA                 
  63                   3                   5          COMMA -> IDLE                 
  83                   4               21212          DATA -> IDLE                  


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   3         3         0   100.00%
        FSM Transitions              5         5         0   100.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      50        46         4    92.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Comma_Detection.v
    1                                                module Comma_Detection (
    2                                                    input clk,
    3                                                    input rst_n,
    4                                                    input [9:0] Data_Collected,
    5                                                    input [2:0] COMMA_NUMBER,
    6                                                    output reg RxValid,
    7                                                    output reg Comma_Pulse
    8                                                
    9                                                );
    10                                               
    11                                                 reg [1:0] cs, ns;
    12                                                 wire [5:0] CP1, CP2;  /// ?????
    13                                                 reg [5:0] count;
    14                                                 reg count_reset;
    15                                                 //reg[2:0] symbol_count;
    16                                               
    17                                                 localparam IDLE = 2'b00, COMMA = 2'b01, DATA = 2'b10;
    18                                               
    19                                               
    20                                               
    21              1                         20       assign CP2 = ((COMMA_NUMBER - 1) * 10 + 9);
    22              1                         35       assign CP1 = (COMMA_NUMBER == 1) ? 6'd0 : (CP2 - 10);
    23                                               
    24                                               
    25              1                     113785       always @(posedge clk or negedge rst_n) begin
    26                                                   if (!rst_n) begin
    27              1                         20           cs <= IDLE;
    28                                                   end else begin
    29              1                     113765           cs <= ns;
    30                                                   end
    31                                                 end
    32                                               
    33              1                    1100381       always @(*) begin
    34                                                   case (cs)
    35                                                     IDLE: begin
    36                                                       if (Data_Collected == 10'h0FA || Data_Collected == 10'h305) begin
    37                                                         if (COMMA_NUMBER == 1) begin
    38              1                       6761                 ns = DATA;
    39              1                      14456               end else ns = COMMA;
    40              1                     281639             end else ns = IDLE;
    41                                                     end
    42                                               
    43                                                     COMMA: begin
    44                                               
    45                                                       case (count)
    46                                                         6'd9: begin
    47              1                          5                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    48                                                           else begin
    49              1                       7041                   if (9 == CP1) ns = DATA;
    50              1                       7410                   else ns = COMMA;
    51                                                           end
    52                                                         end
    53                                               
    54                                                         6'd19: begin
    55              1                    ***0***                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    56                                                           else begin
    57              1                    ***0***                   if (19 == CP1) ns = DATA;
    58              1                       7410                   else ns = COMMA;
    59                                                           end
    60                                                         end
    61                                               
    62                                                         6'd29: begin
    63              1                    ***0***                 if (Data_Collected != 10'h0FA && Data_Collected != 10'h305) ns = IDLE;
    64                                                           else begin
    65              1                       7410                   if (29 == CP1) ns = DATA;
    66              1                    ***0***                   else ns = COMMA;
    67                                                           end
    68                                                         end
    69                                               
    70              1                     263484               default: ns = COMMA;
    71                                                       endcase
    72                                               
    73                                                       // if(Data_Collected!=10'h0FA && Data_Collected!=10'h305)
    74                                                       //   ns = IDLE;
    75                                                       // else begin
    76                                                       //   if(count == CP1) ns = DATA;
    77                                                       //   else ns = COMMA;
    78                                                       // end      
    79                                                     end
    80                                               
    81                                               
    82                                                     DATA: begin
    83              1                      21202             if (count == CP2) ns = IDLE;
    84              1                     483558             else ns = DATA;
    85                                                     end
    86                                               
    87              1                          5           default: ns = IDLE;
    88                                                   endcase
    89                                                 end
    90                                               
    91                                               
    92                                               
    93              1                    1100381       always @(*) begin
    94                                                   case (cs)
    95                                                     IDLE: begin
    96              1                     302856             Comma_Pulse = 0;
    97              1                     302856             count_reset = 0;
    98              1                     302856             RxValid     = 0;
    99                                               
    100             1                      21217             if (Data_Collected == 10'h0FA || Data_Collected == 10'h305) count_reset = 1'b1;
    101             1                     281639             else count_reset = 1'b0;
    102                                              
    103                                                    end
    104                                              
    105                                              
    106                                                    COMMA: begin
    107             1                     292760             Comma_Pulse = 0;
    108             1                     292760             RxValid     = 0;
    109                                              
    110             1                      14451             if (count == CP1) count_reset = 1'b1;
    111                                              
    112             1                     278309             else count_reset = 1'b0;
    113                                                    end
    114                                              
    115                                              
    116                                                    DATA: begin
    117             1                     504760             count_reset = 0;
    118                                              
    119                                                      case (count)
    120                                                        6'd9: begin
    121             1                      21207                 Comma_Pulse = 1'b1;
    122             1                      21207                 RxValid = 1'b1;
    123                                                        end
    124                                                        6'd19: begin
    125             1                      14446                 Comma_Pulse = 1'b1;
    126             1                      14446                 RxValid = 1'b1;
    127                                                        end
    128                                                        6'd29: begin
    129             1                       7410                 Comma_Pulse = 1'b1;
    130             1                       7410                 RxValid = 1'b1;
    131                                                        end
    132                                                        6'd39: begin
    133             1                       7405                 Comma_Pulse = 1'b1;
    134             1                       7405                 RxValid = 1'b1;
    135                                                        end
    136                                                        default: begin
    137             1                     454292                 Comma_Pulse = 1'b0;
    138             1                     454292                 RxValid = 1'b0;
    139                                                        end
    140                                                      endcase
    141                                              
    142                                                    end
    143                                              
    144                                                    default: begin
    145             1                          5             Comma_Pulse = 1'b0;
    146             1                          5             count_reset = 1'b0;
    147             1                          5             RxValid = 1'b0;
    148                                                    end
    149                                                  endcase
    150                                                end
    151                                              
    152                                              
    153             1                    1100371       always @(posedge clk or negedge rst_n) begin
    154             1                         20         if (!rst_n) count <= 4'b0;
    155             1                      35668         else if (count_reset) count <= 4'b0;
    156             1                    1064683         else count <= count + 1'b1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         80        64        16    80.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/Comma_Detection_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   COMMA_NUMBER[0]           0           5       50.00 
                                   COMMA_NUMBER[1]           5           5      100.00 
                                   COMMA_NUMBER[2]           5           0       50.00 
                                            CP1[0]           5           0       50.00 
                                            CP1[1]           0           0        0.00 
                                          CP1[2-4]           5           0       50.00 
                                            CP1[5]           0           0        0.00 
                                            CP2[0]           0           0        0.00 
                                          CP2[1-2]           5           0       50.00 
                                            CP2[3]           0           5       50.00 
                                            CP2[4]           5           5      100.00 
                                            CP2[5]           5           0       50.00 
                                       Comma_Pulse           5           5      100.00 
                               Data_Collected[0-9]           5           5      100.00 
                                           RxValid           5           5      100.00 
                                               clk           5           5      100.00 
                                        count[0-5]           5           5      100.00 
                                       count_reset           5           5      100.00 
                                           cs[0-1]           5           5      100.00 
                                           ns[0-1]           5           5      100.00 
                                             rst_n           5           5      100.00 

Total Node Count     =         40 
Toggled Node Count   =         27 
Untoggled Node Count =         13 

Toggle Coverage      =      80.00% (64 of 80 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst/bin_gray_write
=== Design Unit: work.binToGray
=================================================================================
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst/bin_gray_write --

  File binToGray.v
-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=0) (binary[0] ^ binary[1])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[0]         Y
    binary[1]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[0]_0           -                                  
 Row   2:           0           5  binary[0]_1           -                                  
 Row   3:           5           5  binary[1]_0           -                                  
 Row   4:           0           5  binary[1]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=1) (binary[1] ^ binary[2])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[1]         Y
    binary[2]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[1]_0           -                                  
 Row   2:           0           5  binary[1]_1           -                                  
 Row   3:           5           5  binary[2]_0           -                                  
 Row   4:           0           5  binary[2]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=2) (binary[2] ^ binary[3])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[2]         Y
    binary[3]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[2]_0           -                                  
 Row   2:           0           5  binary[2]_1           -                                  
 Row   3:           5           5  binary[3]_0           -                                  
 Row   4:           0           5  binary[3]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=3) (binary[3] ^ binary[4])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[3]         Y
    binary[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[3]_0           -                                  
 Row   2:           0           5  binary[3]_1           -                                  
 Row   3:           5           5  binary[4]_0           -                                  
 Row   4:           0           5  binary[4]_1           -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst/bin_gray_write --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File binToGray.v
    1                                                module binToGray (
    2                                                    binary,
    3                                                    gray
    4                                                );
    5                                                  parameter COUNTER_WIDTH = 4;
    6                                                  input [COUNTER_WIDTH-1:0] binary;
    7                                                  output reg [COUNTER_WIDTH-1:0] gray;
    8                                                
    9                                                  genvar i;
    10                                                 generate
    11                                                   for (i = 0; i < COUNTER_WIDTH; i = i + 1) begin
    12                                                     // assign gray[i] = binary[i] ^ binary[i+1];
    13       1 (GI=0)                      50482           always @(*) begin
    13       1 (GI=1)                      25243     
    13       1 (GI=2)                      12620     
    13       1 (GI=3)                       6308     
    13       1 (GI=4)                       3155     
    14       1 (GI=0)                      50482             if (i != COUNTER_WIDTH - 1) gray[i] = binary[i] ^ binary[i+1];
    14       1 (GI=1)                      25243     
    14       1 (GI=2)                      12620     
    14       1 (GI=3)                       6308     
    15       1 (GI=4)                       3155             else gray[i] = binary[i];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst/bin_gray_write --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       binary[0-4]           5           5      100.00 
                                         gray[0-4]           5           5      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst
=== Design Unit: work.write_pointer_control
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         6         2    75.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File write_pointer_control_unit.v
------------------------------------IF Branch------------------------------------
    48                                     50483     Count coming in to IF
    48              1                         15        if (!rst_n) begin
    54              1                      50468          else if (!full_val) begin  //check not skp
                                         ***0***     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    55                                     50468     Count coming in to IF
    55              1                      50467           if (!(data_in == 10'b001111_1001 || data_in == 10'b110000_0110)) begin
    59              1                          1           end else if (!delete_req) begin
    63              1                    ***0***           end else begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    80                                        37     Count coming in to IF
    80              1                         22         if (!rst_n) overflow = 1'b0;
    81              1                         15         else overflow = full_val;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         1         1    50.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst --

  File write_pointer_control_unit.v
----------------Focused Condition View-------------------
Line       55 Item    1  ((data_in == 249) ~| (data_in == 774))
Condition totals: 1 of 2 input terms covered = 50.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (data_in == 249)         Y
  (data_in == 774)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (data_in == 249)_0    ~(data_in == 774)             
  Row   2:          1  (data_in == 249)_1    ~(data_in == 774)             
  Row   3:          5  (data_in == 774)_0    ~(data_in == 249)             
  Row   4:    ***0***  (data_in == 774)_1    ~(data_in == 249)             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      3         3         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst --

  File write_pointer_control_unit.v
----------------Focused Expression View-----------------
Line       71 Item    1  (((gray_read_pointer[4] != gray_write_pointer[4]) && (gray_read_pointer[3] != gray_write_pointer[3])) && (gray_read_pointer[2:0] == gray_write_pointer[2:0]))
Expression totals: 3 of 3 input terms covered = 100.00%

                                           Input Term   Covered  Reason for no coverage   Hint
                                          -----------  --------  -----------------------  --------------
      (gray_read_pointer[4] != gray_write_pointer[4])         Y
      (gray_read_pointer[3] != gray_write_pointer[3])         Y
  (gray_read_pointer[2:0] == gray_write_pointer[2:0])         Y

     Rows:       Hits  FEC Target                                             Non-masking condition(s)      
 ---------  ---------  --------------------                                   -------------------------     
  Row   1:          5  (gray_read_pointer[4] != gray_write_pointer[4])_0      -                             
  Row   2:          1  (gray_read_pointer[4] != gray_write_pointer[4])_1      ((gray_read_pointer[2:0] == gray_write_pointer[2:0]) && (gray_read_pointer[3] != gray_write_pointer[3]))
  Row   3:          5  (gray_read_pointer[3] != gray_write_pointer[3])_0      (gray_read_pointer[4] != gray_write_pointer[4])
  Row   4:          1  (gray_read_pointer[3] != gray_write_pointer[3])_1      ((gray_read_pointer[2:0] == gray_write_pointer[2:0]) && (gray_read_pointer[4] != gray_write_pointer[4]))
  Row   5:          5  (gray_read_pointer[2:0] == gray_write_pointer[2:0])_0  ((gray_read_pointer[4] != gray_write_pointer[4]) && (gray_read_pointer[3] != gray_write_pointer[3]))
  Row   6:          1  (gray_read_pointer[2:0] == gray_write_pointer[2:0])_1  ((gray_read_pointer[4] != gray_write_pointer[4]) && (gray_read_pointer[3] != gray_write_pointer[3]))


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      17        14         3    82.35%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File write_pointer_control_unit.v
    1                                                module write_pointer_control (
    2                                                    write_clk,
    3                                                    data_in,
    4                                                    gray_read_pointer,
    5                                                  //  buffer_mode,
    6                                                    rst_n,
    7                                                    // write_enable,
    8                                                    delete_req,
    9                                                    ////outputs/////
    10                                                   Skp_Added,
    11                                                   overflow,
    12                                                   Skp_Removed,
    13                                                   write_address,
    14                                                   gray_write_pointer
    15                                                   // loopback_tx,
    16                                               
    17                                               );
    18                                               
    19                                                 parameter DATA_WIDTH = 10;
    20                                                 parameter BUFFER_DEPTH = 16;
    21                                               
    22                                                 localparam max_buffer_addr = $clog2(BUFFER_DEPTH);
    23                                               
    24                                               
    25                                                 input [DATA_WIDTH-1:0] data_in;
    26                                                 input write_clk;
    27                                                 input delete_req;
    28                                                 input rst_n;
    29                                                 input [max_buffer_addr:0] gray_read_pointer;
    30                                               
    31                                                 output reg overflow;
    32                                                 output reg Skp_Removed;
    33                                                 output reg Skp_Added;
    34                                                 //  pointers has additional bit to indicate if full or empty
    35                                                 output reg [max_buffer_addr:0] write_address;
    36                                                 output [max_buffer_addr:0] gray_write_pointer;
    37                                               
    38                                               
    39                                               
    40                                                 wire full_val;
    41                                               
    42                                                 binToGray #(max_buffer_addr + 1) bin_gray_write (
    43                                                     write_address,
    44                                                     gray_write_pointer
    45                                                 );
    46                                               
    47              1                      50483       always @(posedge write_clk or negedge rst_n) begin
    48                                                  if (!rst_n) begin
    49              1                         15           write_address <= 0;
    50              1                         15           Skp_Removed   <= 0;
    51              1                         15           Skp_Added     <= 0;
    52                                                   end
    53                                               
    54                                                    else if (!full_val) begin  //check not skp
    55                                                     if (!(data_in == 10'b001111_1001 || data_in == 10'b110000_0110)) begin
    56              1                      50467             write_address <= write_address + 1;
    57              1                      50467             Skp_Removed   <= 0;
    58              1                      50467             Skp_Added     <= 0;
    59                                                     end else if (!delete_req) begin
    60              1                          1             write_address <= write_address + 1;
    61              1                          1             Skp_Removed   <= 0;
    62              1                          1             Skp_Added     <=1 ;
    63                                                     end else begin
    64              1                    ***0***             Skp_Removed   <= 1;
    65              1                    ***0***             Skp_Added     <= 0;
    66              1                    ***0***             write_address <= write_address;
    67                                                     end
    68                                                   end
    69                                                 end
    70                                               
    71              1                     100821       assign full_val = ((gray_read_pointer[max_buffer_addr] !=gray_write_pointer[max_buffer_addr] ) &&
    72                                                 (gray_read_pointer[max_buffer_addr-1] !=gray_write_pointer[max_buffer_addr-1]) &&
    73                                                 (gray_read_pointer[max_buffer_addr-2:0]==gray_write_pointer[max_buffer_addr-2:0]));
    74                                               
    75                                                 // assign full_val = (gray_write_pointer=={~gray_read_pointer[max_buffer_addr:max_buffer_addr-1],
    76                                                 // gray_read_pointer[max_buffer_addr-2:0]});
    77                                               
    78                                               
    79              1                         37       always @(*) begin
    80              1                         22         if (!rst_n) overflow = 1'b0;
    81              1                         15         else overflow = full_val;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         64        58         6    90.62%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/write_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                         Skp_Added           1           1      100.00 
                                       Skp_Removed           0           0        0.00 
                                      data_in[0-9]           5           5      100.00 
                                        delete_req           5           5      100.00 
                                          full_val           0           0        0.00 
                            gray_read_pointer[0-4]           5           5      100.00 
                           gray_write_pointer[0-4]           5           5      100.00 
                                          overflow           0           0        0.00 
                                             rst_n           5           5      100.00 
                                write_address[0-4]           5           5      100.00 
                                         write_clk           5           5      100.00 

Total Node Count     =         32 
Toggled Node Count   =         29 
Untoggled Node Count =          3 

Toggle Coverage      =      90.62% (58 of 64 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst/bin_gray_read
=== Design Unit: work.binToGray
=================================================================================
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst/bin_gray_read --

  File binToGray.v
-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=0) (binary[0] ^ binary[1])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[0]         Y
    binary[1]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[0]_0           -                                  
 Row   2:           0           5  binary[0]_1           -                                  
 Row   3:           5           5  binary[1]_0           -                                  
 Row   4:           0           5  binary[1]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=1) (binary[1] ^ binary[2])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[1]         Y
    binary[2]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[1]_0           -                                  
 Row   2:           0           5  binary[1]_1           -                                  
 Row   3:           5           5  binary[2]_0           -                                  
 Row   4:           0           5  binary[2]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=2) (binary[2] ^ binary[3])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[2]         Y
    binary[3]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[2]_0           -                                  
 Row   2:           0           5  binary[2]_1           -                                  
 Row   3:           5           5  binary[3]_0           -                                  
 Row   4:           0           5  binary[3]_1           -                                  

-----------Focused Expression View (Bimodal)------------
Line       14 Item    1 (GI=3) (binary[3] ^ binary[4])
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
    binary[3]         Y
    binary[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  binary[3]_0           -                                  
 Row   2:           0           5  binary[3]_1           -                                  
 Row   3:           5           5  binary[4]_0           -                                  
 Row   4:           0           5  binary[4]_1           -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst/bin_gray_read --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File binToGray.v
    1                                                module binToGray (
    2                                                    binary,
    3                                                    gray
    4                                                );
    5                                                  parameter COUNTER_WIDTH = 4;
    6                                                  input [COUNTER_WIDTH-1:0] binary;
    7                                                  output reg [COUNTER_WIDTH-1:0] gray;
    8                                                
    9                                                  genvar i;
    10                                                 generate
    11                                                   for (i = 0; i < COUNTER_WIDTH; i = i + 1) begin
    12                                                     // assign gray[i] = binary[i] ^ binary[i+1];
    13       1 (GI=0)                      50353           always @(*) begin
    13       1 (GI=1)                      25183     
    13       1 (GI=2)                      12595     
    13       1 (GI=3)                       6302     
    13       1 (GI=4)                       3152     
    14       1 (GI=0)                      50353             if (i != COUNTER_WIDTH - 1) gray[i] = binary[i] ^ binary[i+1];
    14       1 (GI=1)                      25183     
    14       1 (GI=2)                      12595     
    14       1 (GI=3)                       6302     
    15       1 (GI=4)                       3152             else gray[i] = binary[i];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst/bin_gray_read --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       binary[0-4]           5           5      100.00 
                                         gray[0-4]           5           5      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst
=== Design Unit: work.read_pointer_control
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File read_pointer_control.v
------------------------------------IF Branch------------------------------------
    45                                     71517     Count coming in to IF
    45              1                         20         if (!rst_n) begin
    49              1                      21153         else if (empty || add_req) begin
    53              1                      50344         else  begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    62                                     71618     Count coming in to IF
    62              1                         20         if (!rst_n) empty <= 1'b1;
    63              1                      71598         else empty <= (gray_read_pointer == gray_write_pointer);
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst --

  File read_pointer_control.v
----------------Focused Condition View-------------------
Line       49 Item    1  (empty || add_req)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       empty         Y
     add_req         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  empty_0               ~add_req                      
  Row   2:          5  empty_1               -                             
  Row   3:          5  add_req_0             ~empty                        
  Row   4:          5  add_req_1             ~empty                        


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst --

  File read_pointer_control.v
----------------Focused Expression View-----------------
Line       59 Item    1  (gray_read_pointer == gray_write_pointer)
Expression totals: 1 of 1 input term covered = 100.00%

                                 Input Term   Covered  Reason for no coverage   Hint
                                -----------  --------  -----------------------  --------------
  (gray_read_pointer == gray_write_pointer)         Y

     Rows:       Hits  FEC Target                                   Non-masking condition(s)      
 ---------  ---------  --------------------                         -------------------------     
  Row   1:          5  (gray_read_pointer == gray_write_pointer)_0  -                             
  Row   2:          5  (gray_read_pointer == gray_write_pointer)_1  -                             

----------------Focused Expression View-----------------
Line       63 Item    1  (gray_read_pointer == gray_write_pointer)
Expression totals: 1 of 1 input term covered = 100.00%

                                 Input Term   Covered  Reason for no coverage   Hint
                                -----------  --------  -----------------------  --------------
  (gray_read_pointer == gray_write_pointer)         Y

     Rows:       Hits  FEC Target                                   Non-masking condition(s)      
 ---------  ---------  --------------------                         -------------------------     
  Row   1:          5  (gray_read_pointer == gray_write_pointer)_0  -                             
  Row   2:          5  (gray_read_pointer == gray_write_pointer)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       8         8         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File read_pointer_control.v
    1                                                module read_pointer_control (
    2                                                    // data_in,
    3                                                    read_clk,
    4                                                    gray_write_pointer,
    5                                                  //  buffer_mode,
    6                                                    rst_n,
    7                                                    data_out,
    8                                                    add_req,
    9                                                
    10                                                   ////outputs/////
    11                                                   empty,
    12                                                   read_address,
    13                                                   gray_read_pointer
    14                                                   // loopback_tx,
    15                                               );
    16                                               
    17                                                 parameter DATA_WIDTH = 10;
    18                                                 parameter BUFFER_DEPTH = 16;
    19                                               
    20                                                 localparam max_buffer_addr = $clog2(BUFFER_DEPTH);
    21                                               
    22                                                 // input [DATA_WIDTH-1:0] data_in;
    23                                                 input read_clk;
    24                                                 // input read_enable;
    25                                                 //  input buffer_mode;
    26                                                 input add_req;  //////////////
    27                                                 input rst_n;
    28                                                 input [max_buffer_addr:0] gray_write_pointer;
    29                                                 input [DATA_WIDTH-1:0] data_out;  ////////////
    30                                               
    31                                                 output reg empty;
    32                                                 output reg [max_buffer_addr:0] read_address;
    33                                                 output [max_buffer_addr:0] gray_read_pointer;
    34                                               
    35                                                 wire empty_val;
    36                                               
    37                                                 // //has pointers had additional bit to indicate if full or empty
    38                                               
    39                                                 binToGray #(max_buffer_addr + 1) bin_gray_read (
    40                                                     read_address,
    41                                                     gray_read_pointer
    42                                                 );
    43                                               
    44              1                      71517       always @(posedge read_clk or negedge rst_n) begin
    45                                                   if (!rst_n) begin
    46              1                         20           read_address <= 0;
    47                                                   end
    48                                               
    49                                                   else if (empty || add_req) begin
    50              1                      21153            read_address <= read_address;
    51                                                   end 
    52                                               
    53                                                   else  begin
    54              1                      50344             read_address <= read_address + 1;
    55                                                   end
    56                                                 end
    57                                               
    58                                               
    59              1                     100828       assign empty_val = (gray_read_pointer == gray_write_pointer);
    60                                               
    61              1                      71618       always @(posedge read_clk or negedge rst_n) begin
    62              1                         20         if (!rst_n) empty <= 1'b1;
    63              1                      71598         else empty <= (gray_read_pointer == gray_write_pointer);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        60         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/read_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           add_req           5           5      100.00 
                                     data_out[0-9]           5           5      100.00 
                                             empty           5           5      100.00 
                                         empty_val           5           5      100.00 
                            gray_read_pointer[0-4]           5           5      100.00 
                           gray_write_pointer[0-4]           5           5      100.00 
                                 read_address[0-4]           5           5      100.00 
                                          read_clk           5           5      100.00 
                                             rst_n           5           5      100.00 

Total Node Count     =         30 
Toggled Node Count   =         30 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (60 of 60 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/elastic_mem_inst
=== Design Unit: work.elastic_memory
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         3         1    75.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/elastic_mem_inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File memory.v
------------------------------------IF Branch------------------------------------
    30                                     86057     Count coming in to IF
    30              1                      35713       if(empty || add_req) begin
    34              1                      50344       else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    41                                     50468     Count coming in to IF
    41              1                      50468         if (!full) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         2         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/elastic_mem_inst --

  File memory.v
----------------Focused Condition View-------------------
Line       30 Item    1  (empty || add_req)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       empty         Y
     add_req         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  empty_0               ~add_req                      
  Row   2:          5  empty_1               -                             
  Row   3:          5  add_req_0             ~empty                        
  Row   4:          5  add_req_1             ~empty                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/elastic_mem_inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File memory.v
    1                                                module elastic_memory (
    2                                                    data_in,
    3                                                    write_clk,
    4                                                    read_clk,
    5                                                    read_pointer,
    6                                                    write_pointer,
    7                                                    data_out,
    8                                                    add_req,  
    9                                                    full,
    10                                                   empty
    11                                               );
    12                                                 parameter DATA_WIDTH = 10;
    13                                                 parameter BUFFER_DEPTH = 16;
    14                                               
    15                                                 localparam max_buffer_addr = $clog2(BUFFER_DEPTH);
    16                                               
    17                                                 input read_clk, write_clk;
    18                                                 input full, empty;
    19                                                 input [DATA_WIDTH-1:0] data_in;
    20                                                 input add_req; 
    21                                                 input [max_buffer_addr-1:0] read_pointer;
    22                                                 input [max_buffer_addr-1:0] write_pointer;
    23                                                 // input rd_en, wr_en;
    24                                                 output reg [DATA_WIDTH-1:0] data_out;
    25                                               
    26                                                 reg [DATA_WIDTH-1:0] buffer[0:BUFFER_DEPTH-1];
    27                                               
    28                                                 //reading
    29              1                      86057       always @(posedge read_clk) begin
    30                                                 if(empty || add_req) begin
    31              1                      35713          data_out = 10'h0f3;
    32                                                 end
    33                                               
    34                                                 else 
    35              1                      50344          data_out = buffer[read_pointer];
    36                                                 end
    37                                                
    38                                               
    39                                                 //writing
    40              1                      50468       always @(posedge write_clk) begin
    41                                                   if (!full) begin
    42              1                      50468           buffer[write_pointer] <= data_in;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         66        64         2    96.96%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/elastic_mem_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           add_req           5           5      100.00 
                                      data_in[0-9]           5           5      100.00 
                                     data_out[0-9]           5           5      100.00 
                                             empty           5           5      100.00 
                                              full           0           0        0.00 
                                          read_clk           5           5      100.00 
                                 read_pointer[0-3]           5           5      100.00 
                                         write_clk           5           5      100.00 
                                write_pointer[0-3]           5           5      100.00 

Total Node Count     =         33 
Toggled Node Count   =         32 
Untoggled Node Count =          1 

Toggle Coverage      =      96.96% (64 of 66 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/sync_unit_inst
=== Design Unit: work.synchronous_unit
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/sync_unit_inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File synchronous_unit.v
------------------------------------IF Branch------------------------------------
    22                                     50363     Count coming in to IF
    22              1                         15         if (!rst_n) begin
    25              1                      50348         end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    32                                     86161     Count coming in to IF
    32              1                         20         if (!rst_n) begin
    35              1                      86141         end else begin
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/sync_unit_inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File synchronous_unit.v
    1                                                module synchronous_unit (
    2                                                    rst_n,
    3                                                
    4                                                    read_to_write_clk,
    5                                                    gray_counter_read,
    6                                                    gray_counter_read_out,
    7                                                
    8                                                    write_to_read_clk,
    9                                                    gray_counter_write,
    10                                                   gray_counter_write_out
    11                                               );
    12                                                 parameter n = 4;
    13                                                 input rst_n;
    14                                                 input read_to_write_clk, write_to_read_clk;
    15                                                 input [n:0] gray_counter_read, gray_counter_write;
    16                                                 output reg [n:0] gray_counter_read_out, gray_counter_write_out;
    17                                               
    18                                                 reg [n:0] gray_counter_read_reg1;
    19                                                 reg [n:0] gray_counter_write_reg1;
    20                                               
    21              1                      50363       always @(posedge read_to_write_clk or negedge rst_n) begin
    22                                                   if (!rst_n) begin
    23              1                         15           gray_counter_read_reg1 <= 0;
    24              1                         15           gray_counter_read_out  <= 0;
    25                                                   end else begin
    26              1                      50348           gray_counter_read_reg1 <= gray_counter_read;
    27              1                      50348           gray_counter_read_out  <= gray_counter_read_reg1;
    28                                                   end
    29                                                 end
    30                                               
    31              1                      86161       always @(posedge write_to_read_clk or negedge rst_n) begin
    32                                                   if (!rst_n) begin
    33              1                         20           gray_counter_write_reg1 <= 0;
    34              1                         20           gray_counter_write_out  <= 0;
    35                                                   end else begin
    36              1                      86141           gray_counter_write_reg1 <= gray_counter_write;
    37              1                      86141           gray_counter_write_out  <= gray_counter_write_reg1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         66        66         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/sync_unit_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                            gray_counter_read[0-4]           5           5      100.00 
                        gray_counter_read_out[0-4]           5           5      100.00 
                       gray_counter_read_reg1[0-4]           5           5      100.00 
                           gray_counter_write[0-4]           5           5      100.00 
                       gray_counter_write_out[0-4]           5           5      100.00 
                      gray_counter_write_reg1[0-4]           5           5      100.00 
                                 read_to_write_clk           5           5      100.00 
                                             rst_n           5           5      100.00 
                                 write_to_read_clk           5           5      100.00 

Total Node Count     =         33 
Toggled Node Count   =         33 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (66 of 66 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_write
=== Design Unit: work.GrayToBinary
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_write --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File grayToBin.v
    1                                                module GrayToBinary #(
    2                                                    parameter WIDTH = 4
    3                                                ) (
    4                                                    input  [WIDTH-1:0] gray,
    5                                                    output [WIDTH-1:0] binary
    6                                                );
    7                                                  /*
    8                                                  assign binary[0] = gray[3] ^ gray[2] ^ gray[1] ^ gray[0];
    9                                                  assign binary[1] = gray[3] ^ gray[2] ^ gray[1];
    10                                                 assign binary[2] = gray[3] ^ gray[2];
    11                                                 assign binary[3] = gray[3];
    12                                                 */
    13                                                 // OR
    14                                                 genvar i;
    15                                                 generate
    16                                                   for (i = 0; i < WIDTH; i = i + 1) begin
    17       1 (GI=1)                      50488           assign binary[i] = ^(gray >> i);
    17       1 (GI=2)                      50488     
    17       1 (GI=3)                      50488     
    17       1 (GI=4)                      50488     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_write --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       binary[0-4]           5           5      100.00 
                                         gray[0-4]           5           5      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_read
=== Design Unit: work.GrayToBinary
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_read --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File grayToBin.v
    1                                                module GrayToBinary #(
    2                                                    parameter WIDTH = 4
    3                                                ) (
    4                                                    input  [WIDTH-1:0] gray,
    5                                                    output [WIDTH-1:0] binary
    6                                                );
    7                                                  /*
    8                                                  assign binary[0] = gray[3] ^ gray[2] ^ gray[1] ^ gray[0];
    9                                                  assign binary[1] = gray[3] ^ gray[2] ^ gray[1];
    10                                                 assign binary[2] = gray[3] ^ gray[2];
    11                                                 assign binary[3] = gray[3];
    12                                                 */
    13                                                 // OR
    14                                                 genvar i;
    15                                                 generate
    16                                                   for (i = 0; i < WIDTH; i = i + 1) begin
    17       1 (GI=1)                      50359           assign binary[i] = ^(gray >> i);
    17       1 (GI=2)                      50359     
    17       1 (GI=3)                      50359     
    17       1 (GI=4)                      50359     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst/gray_to_bin_read --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       binary[0-4]           5           5      100.00 
                                         gray[0-4]           5           5      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst
=== Design Unit: work.thresholdMonitor
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File thresholdMonitor.v
------------------------------------IF Branch------------------------------------
    31                                    100822     Count coming in to IF
    31              1                    ***0***         if (num_elements < 0) num_elements = BUFFER_DEPTH + num_elements;
                                          100822     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         0         1     0.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst --

  File thresholdMonitor.v
----------------Focused Condition View-------------------
Line       31 Item    1  (num_elements < 0)
Condition totals: 0 of 1 input term covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (num_elements < 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (num_elements < 0)_0  -                             
  Row   2:    ***0***  (num_elements < 0)_1  -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         1         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst --

  File thresholdMonitor.v
----------------Focused Expression View-----------------
Line       34 Item    1  (num_elements > 8)
Expression totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (num_elements > 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (num_elements > 8)_0  -                             
  Row   2:          5  (num_elements > 8)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         4         1    80.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File thresholdMonitor.v
    1                                                module thresholdMonitor (
    2                                                    gray_read_pointer,
    3                                                    gray_write_pointer,
    4                                                    delete_req,
    5                                                    add_req
    6                                                );
    7                                                  parameter BUFFER_DEPTH = 16;
    8                                                  localparam max_buffer_addr = $clog2(BUFFER_DEPTH);
    9                                                
    10                                                 input [max_buffer_addr:0] gray_read_pointer ;
    11                                                 input [max_buffer_addr:0] gray_write_pointer;
    12                                                 output reg delete_req;
    13                                                 output reg add_req;
    14                                               
    15                                                 wire [max_buffer_addr:0] binary_read_pointer;
    16                                                 wire [max_buffer_addr:0] binary_write_pointer;
    17                                               
    18                                                 GrayToBinary #(max_buffer_addr + 1) gray_to_bin_write (
    19                                                     .gray  (gray_write_pointer),
    20                                                     .binary(binary_write_pointer)
    21                                                 );
    22                                                 GrayToBinary #(max_buffer_addr + 1) gray_to_bin_read (
    23                                                     .gray  (gray_read_pointer),
    24                                                     .binary(binary_read_pointer)
    25                                                 );
    26                                               
    27                                                 reg [4:0] num_elements;
    28              1                     100822       always @* begin
    29                                                   // Calculate the number of elements in the FIFO
    30              1                     100822         num_elements = binary_write_pointer - binary_read_pointer;
    31              1                    ***0***         if (num_elements < 0) num_elements = BUFFER_DEPTH + num_elements;
    32                                               
    33                                                   // Check if the number of elements is greater than the threshold
    34              1                     100822         delete_req = (num_elements > 8);
    35              1                     100822         add_req = ~delete_req;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         54        52         2    96.29%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer/Threshold_Monitor_Inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           add_req           5           5      100.00 
                          binary_read_pointer[0-4]           5           5      100.00 
                         binary_write_pointer[0-4]           5           5      100.00 
                                        delete_req           5           5      100.00 
                            gray_read_pointer[0-4]           5           5      100.00 
                           gray_write_pointer[0-4]           5           5      100.00 
                                 num_elements[0-3]           5           5      100.00 
                                   num_elements[4]           0           0        0.00 

Total Node Count     =         27 
Toggled Node Count   =         26 
Untoggled Node Count =          1 

Toggle Coverage      =      96.29% (52 of 54 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/buffer
=== Design Unit: work.elasticBuffer
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        118       114         4    96.61%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/buffer --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       Skp_Removed           0           0        0.00 
                                           add_req           5           5      100.00 
                                      data_in[0-9]           5           5      100.00 
                                     data_out[0-9]           5           5      100.00 
                                        delete_req           5           5      100.00 
                            gray_read_pointer[0-4]           5           5      100.00 
                           gray_write_pointer[0-4]           5           5      100.00 
                                          overflow           0           0        0.00 
                                 read_address[0-4]           5           5      100.00 
                                          read_clk           5           5      100.00 
                                             rst_n           5           5      100.00 
                                         skp_added           1           1      100.00 
                           sync_gray_read_out[0-4]           5           5      100.00 
                          sync_gray_write_out[0-4]           5           5      100.00 
                                         underflow           5           5      100.00 
                                write_address[0-4]           5           5      100.00 
                                         write_clk           5           5      100.00 

Total Node Count     =         59 
Toggled Node Count   =         57 
Untoggled Node Count =          2 

Toggle Coverage      =      96.61% (114 of 118 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/decode
=== Design Unit: work.decoder
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       551       531        20    96.37%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/decode

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File 8_10_decoding.v
------------------------------------IF Branch------------------------------------
    19                                    110000     Count coming in to IF
    19              1                         20       if (!Rst_n) begin
    22              1                     109980       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    33                                     57189     Count coming in to CASE
    34              1                         40     		      	10'b10_0111_0100 : begin encoded_data_N =  8'b0000_0000; flag_n = 1'b1; end //0
    35              1                         41     		      	10'b01_1101_0100 : begin encoded_data_N =  8'b0000_0001; flag_n = 1'b1; end //1
    36              1                         35     		      	10'b10_1101_0100 : begin encoded_data_N =  8'b0000_0010; flag_n = 1'b1; end //2
    37              1                         56     		      	10'b11_0001_1011 : begin encoded_data_N =  8'b0000_0011; flag_n = 1'b1; end //3
    38              1                         39     		      	10'b11_0101_0100 : begin encoded_data_N =  8'b0000_0100; flag_n = 1'b1; end //4
    39              1                         39     		      	10'b10_1001_1011 : begin encoded_data_N =  8'b0000_0101; flag_n = 1'b1; end //5
    40              1                         46     		      	10'b01_1001_1011 : begin encoded_data_N =  8'b0000_0110; flag_n = 1'b1; end //6
    41              1                         51     		      	10'b11_1000_1011 : begin encoded_data_N =  8'b0000_0111; flag_n = 1'b1; end //7
    42              1                         40     		      	10'b11_1001_0100 : begin encoded_data_N =  8'b0000_1000; flag_n = 1'b1; end //8
    43              1                         60     		      	10'b10_0101_1011 : begin encoded_data_N =  8'b0000_1001; flag_n = 1'b1; end //9
    44              1                         43     		      	10'b01_0101_1011 : begin encoded_data_N =  8'b0000_1010; flag_n = 1'b1; end //10
    45              1                         45     		      	10'b11_0100_1011 : begin encoded_data_N =  8'b0000_1011; flag_n = 1'b1; end //11
    46              1                         49     		      	10'b00_1101_1011 : begin encoded_data_N =  8'b0000_1100; flag_n = 1'b1; end //12
    47              1                         44     		      	10'b10_1100_1011 : begin encoded_data_N =  8'b0000_1101; flag_n = 1'b1; end //13
    48              1                         60     		      	10'b01_1100_1011 : begin encoded_data_N =  8'b0000_1110; flag_n = 1'b1; end //14
    49              1                         43     		      	10'b01_0111_0100 : begin encoded_data_N =  8'b0000_1111; flag_n = 1'b1; end //15
    50              1                         47     		      	10'b01_1011_0100 : begin encoded_data_N =  8'b0001_0000; flag_n = 1'b1; end //16
    51              1                         47     		      	10'b10_0011_1011 : begin encoded_data_N =  8'b0001_0001; flag_n = 1'b1; end //17
    52              1                         48     		      	10'b01_0011_1011 : begin encoded_data_N =  8'b0001_0010; flag_n = 1'b1; end //18
    53              1                         41     		      	10'b11_0010_1011 : begin encoded_data_N =  8'b0001_0011; flag_n = 1'b1; end //19
    54              1                         34     		      	10'b00_1011_1011 : begin encoded_data_N =  8'b0001_0100; flag_n = 1'b1; end //20
    55              1                         59     		      	10'b10_1010_1011 : begin encoded_data_N =  8'b0001_0101; flag_n = 1'b1; end //21
    56              1                         44     		      	10'b01_1010_1011 : begin encoded_data_N =  8'b0001_0110; flag_n = 1'b1; end //22
    57              1                         47     		      	10'b11_1010_0100 : begin encoded_data_N =  8'b0001_0111; flag_n = 1'b1; end //23
    58              1                         53     		      	10'b11_0011_0100 : begin encoded_data_N =  8'b0001_1000; flag_n = 1'b1; end //24
    59              1                         39     		      	10'b10_0110_1011 : begin encoded_data_N =  8'b0001_1001; flag_n = 1'b1; end //25
    60              1                         54     		      	10'b01_0110_1011 : begin encoded_data_N =  8'b0001_1010; flag_n = 1'b1; end //26
    61              1                         50     		      	10'b11_0110_0100 : begin encoded_data_N =  8'b0001_1011; flag_n = 1'b1; end //27
    62              1                         44     		      	10'b00_1110_1011 : begin encoded_data_N =  8'b0001_1100; flag_n = 1'b1; end //28
    63              1                         42     		      	10'b10_1110_0100 : begin encoded_data_N =  8'b0001_1101; flag_n = 1'b1; end //29
    64              1                         38     		      	10'b01_1110_0100 : begin encoded_data_N =  8'b0001_1110; flag_n = 1'b1; end //30
    65              1                         48     		      	10'b10_1011_0100 : begin encoded_data_N =  8'b0001_1111; flag_n = 1'b1; end //31
    66              1                         51     		      	10'b10_0111_1001 : begin encoded_data_N =  8'b0010_0000; flag_n = 1'b1; end //32
    67              1                         36     		      	10'b01_1101_1001 : begin encoded_data_N =  8'b0010_0001; flag_n = 1'b1; end //33
    68              1                         48     		      	10'b10_1101_1001 : begin encoded_data_N =  8'b0010_0010; flag_n = 1'b1; end //34
    69              1                        101     		      	10'b11_0001_1001 : begin encoded_data_N =  8'b0010_0011; flag_n = 1'b1; end //35
    70              1                         45     		      	10'b11_0101_1001 : begin encoded_data_N =  8'b0010_0100; flag_n = 1'b1; end //36
    71              1                         94     		      	10'b10_1001_1001 : begin encoded_data_N =  8'b0010_0101; flag_n = 1'b1; end //37
    72              1                         99     		      	10'b01_1001_1001 : begin encoded_data_N =  8'b0010_0110; flag_n = 1'b1; end //38
    73              1                         44     		      	10'b11_1000_1001 : begin encoded_data_N =  8'b0010_0111; flag_n = 1'b1; end //39
    74              1                         49     		      	10'b11_1001_1001 : begin encoded_data_N =  8'b0010_1000; flag_n = 1'b1; end //40
    75              1                        117     		      	10'b10_0101_1001 : begin encoded_data_N =  8'b0010_1001; flag_n = 1'b1; end //41
    76              1                         83     		      	10'b01_0101_1001 : begin encoded_data_N =  8'b0010_1010; flag_n = 1'b1; end //42
    77              1                         97     		      	10'b11_0100_1001 : begin encoded_data_N =  8'b0010_1011; flag_n = 1'b1; end //43
    78              1                         89     		      	10'b00_1101_1001 : begin encoded_data_N =  8'b0010_1100; flag_n = 1'b1; end //44
    79              1                         91     		      	10'b10_1100_1001 : begin encoded_data_N =  8'b0010_1101; flag_n = 1'b1; end //45
    80              1                        101     		      	10'b01_1100_1001 : begin encoded_data_N =  8'b0010_1110; flag_n = 1'b1; end //46
    81              1                         29     		      	10'b01_0111_1001 : begin encoded_data_N =  8'b0010_1111; flag_n = 1'b1; end //47
    82              1                         57     		      	10'b01_1011_1001 : begin encoded_data_N =  8'b0011_0000; flag_n = 1'b1; end //48
    83              1                         96     		      	10'b10_0011_1001 : begin encoded_data_N =  8'b0011_0001; flag_n = 1'b1; end //49
    84              1                        116     		      	10'b01_0011_1001 : begin encoded_data_N =  8'b0011_0010; flag_n = 1'b1; end //50
    85              1                        118     		      	10'b11_0010_1001 : begin encoded_data_N =  8'b0011_0011; flag_n = 1'b1; end //51
    86              1                         97     		      	10'b00_1011_1001 : begin encoded_data_N =  8'b0011_0100; flag_n = 1'b1; end //52
    87              1                        105     		      	10'b10_1010_1001 : begin encoded_data_N =  8'b0011_0101; flag_n = 1'b1; end //53
    88              1                        109     		      	10'b01_1010_1001 : begin encoded_data_N =  8'b0011_0110; flag_n = 1'b1; end //54
    89              1                         34     		      	10'b11_1010_1001 : begin encoded_data_N =  8'b0011_0111; flag_n = 1'b1; end //55
    90              1                         29     		      	10'b11_0011_1001 : begin encoded_data_N =  8'b0011_1000; flag_n = 1'b1; end //56
    91              1                         91     		      	10'b10_0110_1001 : begin encoded_data_N =  8'b0011_1001; flag_n = 1'b1; end //57
    92              1                        108     		      	10'b01_0110_1001 : begin encoded_data_N =  8'b0011_1010; flag_n = 1'b1; end //58
    93              1                         52     		      	10'b11_0110_1001 : begin encoded_data_N =  8'b0011_1011; flag_n = 1'b1; end //59
    94              1                        120     		      	10'b00_1110_1001 : begin encoded_data_N =  8'b0011_1100; flag_n = 1'b1; end //60
    95              1                         42     		      	10'b10_1110_1001 : begin encoded_data_N =  8'b0011_1101; flag_n = 1'b1; end //61
    96              1                         38     		      	10'b01_1110_1001 : begin encoded_data_N =  8'b0011_1110; flag_n = 1'b1; end //62
    97              1                         38     		      	10'b10_1011_1001 : begin encoded_data_N =  8'b0011_1111; flag_n = 1'b1; end //63
    98              1                         46     		      	10'b10_0111_0101 : begin encoded_data_N =  8'b0100_0000; flag_n = 1'b1; end //64
    99              1                         44     		      	10'b01_1101_0101 : begin encoded_data_N =  8'b0100_0001; flag_n = 1'b1; end //65
    100             1                         45     		      	10'b10_1101_0101 : begin encoded_data_N =  8'b0100_0010; flag_n = 1'b1; end //66
    101             1                         90     		      	10'b11_0001_0101 : begin encoded_data_N =  8'b0100_0011; flag_n = 1'b1; end //67
    102             1                         48     		      	10'b11_0101_0101 : begin encoded_data_N =  8'b0100_0100; flag_n = 1'b1; end //68
    103             1                        100     		      	10'b10_1001_0101 : begin encoded_data_N =  8'b0100_0101; flag_n = 1'b1; end //69
    104             1                        106     		      	10'b01_1001_0101 : begin encoded_data_N =  8'b0100_0110; flag_n = 1'b1; end //70
    105             1                         39     		      	10'b11_1000_0101 : begin encoded_data_N =  8'b0100_0111; flag_n = 1'b1; end //71
    106             1                         39     		      	10'b11_1001_0101 : begin encoded_data_N =  8'b0100_1000; flag_n = 1'b1; end //72
    107             1                        115     		      	10'b10_0101_0101 : begin encoded_data_N =  8'b0100_1001; flag_n = 1'b1; end //73
    108             1                      10021     		      	10'b01_0101_0101 : begin encoded_data_N =  8'b0100_1010; flag_n = 1'b1; end //74
    109             1                         93     		      	10'b11_0100_0101 : begin encoded_data_N =  8'b0100_1011; flag_n = 1'b1; end //75
    110             1                         85     		      	10'b00_1101_0101 : begin encoded_data_N =  8'b0100_1100; flag_n = 1'b1; end //76
    111             1                         90     		      	10'b10_1100_0101 : begin encoded_data_N =  8'b0100_1101; flag_n = 1'b1; end //77
    112             1                         90     		      	10'b01_1100_0101 : begin encoded_data_N =  8'b0100_1110; flag_n = 1'b1; end //78
    113             1                         50     		      	10'b01_0111_0101 : begin encoded_data_N =  8'b0100_1111; flag_n = 1'b1; end //79
    114             1                         33     		      	10'b01_1011_0101 : begin encoded_data_N =  8'b0101_0000; flag_n = 1'b1; end //80
    115             1                        105     		      	10'b10_0011_0101 : begin encoded_data_N =  8'b0101_0001; flag_n = 1'b1; end //81
    116             1                         89     		      	10'b01_0011_0101 : begin encoded_data_N =  8'b0101_0010; flag_n = 1'b1; end //82
    117             1                        103     		      	10'b11_0010_0101 : begin encoded_data_N =  8'b0101_0011; flag_n = 1'b1; end //83
    118             1                         97     		      	10'b00_1011_0101 : begin encoded_data_N =  8'b0101_0100; flag_n = 1'b1; end //84
    119             1                         92     		      	10'b10_1010_0101 : begin encoded_data_N =  8'b0101_0101; flag_n = 1'b1; end //85
    120             1                        106     		      	10'b01_1010_0101 : begin encoded_data_N =  8'b0101_0110; flag_n = 1'b1; end //86
    121             1                         49     		      	10'b11_1010_0101 : begin encoded_data_N =  8'b0101_0111; flag_n = 1'b1; end //87
    122             1                         42     		      	10'b11_0011_0101 : begin encoded_data_N =  8'b0101_1000; flag_n = 1'b1; end //88
    123             1                         99     		      	10'b10_0110_0101 : begin encoded_data_N =  8'b0101_1001; flag_n = 1'b1; end //89
    124             1                         98     		      	10'b01_0110_0101 : begin encoded_data_N =  8'b0101_1010; flag_n = 1'b1; end //90
    125             1                         35     		      	10'b11_0110_0101 : begin encoded_data_N =  8'b0101_1011; flag_n = 1'b1; end //91
    126             1                        101     		      	10'b00_1110_0101 : begin encoded_data_N =  8'b0101_1100; flag_n = 1'b1; end //92
    127             1                         33     		      	10'b10_1110_0101 : begin encoded_data_N =  8'b0101_1101; flag_n = 1'b1; end //93
    128             1                         35     		      	10'b01_1110_0101 : begin encoded_data_N =  8'b0101_1110; flag_n = 1'b1; end //94
    129             1                         39     		      	10'b10_1011_0101 : begin encoded_data_N =  8'b0101_1111; flag_n = 1'b1; end //95
    130             1                         41     		      	10'b10_0111_0011 : begin encoded_data_N =  8'b0110_0000; flag_n = 1'b1; end //96
    131             1                         52     		      	10'b01_1101_0011 : begin encoded_data_N =  8'b0110_0001; flag_n = 1'b1; end //97
    132             1                         46     		      	10'b10_1101_0011 : begin encoded_data_N =  8'b0110_0010; flag_n = 1'b1; end //98
    133             1                         48     		      	10'b11_0001_1100 : begin encoded_data_N =  8'b0110_0011; flag_n = 1'b1; end //99
    134             1                         39     		      	10'b11_0101_0011 : begin encoded_data_N =  8'b0110_0100; flag_n = 1'b1; end //100
    135             1                         45     		      	10'b10_1001_1100 : begin encoded_data_N =  8'b0110_0101; flag_n = 1'b1; end //101
    136             1                         35     		      	10'b01_1001_1100 : begin encoded_data_N =  8'b0110_0110; flag_n = 1'b1; end //102
    137             1                         47     		      	10'b11_1000_1100 : begin encoded_data_N =  8'b0110_0111; flag_n = 1'b1; end //103
    138             1                         43     		      	10'b11_1001_0011 : begin encoded_data_N =  8'b0110_1000; flag_n = 1'b1; end //104
    139             1                         49     		      	10'b10_0101_1100 : begin encoded_data_N =  8'b0110_1001; flag_n = 1'b1; end //105
    140             1                         38     		      	10'b01_0101_1100 : begin encoded_data_N =  8'b0110_1010; flag_n = 1'b1; end //106
    141             1                         37     		      	10'b11_0100_1100 : begin encoded_data_N =  8'b0110_1011; flag_n = 1'b1; end //107
    142             1                         42     		      	10'b00_1101_1100 : begin encoded_data_N =  8'b0110_1100; flag_n = 1'b1; end //108
    143             1                         49     		      	10'b10_1100_1100 : begin encoded_data_N =  8'b0110_1101; flag_n = 1'b1; end //109
    144             1                         57     		      	10'b01_1100_1100 : begin encoded_data_N =  8'b0110_1110; flag_n = 1'b1; end //110
    145             1                         50     		      	10'b01_0111_0011 : begin encoded_data_N =  8'b0110_1111; flag_n = 1'b1; end //111
    146             1                         54     		      	10'b01_1011_0011 : begin encoded_data_N =  8'b0111_0000; flag_n = 1'b1; end //112
    147             1                         48     		      	10'b10_0011_1100 : begin encoded_data_N =  8'b0111_0001; flag_n = 1'b1; end //113
    148             1                         39     		      	10'b01_0011_1100 : begin encoded_data_N =  8'b0111_0010; flag_n = 1'b1; end //114
    149             1                         43     		      	10'b11_0010_1100 : begin encoded_data_N =  8'b0111_0011; flag_n = 1'b1; end //115
    150             1                         46     		      	10'b00_1011_1100 : begin encoded_data_N =  8'b0111_0100; flag_n = 1'b1; end //116
    151             1                         42     		      	10'b10_1010_1100 : begin encoded_data_N =  8'b0111_0101; flag_n = 1'b1; end //117
    152             1                         49     		      	10'b01_1010_1100 : begin encoded_data_N =  8'b0111_0110; flag_n = 1'b1; end //118
    153             1                         42     		      	10'b11_1010_0011 : begin encoded_data_N =  8'b0111_0111; flag_n = 1'b1; end //119
    154             1                         49     		      	10'b11_0011_0011 : begin encoded_data_N =  8'b0111_1000; flag_n = 1'b1; end //120
    155             1                         35     		      	10'b10_0110_1100 : begin encoded_data_N =  8'b0111_1001; flag_n = 1'b1; end //121
    156             1                         47     		      	10'b01_0110_1100 : begin encoded_data_N =  8'b0111_1010; flag_n = 1'b1; end //122
    157             1                         40     		      	10'b11_0110_0011 : begin encoded_data_N =  8'b0111_1011; flag_n = 1'b1; end //123
    158             1                         38     		      	10'b00_1110_1100 : begin encoded_data_N =  8'b0111_1100; flag_n = 1'b1; end //124
    159             1                         46     		      	10'b10_1110_0011 : begin encoded_data_N =  8'b0111_1101; flag_n = 1'b1; end //125
    160             1                         39     		      	10'b01_1110_0011 : begin encoded_data_N =  8'b0111_1110; flag_n = 1'b1; end //126
    161             1                         50     		      	10'b10_1011_0011 : begin encoded_data_N =  8'b0111_1111; flag_n = 1'b1; end //127
    162             1                         35     		      	10'b10_0111_0010 : begin encoded_data_N =  8'b1000_0000; flag_n = 1'b1; end //128
    163             1                         38     		      	10'b01_1101_0010 : begin encoded_data_N =  8'b1000_0001; flag_n = 1'b1; end //129
    164             1                         44     		      	10'b10_1101_0010 : begin encoded_data_N =  8'b1000_0010; flag_n = 1'b1; end //130
    165             1                         44     		      	10'b11_0001_1101 : begin encoded_data_N =  8'b1000_0011; flag_n = 1'b1; end //131
    166             1                         53     		      	10'b11_0101_0010 : begin encoded_data_N =  8'b1000_0100; flag_n = 1'b1; end //132
    167             1                         57     		      	10'b10_1001_1101 : begin encoded_data_N =  8'b1000_0101; flag_n = 1'b1; end //133
    168             1                         42     		      	10'b01_1001_1101 : begin encoded_data_N =  8'b1000_0110; flag_n = 1'b1; end //134
    169             1                         41     		      	10'b11_1000_1101 : begin encoded_data_N =  8'b1000_0111; flag_n = 1'b1; end //135
    170             1                         61     		      	10'b11_1001_0010 : begin encoded_data_N =  8'b1000_1000; flag_n = 1'b1; end //136
    171             1                         43     		      	10'b10_0101_1101 : begin encoded_data_N =  8'b1000_1001; flag_n = 1'b1; end //137
    172             1                         35     		      	10'b01_0101_1101 : begin encoded_data_N =  8'b1000_1010; flag_n = 1'b1; end //138
    173             1                         54     		      	10'b11_0100_1101 : begin encoded_data_N =  8'b1000_1011; flag_n = 1'b1; end //139
    174             1                         43     		      	10'b00_1101_1101 : begin encoded_data_N =  8'b1000_1100; flag_n = 1'b1; end //140
    175             1                         40     		      	10'b10_1100_1101 : begin encoded_data_N =  8'b1000_1101; flag_n = 1'b1; end //141
    176             1                         41     		      	10'b01_1100_1101 : begin encoded_data_N =  8'b1000_1110; flag_n = 1'b1; end //142
    177             1                         33     		      	10'b01_0111_0010 : begin encoded_data_N =  8'b1000_1111; flag_n = 1'b1; end //143
    178             1                         47     		      	10'b01_1011_0010 : begin encoded_data_N =  8'b1001_0000; flag_n = 1'b1; end //144
    179             1                         40     		      	10'b10_0011_1101 : begin encoded_data_N =  8'b1001_0001; flag_n = 1'b1; end //145
    180             1                         55     		      	10'b01_0011_1101 : begin encoded_data_N =  8'b1001_0010; flag_n = 1'b1; end //146
    181             1                         45     		      	10'b11_0010_1101 : begin encoded_data_N =  8'b1001_0011; flag_n = 1'b1; end //147
    182             1                         45     		      	10'b00_1011_1101 : begin encoded_data_N =  8'b1001_0100; flag_n = 1'b1; end //148
    183             1                         47     		      	10'b10_1010_1101 : begin encoded_data_N =  8'b1001_0101; flag_n = 1'b1; end //149
    184             1                         45     		      	10'b01_1010_1101 : begin encoded_data_N =  8'b1001_0110; flag_n = 1'b1; end //150
    185             1                         33     		      	10'b11_1010_0010 : begin encoded_data_N =  8'b1001_0111; flag_n = 1'b1; end //151
    186             1                         47     		      	10'b11_0011_0010 : begin encoded_data_N =  8'b1001_1000; flag_n = 1'b1; end //152
    187             1                         45     		      	10'b10_0110_1101 : begin encoded_data_N =  8'b1001_1001; flag_n = 1'b1; end //153
    188             1                         36     		      	10'b01_0110_1101 : begin encoded_data_N =  8'b1001_1010; flag_n = 1'b1; end //154
    189             1                         37     		      	10'b11_0110_0010 : begin encoded_data_N =  8'b1001_1011; flag_n = 1'b1; end //155
    190             1                         55     		      	10'b00_1110_1101 : begin encoded_data_N =  8'b1001_1100; flag_n = 1'b1; end //156
    191             1                         18     		      	10'b10_1110_0010 : begin encoded_data_N =  8'b1001_1101; flag_n = 1'b1; end //157
    192             1                         53     		      	10'b01_1110_0010 : begin encoded_data_N =  8'b1001_1110; flag_n = 1'b1; end //158
    193             1                         49     		      	10'b10_1011_0010 : begin encoded_data_N =  8'b1001_1111; flag_n = 1'b1; end //159
    194             1                         46     		      	10'b10_0111_1010 : begin encoded_data_N =  8'b1010_0000; flag_n = 1'b1; end //160
    195             1                         48     		      	10'b01_1101_1010 : begin encoded_data_N =  8'b1010_0001; flag_n = 1'b1; end //161
    196             1                         38     		      	10'b10_1101_1010 : begin encoded_data_N =  8'b1010_0010; flag_n = 1'b1; end //162
    197             1                         95     		      	10'b11_0001_1010 : begin encoded_data_N =  8'b1010_0011; flag_n = 1'b1; end //163
    198             1                         38     		      	10'b11_0101_1010 : begin encoded_data_N =  8'b1010_0100; flag_n = 1'b1; end //164
    199             1                         94     		      	10'b10_1001_1010 : begin encoded_data_N =  8'b1010_0101; flag_n = 1'b1; end //165
    200             1                         96     		      	10'b01_1001_1010 : begin encoded_data_N =  8'b1010_0110; flag_n = 1'b1; end //166
    201             1                         41     		      	10'b11_1000_1010 : begin encoded_data_N =  8'b1010_0111; flag_n = 1'b1; end //167
    202             1                         38     		      	10'b11_1001_1010 : begin encoded_data_N =  8'b1010_1000; flag_n = 1'b1; end //168
    203             1                         96     		      	10'b10_0101_1010 : begin encoded_data_N =  8'b1010_1001; flag_n = 1'b1; end //169
    204             1                         85     		      	10'b01_0101_1010 : begin encoded_data_N =  8'b1010_1010; flag_n = 1'b1; end //170
    205             1                         99     		      	10'b11_0100_1010 : begin encoded_data_N =  8'b1010_1011; flag_n = 1'b1; end //171
    206             1                        100     		      	10'b00_1101_1010 : begin encoded_data_N =  8'b1010_1100; flag_n = 1'b1; end //172
    207             1                        111     		      	10'b10_1100_1010 : begin encoded_data_N =  8'b1010_1101; flag_n = 1'b1; end //173
    208             1                         99     		      	10'b01_1100_1010 : begin encoded_data_N =  8'b1010_1110; flag_n = 1'b1; end //174
    209             1                         44     		      	10'b01_0111_1010 : begin encoded_data_N =  8'b1010_1111; flag_n = 1'b1; end //175
    210             1                         37     		      	10'b01_1011_1010 : begin encoded_data_N =  8'b1011_0000; flag_n = 1'b1; end //176
    211             1                         97     		      	10'b10_0011_1010 : begin encoded_data_N =  8'b1011_0001; flag_n = 1'b1; end //177
    212             1                         98     		      	10'b01_0011_1010 : begin encoded_data_N =  8'b1011_0010; flag_n = 1'b1; end //178
    213             1                        106     		      	10'b11_0010_1010 : begin encoded_data_N =  8'b1011_0011; flag_n = 1'b1; end //179
    214             1                         92     		      	10'b00_1011_1010 : begin encoded_data_N =  8'b1011_0100; flag_n = 1'b1; end //180
    215             1                        104     		      	10'b10_1010_1010 : begin encoded_data_N =  8'b1011_0101; flag_n = 1'b1; end //181
    216             1                        100     		      	10'b01_1010_1010 : begin encoded_data_N =  8'b1011_0110; flag_n = 1'b1; end //182
    217             1                         44     		      	10'b11_1010_1010 : begin encoded_data_N =  8'b1011_0111; flag_n = 1'b1; end //183
    218             1                         39     		      	10'b11_0011_1010 : begin encoded_data_N =  8'b1011_1000; flag_n = 1'b1; end //184
    219             1                        111     		      	10'b10_0110_1010 : begin encoded_data_N =  8'b1011_1001; flag_n = 1'b1; end //185
    220             1                        107     		      	10'b01_0110_1010 : begin encoded_data_N =  8'b1011_1010; flag_n = 1'b1; end //186
    221             1                         53     		      	10'b11_0110_1010 : begin encoded_data_N =  8'b1011_1011; flag_n = 1'b1; end //187
    222             1                         92     		      	10'b00_1110_1010 : begin encoded_data_N =  8'b1011_1100; flag_n = 1'b1; end //188
    223             1                         50     		      	10'b10_1110_1010 : begin encoded_data_N =  8'b1011_1101; flag_n = 1'b1; end //189
    224             1                         43     		      	10'b01_1110_1010 : begin encoded_data_N =  8'b1011_1110; flag_n = 1'b1; end //190
    225             1                         46     		      	10'b10_1011_1010 : begin encoded_data_N =  8'b1011_1111; flag_n = 1'b1; end //191
    226             1                         47     		      	10'b10_0111_0110 : begin encoded_data_N =  8'b1100_0000; flag_n = 1'b1; end //192
    227             1                         54     		      	10'b01_1101_0110 : begin encoded_data_N =  8'b1100_0001; flag_n = 1'b1; end //193
    228             1                         32     		      	10'b10_1101_0110 : begin encoded_data_N =  8'b1100_0010; flag_n = 1'b1; end //194
    229             1                         92     		      	10'b11_0001_0110 : begin encoded_data_N =  8'b1100_0011; flag_n = 1'b1; end //195
    230             1                         42     		      	10'b11_0101_0110 : begin encoded_data_N =  8'b1100_0100; flag_n = 1'b1; end //196
    231             1                         83     		      	10'b10_1001_0110 : begin encoded_data_N =  8'b1100_0101; flag_n = 1'b1; end //197
    232             1                        106     		      	10'b01_1001_0110 : begin encoded_data_N =  8'b1100_0110; flag_n = 1'b1; end //198
    233             1                         52     		      	10'b11_1000_0110 : begin encoded_data_N =  8'b1100_0111; flag_n = 1'b1; end //199
    234             1                         35     		      	10'b11_1001_0110 : begin encoded_data_N =  8'b1100_1000; flag_n = 1'b1; end //200
    235             1                        101     		      	10'b10_0101_0110 : begin encoded_data_N =  8'b1100_1001; flag_n = 1'b1; end //201
    236             1                         98     		      	10'b01_0101_0110 : begin encoded_data_N =  8'b1100_1010; flag_n = 1'b1; end //202
    237             1                         95     		      	10'b11_0100_0110 : begin encoded_data_N =  8'b1100_1011; flag_n = 1'b1; end //203
    238             1                         84     		      	10'b00_1101_0110 : begin encoded_data_N =  8'b1100_1100; flag_n = 1'b1; end //204
    239             1                        108     		      	10'b10_1100_0110 : begin encoded_data_N =  8'b1100_1101; flag_n = 1'b1; end //205
    240             1                         93     		      	10'b01_1100_0110 : begin encoded_data_N =  8'b1100_1110; flag_n = 1'b1; end //206
    241             1                         42     		      	10'b01_0111_0110 : begin encoded_data_N =  8'b1100_1111; flag_n = 1'b1; end //207
    242             1                         44     		      	10'b01_1011_0110 : begin encoded_data_N =  8'b1101_0000; flag_n = 1'b1; end //208
    243             1                         97     		      	10'b10_0011_0110 : begin encoded_data_N =  8'b1101_0001; flag_n = 1'b1; end //209
    244             1                        107     		      	10'b01_0011_0110 : begin encoded_data_N =  8'b1101_0010; flag_n = 1'b1; end //210
    245             1                        106     		      	10'b11_0010_0110 : begin encoded_data_N =  8'b1101_0011; flag_n = 1'b1; end //211
    246             1                        100     		      	10'b00_1011_0110 : begin encoded_data_N =  8'b1101_0100; flag_n = 1'b1; end //212
    247             1                         88     		      	10'b10_1010_0110 : begin encoded_data_N =  8'b1101_0101; flag_n = 1'b1; end //213
    248             1                        109     		      	10'b01_1010_0110 : begin encoded_data_N =  8'b1101_0110; flag_n = 1'b1; end //214
    249             1                         49     		      	10'b11_1010_0110 : begin encoded_data_N =  8'b1101_0111; flag_n = 1'b1; end //215
    250             1                         35     		      	10'b11_0011_0110 : begin encoded_data_N =  8'b1101_1000; flag_n = 1'b1; end //216
    251             1                         92     		      	10'b10_0110_0110 : begin encoded_data_N =  8'b1101_1001; flag_n = 1'b1; end //217
    252             1                        105     		      	10'b01_0110_0110 : begin encoded_data_N =  8'b1101_1010; flag_n = 1'b1; end //218
    253             1                         39     		      	10'b11_0110_0110 : begin encoded_data_N =  8'b1101_1011; flag_n = 1'b1; end //219
    254             1                        105     		      	10'b00_1110_0110 : begin encoded_data_N =  8'b1101_1100; flag_n = 1'b1; end //220
    255             1                         36     		      	10'b10_1110_0110 : begin encoded_data_N =  8'b1101_1101; flag_n = 1'b1; end //221
    256             1                         47     		      	10'b01_1110_0110 : begin encoded_data_N =  8'b1101_1110; flag_n = 1'b1; end //222
    257             1                         54     		      	10'b10_1011_0110 : begin encoded_data_N =  8'b1101_1111; flag_n = 1'b1; end //223
    258             1                         36     		      	10'b10_0111_0001 : begin encoded_data_N =  8'b1110_0000; flag_n = 1'b1; end //224
    259             1                         38     		      	10'b01_1101_0001 : begin encoded_data_N =  8'b1110_0001; flag_n = 1'b1; end //225
    260             1                         40     		      	10'b10_1101_0001 : begin encoded_data_N =  8'b1110_0010; flag_n = 1'b1; end //226
    261             1                         58     		      	10'b11_0001_1110 : begin encoded_data_N =  8'b1110_0011; flag_n = 1'b1; end //227
    262             1                         46     		      	10'b11_0101_0001 : begin encoded_data_N =  8'b1110_0100; flag_n = 1'b1; end //228
    263             1                         36     		      	10'b10_1001_1110 : begin encoded_data_N =  8'b1110_0101; flag_n = 1'b1; end //229
    264             1                         42     		      	10'b01_1001_1110 : begin encoded_data_N =  8'b1110_0110; flag_n = 1'b1; end //230
    265             1                         48     		      	10'b11_1000_1110 : begin encoded_data_N =  8'b1110_0111; flag_n = 1'b1; end //231
    266             1                         47     		      	10'b11_1001_0001 : begin encoded_data_N =  8'b1110_1000; flag_n = 1'b1; end //232
    267             1                         47     		      	10'b10_0101_1110 : begin encoded_data_N =  8'b1110_1001; flag_n = 1'b1; end //233
    268             1                         45     		      	10'b01_0101_1110 : begin encoded_data_N =  8'b1110_1010; flag_n = 1'b1; end //234
    269             1                         51     		      	10'b11_0100_1110 : begin encoded_data_N =  8'b1110_1011; flag_n = 1'b1; end //235
    270             1                         47     		      	10'b00_1101_1110 : begin encoded_data_N =  8'b1110_1100; flag_n = 1'b1; end //236
    271             1                         51     		      	10'b10_1100_1110 : begin encoded_data_N =  8'b1110_1101; flag_n = 1'b1; end //237
    272             1                         38     		      	10'b01_1100_1110 : begin encoded_data_N =  8'b1110_1110; flag_n = 1'b1; end //238
    273             1                         32     		      	10'b01_0111_0001 : begin encoded_data_N =  8'b1110_1111; flag_n = 1'b1; end //239
    274             1                         42     		      	10'b01_1011_0001 : begin encoded_data_N =  8'b1111_0000; flag_n = 1'b1; end //240
    275             1                         47     		      	10'b10_0011_0111 : begin encoded_data_N =  8'b1111_0001; flag_n = 1'b1; end //241
    276             1                         43     		      	10'b01_0011_0111 : begin encoded_data_N =  8'b1111_0010; flag_n = 1'b1; end //242
    277             1                         41     		      	10'b11_0010_1110 : begin encoded_data_N =  8'b1111_0011; flag_n = 1'b1; end //243
    278             1                         28     		      	10'b00_1011_0111 : begin encoded_data_N =  8'b1111_0100; flag_n = 1'b1; end //244
    279             1                         33     		      	10'b10_1010_1110 : begin encoded_data_N =  8'b1111_0101; flag_n = 1'b1; end //245
    280             1                         54     		      	10'b01_1010_1110 : begin encoded_data_N =  8'b1111_0110; flag_n = 1'b1; end //246
    281             1                         43     		      	10'b11_1010_0001 : begin encoded_data_N =  8'b1111_0111; flag_n = 1'b1; end //247
    282             1                         43     		      	10'b11_0011_0001 : begin encoded_data_N =  8'b1111_1000; flag_n = 1'b1; end //248
    283             1                         36     		      	10'b10_0110_1110 : begin encoded_data_N =  8'b1111_1001; flag_n = 1'b1; end //249
    284             1                         56     		      	10'b01_0110_1110 : begin encoded_data_N =  8'b1111_1010; flag_n = 1'b1; end //250
    285             1                         42     		      	10'b11_0110_0001 : begin encoded_data_N =  8'b1111_1011; flag_n = 1'b1; end //251
    286             1                         38     		      	10'b00_1110_1110 : begin encoded_data_N =  8'b1111_1100; flag_n = 1'b1; end //252
    287             1                         39     		      	10'b10_1110_0001 : begin encoded_data_N =  8'b1111_1101; flag_n = 1'b1; end //253
    288             1                         32     		      	10'b01_1110_0001 : begin encoded_data_N =  8'b1111_1110; flag_n = 1'b1; end //254
    289             1                         44     		      	10'b10_1011_0001 : begin encoded_data_N =  8'b1111_1111; flag_n = 1'b1; end //255
    291             1                    ***0***     		      	10'b00_1111_0100 : begin encoded_data_N =  8'b0001_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    292             1                    ***0***     		      	10'b00_1111_1001 : begin encoded_data_N =  8'b0011_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    293             1                    ***0***     		      	10'b00_1111_0101 : begin encoded_data_N =  8'b0101_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    294             1                      21134     		      	10'b00_1111_0011 : begin encoded_data_N =  8'b0111_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    295             1                    ***0***     		      	10'b00_1111_0010 : begin encoded_data_N =  8'b1001_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    296             1                    ***0***     		      	10'b00_1111_1010 : begin encoded_data_N =  8'b1011_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    297             1                    ***0***     		      	10'b00_1111_0110 : begin encoded_data_N =  8'b1101_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    298             1                          5     		      	10'b00_1111_1000 : begin encoded_data_N =  8'b1111_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    299             1                    ***0***     		      	10'b11_1010_1000 : begin encoded_data_N =  8'b1111_0111; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    300             1                    ***0***     		      	10'b11_0110_1000 : begin encoded_data_N =  8'b1111_1011; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    301             1                    ***0***     		      	10'b10_1110_1000 : begin encoded_data_N =  8'b1111_1101; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    302             1                    ***0***     		      	10'b01_1110_1000 : begin encoded_data_N =  8'b1111_1110; flag_n = 1'b1; RxDataK_N = 1'b1; end  
    304             1                      10950     		default : begin 
Branch totals: 259 hits of 269 branches = 96.28%

------------------------------------CASE Branch------------------------------------
    325                                   114367     Count coming in to CASE
    327             1                         98     			10'b01_1000_1011 : begin  encoded_data_P = 8'b0000_0000; flag_p = 1'b1; end  //0
    328             1                         78     			10'b10_0010_1011 : begin  encoded_data_P = 8'b0000_0001; flag_p = 1'b1; end  //1
    329             1                        114     			10'b01_0010_1011 : begin  encoded_data_P = 8'b0000_0010; flag_p = 1'b1; end  //2
    330             1                        114     			10'b11_0001_0100 : begin  encoded_data_P = 8'b0000_0011; flag_p = 1'b1; end  //3
    331             1                        104     			10'b00_1010_1011 : begin  encoded_data_P = 8'b0000_0100; flag_p = 1'b1; end  //4
    332             1                         96     			10'b10_1001_0100 : begin  encoded_data_P = 8'b0000_0101; flag_p = 1'b1; end  //5
    333             1                        108     			10'b01_1001_0100 : begin  encoded_data_P = 8'b0000_0110; flag_p = 1'b1; end  //6
    334             1                        106     			10'b00_0111_0100 : begin  encoded_data_P = 8'b0000_0111; flag_p = 1'b1; end  //7
    335             1                        110     			10'b00_0110_1011 : begin  encoded_data_P = 8'b0000_1000; flag_p = 1'b1; end  //8
    336             1                        118     			10'b10_0101_0100 : begin  encoded_data_P = 8'b0000_1001; flag_p = 1'b1; end  //9
    337             1                         85     			10'b01_0101_0100 : begin  encoded_data_P = 8'b0000_1010; flag_p = 1'b1; end  //10
    338             1                         86     			10'b11_0100_0100 : begin  encoded_data_P = 8'b0000_1011; flag_p = 1'b1; end  //11
    339             1                         94     			10'b00_1101_0100 : begin  encoded_data_P = 8'b0000_1100; flag_p = 1'b1; end  //12
    340             1                        104     			10'b10_1100_0100 : begin  encoded_data_P = 8'b0000_1101; flag_p = 1'b1; end  //13
    341             1                        114     			10'b01_1100_0100 : begin  encoded_data_P = 8'b0000_1110; flag_p = 1'b1; end  //14
    342             1                        106     			10'b10_1000_1011 : begin  encoded_data_P = 8'b0000_1111; flag_p = 1'b1; end  //15
    343             1                        122     			10'b10_0100_1011 : begin  encoded_data_P = 8'b0001_0000; flag_p = 1'b1; end  //16
    344             1                         98     			10'b10_0011_0100 : begin  encoded_data_P = 8'b0001_0001; flag_p = 1'b1; end  //17
    345             1                         98     			10'b01_0011_0100 : begin  encoded_data_P = 8'b0001_0010; flag_p = 1'b1; end  //18
    346             1                        137     			10'b11_0010_0100 : begin  encoded_data_P = 8'b0001_0011; flag_p = 1'b1; end  //19
    347             1                        103     			10'b00_1011_0100 : begin  encoded_data_P = 8'b0001_0100; flag_p = 1'b1; end  //20
    348             1                        120     			10'b10_1010_0100 : begin  encoded_data_P = 8'b0001_0101; flag_p = 1'b1; end  //21
    349             1                        112     			10'b01_1010_0100 : begin  encoded_data_P = 8'b0001_0110; flag_p = 1'b1; end  //22
    350             1                        108     			10'b00_0101_1011 : begin  encoded_data_P = 8'b0001_0111; flag_p = 1'b1; end  //23
    351             1                         99     			10'b00_1100_1011 : begin  encoded_data_P = 8'b0001_1000; flag_p = 1'b1; end  //24
    352             1                        106     			10'b10_0110_0100 : begin  encoded_data_P = 8'b0001_1001; flag_p = 1'b1; end  //25
    353             1                        138     			10'b01_0110_0100 : begin  encoded_data_P = 8'b0001_1010; flag_p = 1'b1; end  //26
    354             1                        120     			10'b00_1001_1011 : begin  encoded_data_P = 8'b0001_1011; flag_p = 1'b1; end  //27
    355             1                        114     			10'b00_1110_0100 : begin  encoded_data_P = 8'b0001_1100; flag_p = 1'b1; end  //28
    356             1                        142     			10'b01_0001_1011 : begin  encoded_data_P = 8'b0001_1101; flag_p = 1'b1; end  //29
    357             1                        104     			10'b10_0001_1011 : begin  encoded_data_P = 8'b0001_1110; flag_p = 1'b1; end  //30
    358             1                        127     			10'b01_0100_1011 : begin  encoded_data_P = 8'b0001_1111; flag_p = 1'b1; end  //31
    359             1                         88     			10'b01_1000_1001 : begin  encoded_data_P = 8'b0010_0000; flag_p = 1'b1; end  //32
    360             1                        100     			10'b10_0010_1001 : begin  encoded_data_P = 8'b0010_0001; flag_p = 1'b1; end  //33
    361             1                        100     			10'b01_0010_1001 : begin  encoded_data_P = 8'b0010_0010; flag_p = 1'b1; end  //34
    362             1                        166     			10'b11_0001_1001 : begin  encoded_data_P = 8'b0010_0011; flag_p = 1'b1; end  //35
    363             1                        112     			10'b00_1010_1001 : begin  encoded_data_P = 8'b0010_0100; flag_p = 1'b1; end  //36
    364             1                        163     			10'b10_1001_1001 : begin  encoded_data_P = 8'b0010_0101; flag_p = 1'b1; end  //37
    365             1                        171     			10'b01_1001_1001 : begin  encoded_data_P = 8'b0010_0110; flag_p = 1'b1; end  //38
    366             1                         98     			10'b00_0111_1001 : begin  encoded_data_P = 8'b0010_0111; flag_p = 1'b1; end  //39
    367             1                         86     			10'b00_0110_1001 : begin  encoded_data_P = 8'b0010_1000; flag_p = 1'b1; end  //40
    368             1                        207     			10'b10_0101_1001 : begin  encoded_data_P = 8'b0010_1001; flag_p = 1'b1; end  //41
    369             1                        137     			10'b01_0101_1001 : begin  encoded_data_P = 8'b0010_1010; flag_p = 1'b1; end  //42
    370             1                        165     			10'b11_0100_1001 : begin  encoded_data_P = 8'b0010_1011; flag_p = 1'b1; end  //43
    371             1                        151     			10'b00_1101_1001 : begin  encoded_data_P = 8'b0010_1100; flag_p = 1'b1; end  //44
    372             1                        155     			10'b10_1100_1001 : begin  encoded_data_P = 8'b0010_1101; flag_p = 1'b1; end  //45
    373             1                        181     			10'b01_1100_1001 : begin  encoded_data_P = 8'b0010_1110; flag_p = 1'b1; end  //46
    374             1                         98     			10'b10_1000_1001 : begin  encoded_data_P = 8'b0010_1111; flag_p = 1'b1; end  //47
    375             1                        128     			10'b10_0100_1001 : begin  encoded_data_P = 8'b0011_0000; flag_p = 1'b1; end  //48
    376             1                        169     			10'b10_0011_1001 : begin  encoded_data_P = 8'b0011_0001; flag_p = 1'b1; end  //49
    377             1                        196     			10'b01_0011_1001 : begin  encoded_data_P = 8'b0011_0010; flag_p = 1'b1; end  //50
    378             1                        189     			10'b11_0010_1001 : begin  encoded_data_P = 8'b0011_0011; flag_p = 1'b1; end  //51
    379             1                        162     			10'b00_1011_1001 : begin  encoded_data_P = 8'b0011_0100; flag_p = 1'b1; end  //52
    380             1                        174     			10'b10_1010_1001 : begin  encoded_data_P = 8'b0011_0101; flag_p = 1'b1; end  //53
    381             1                        175     			10'b01_1010_1001 : begin  encoded_data_P = 8'b0011_0110; flag_p = 1'b1; end  //54
    382             1                        116     			10'b00_0101_1001 : begin  encoded_data_P = 8'b0011_0111; flag_p = 1'b1; end  //55
    383             1                         84     			10'b00_1100_1001 : begin  encoded_data_P = 8'b0011_1000; flag_p = 1'b1; end  //56
    384             1                        153     			10'b10_0110_1001 : begin  encoded_data_P = 8'b0011_1001; flag_p = 1'b1; end  //57
    385             1                        186     			10'b01_0110_1001 : begin  encoded_data_P = 8'b0011_1010; flag_p = 1'b1; end  //58
    386             1                        125     			10'b00_1001_1001 : begin  encoded_data_P = 8'b0011_1011; flag_p = 1'b1; end  //59
    387             1                        200     			10'b00_1110_1001 : begin  encoded_data_P = 8'b0011_1100; flag_p = 1'b1; end  //60
    388             1                        104     			10'b01_0001_1001 : begin  encoded_data_P = 8'b0011_1101; flag_p = 1'b1; end  //61
    389             1                        128     			10'b10_0001_1001 : begin  encoded_data_P = 8'b0011_1110; flag_p = 1'b1; end  //62
    390             1                        124     			10'b01_0100_1001 : begin  encoded_data_P = 8'b0011_1111; flag_p = 1'b1; end  //63
    391             1                        126     			10'b01_1000_0101 : begin  encoded_data_P = 8'b0100_0000; flag_p = 1'b1; end  //64
    392             1                         98     			10'b10_0010_0101 : begin  encoded_data_P = 8'b0100_0001; flag_p = 1'b1; end  //65
    393             1                        110     			10'b01_0010_0101 : begin  encoded_data_P = 8'b0100_0010; flag_p = 1'b1; end  //66
    394             1                        154     			10'b11_0001_0101 : begin  encoded_data_P = 8'b0100_0011; flag_p = 1'b1; end  //67
    395             1                        110     			10'b00_1010_0101 : begin  encoded_data_P = 8'b0100_0100; flag_p = 1'b1; end  //68
    396             1                        164     			10'b10_1001_0101 : begin  encoded_data_P = 8'b0100_0101; flag_p = 1'b1; end  //69
    397             1                        184     			10'b01_1001_0101 : begin  encoded_data_P = 8'b0100_0110; flag_p = 1'b1; end  //70
    398             1                        106     			10'b00_0111_0101 : begin  encoded_data_P = 8'b0100_0111; flag_p = 1'b1; end  //71
    399             1                         96     			10'b00_0110_0101 : begin  encoded_data_P = 8'b0100_1000; flag_p = 1'b1; end  //72
    400             1                        201     			10'b10_0101_0101 : begin  encoded_data_P = 8'b0100_1001; flag_p = 1'b1; end  //73
    401             1                      20012     			10'b01_0101_0101 : begin  encoded_data_P = 8'b0100_1010; flag_p = 1'b1; end  //74
    402             1                        168     			10'b11_0100_0101 : begin  encoded_data_P = 8'b0100_1011; flag_p = 1'b1; end  //75
    403             1                        139     			10'b00_1101_0101 : begin  encoded_data_P = 8'b0100_1100; flag_p = 1'b1; end  //76
    404             1                        160     			10'b10_1100_0101 : begin  encoded_data_P = 8'b0100_1101; flag_p = 1'b1; end  //77
    405             1                        154     			10'b01_1100_0101 : begin  encoded_data_P = 8'b0100_1110; flag_p = 1'b1; end  //78
    406             1                        106     			10'b10_1000_0101 : begin  encoded_data_P = 8'b0100_1111; flag_p = 1'b1; end  //79
    407             1                        108     			10'b10_0100_0101 : begin  encoded_data_P = 8'b0101_0000; flag_p = 1'b1; end  //80
    408             1                        181     			10'b10_0011_0101 : begin  encoded_data_P = 8'b0101_0001; flag_p = 1'b1; end  //81
    409             1                        152     			10'b01_0011_0101 : begin  encoded_data_P = 8'b0101_0010; flag_p = 1'b1; end  //82
    410             1                        175     			10'b11_0010_0101 : begin  encoded_data_P = 8'b0101_0011; flag_p = 1'b1; end  //83
    411             1                        165     			10'b00_1011_0101 : begin  encoded_data_P = 8'b0101_0100; flag_p = 1'b1; end  //84
    412             1                        157     			10'b10_1010_0101 : begin  encoded_data_P = 8'b0101_0101; flag_p = 1'b1; end  //85
    413             1                        188     			10'b01_1010_0101 : begin  encoded_data_P = 8'b0101_0110; flag_p = 1'b1; end  //86
    414             1                         92     			10'b00_0101_0101 : begin  encoded_data_P = 8'b0101_0111; flag_p = 1'b1; end  //87
    415             1                        134     			10'b00_1100_0101 : begin  encoded_data_P = 8'b0101_1000; flag_p = 1'b1; end  //88
    416             1                        168     			10'b10_0110_0101 : begin  encoded_data_P = 8'b0101_1001; flag_p = 1'b1; end  //89
    417             1                        168     			10'b01_0110_0101 : begin  encoded_data_P = 8'b0101_1010; flag_p = 1'b1; end  //90
    418             1                        104     			10'b00_1001_0101 : begin  encoded_data_P = 8'b0101_1011; flag_p = 1'b1; end  //91
    419             1                        168     			10'b00_1110_0101 : begin  encoded_data_P = 8'b0101_1100; flag_p = 1'b1; end  //92
    420             1                        108     			10'b01_0001_0101 : begin  encoded_data_P = 8'b0101_1101; flag_p = 1'b1; end  //93
    421             1                        110     			10'b10_0001_0101 : begin  encoded_data_P = 8'b0101_1110; flag_p = 1'b1; end  //94
    422             1                        102     			10'b01_0100_0101 : begin  encoded_data_P = 8'b0101_1111; flag_p = 1'b1; end  //95
    423             1                        113     			10'b01_1000_1100 : begin  encoded_data_P = 8'b0110_0000; flag_p = 1'b1; end  //96
    424             1                        104     			10'b10_0010_1100 : begin  encoded_data_P = 8'b0110_0001; flag_p = 1'b1; end  //97
    425             1                        126     			10'b01_0010_1100 : begin  encoded_data_P = 8'b0110_0010; flag_p = 1'b1; end  //98
    426             1                        140     			10'b11_0001_0011 : begin  encoded_data_P = 8'b0110_0011; flag_p = 1'b1; end  //99
    427             1                        104     			10'b00_1010_1100 : begin  encoded_data_P = 8'b0110_0100; flag_p = 1'b1; end  //100
    428             1                        100     			10'b10_1001_0011 : begin  encoded_data_P = 8'b0110_0101; flag_p = 1'b1; end  //101
    429             1                         99     			10'b01_1001_0011 : begin  encoded_data_P = 8'b0110_0110; flag_p = 1'b1; end  //102
    430             1                        120     			10'b00_0111_0011 : begin  encoded_data_P = 8'b0110_0111; flag_p = 1'b1; end  //103
    431             1                         84     			10'b00_0110_1100 : begin  encoded_data_P = 8'b0110_1000; flag_p = 1'b1; end  //104
    432             1                        124     			10'b10_0101_0011 : begin  encoded_data_P = 8'b0110_1001; flag_p = 1'b1; end  //105
    433             1                         94     			10'b01_0101_0011 : begin  encoded_data_P = 8'b0110_1010; flag_p = 1'b1; end  //106
    434             1                        103     			10'b11_0100_0011 : begin  encoded_data_P = 8'b0110_1011; flag_p = 1'b1; end  //107
    435             1                        138     			10'b00_1101_0011 : begin  encoded_data_P = 8'b0110_1100; flag_p = 1'b1; end  //108
    436             1                        120     			10'b10_1100_0011 : begin  encoded_data_P = 8'b0110_1101; flag_p = 1'b1; end  //109
    437             1                        108     			10'b01_1100_0011 : begin  encoded_data_P = 8'b0110_1110; flag_p = 1'b1; end  //110
    438             1                         96     			10'b10_1000_1100 : begin  encoded_data_P = 8'b0110_1111; flag_p = 1'b1; end  //111
    439             1                        124     			10'b10_0100_1100 : begin  encoded_data_P = 8'b0111_0000; flag_p = 1'b1; end  //112
    440             1                        112     			10'b10_0011_0011 : begin  encoded_data_P = 8'b0111_0001; flag_p = 1'b1; end  //113
    441             1                        106     			10'b01_0011_0011 : begin  encoded_data_P = 8'b0111_0010; flag_p = 1'b1; end  //114
    442             1                        124     			10'b11_0010_0011 : begin  encoded_data_P = 8'b0111_0011; flag_p = 1'b1; end  //115
    443             1                        126     			10'b00_1011_0011 : begin  encoded_data_P = 8'b0111_0100; flag_p = 1'b1; end  //116
    444             1                        108     			10'b10_1010_0011 : begin  encoded_data_P = 8'b0111_0101; flag_p = 1'b1; end  //117
    445             1                         90     			10'b01_1010_0011 : begin  encoded_data_P = 8'b0111_0110; flag_p = 1'b1; end  //118
    446             1                        102     			10'b00_0101_1100 : begin  encoded_data_P = 8'b0111_0111; flag_p = 1'b1; end  //119
    447             1                        100     			10'b00_1100_1100 : begin  encoded_data_P = 8'b0111_1000; flag_p = 1'b1; end  //120
    448             1                        120     			10'b10_0110_0011 : begin  encoded_data_P = 8'b0111_1001; flag_p = 1'b1; end  //121
    449             1                        120     			10'b01_0110_0011 : begin  encoded_data_P = 8'b0111_1010; flag_p = 1'b1; end  //122
    450             1                        110     			10'b00_1001_1100 : begin  encoded_data_P = 8'b0111_1011; flag_p = 1'b1; end  //123
    451             1                        150     			10'b00_1110_0011 : begin  encoded_data_P = 8'b0111_1100; flag_p = 1'b1; end  //124
    452             1                        118     			10'b01_0001_1100 : begin  encoded_data_P = 8'b0111_1101; flag_p = 1'b1; end  //125
    453             1                        134     			10'b10_0001_1100 : begin  encoded_data_P = 8'b0111_1110; flag_p = 1'b1; end  //126
    454             1                         86     			10'b01_0100_1100 : begin  encoded_data_P = 8'b0111_1111; flag_p = 1'b1; end  //127
    455             1                        126     			10'b01_1000_1101 : begin  encoded_data_P = 8'b1000_0000; flag_p = 1'b1; end  //128
    456             1                        114     			10'b10_0010_1101 : begin  encoded_data_P = 8'b1000_0001; flag_p = 1'b1; end  //129
    457             1                         86     			10'b01_0010_1101 : begin  encoded_data_P = 8'b1000_0010; flag_p = 1'b1; end  //130
    458             1                        118     			10'b11_0001_0010 : begin  encoded_data_P = 8'b1000_0011; flag_p = 1'b1; end  //131
    459             1                        106     			10'b00_1010_1101 : begin  encoded_data_P = 8'b1000_0100; flag_p = 1'b1; end  //132
    460             1                        118     			10'b10_1001_0010 : begin  encoded_data_P = 8'b1000_0101; flag_p = 1'b1; end  //133
    461             1                        130     			10'b01_1001_0010 : begin  encoded_data_P = 8'b1000_0110; flag_p = 1'b1; end  //134
    462             1                        132     			10'b00_0111_0010 : begin  encoded_data_P = 8'b1000_0111; flag_p = 1'b1; end  //135
    463             1                        112     			10'b00_0110_1101 : begin  encoded_data_P = 8'b1000_1000; flag_p = 1'b1; end  //136
    464             1                        110     			10'b10_0101_0010 : begin  encoded_data_P = 8'b1000_1001; flag_p = 1'b1; end  //137
    465             1                        136     			10'b01_0101_0010 : begin  encoded_data_P = 8'b1000_1010; flag_p = 1'b1; end  //138
    466             1                         94     			10'b11_0100_0010 : begin  encoded_data_P = 8'b1000_1011; flag_p = 1'b1; end  //139
    467             1                        114     			10'b00_1101_0010 : begin  encoded_data_P = 8'b1000_1100; flag_p = 1'b1; end  //140
    468             1                        128     			10'b10_1100_0010 : begin  encoded_data_P = 8'b1000_1101; flag_p = 1'b1; end  //141
    469             1                        106     			10'b01_1100_0010 : begin  encoded_data_P = 8'b1000_1110; flag_p = 1'b1; end  //142
    470             1                        127     			10'b10_1000_1101 : begin  encoded_data_P = 8'b1000_1111; flag_p = 1'b1; end  //143
    471             1                        114     			10'b10_0100_1101 : begin  encoded_data_P = 8'b1001_0000; flag_p = 1'b1; end  //144
    472             1                        106     			10'b10_0011_0010 : begin  encoded_data_P = 8'b1001_0001; flag_p = 1'b1; end  //145
    473             1                        137     			10'b01_0011_0010 : begin  encoded_data_P = 8'b1001_0010; flag_p = 1'b1; end  //146
    474             1                         76     			10'b11_0010_0010 : begin  encoded_data_P = 8'b1001_0011; flag_p = 1'b1; end  //147
    475             1                        114     			10'b00_1011_0010 : begin  encoded_data_P = 8'b1001_0100; flag_p = 1'b1; end  //148
    476             1                         76     			10'b10_1010_0010 : begin  encoded_data_P = 8'b1001_0101; flag_p = 1'b1; end  //149
    477             1                        130     			10'b01_1010_0010 : begin  encoded_data_P = 8'b1001_0110; flag_p = 1'b1; end  //150
    478             1                         98     			10'b00_0101_1101 : begin  encoded_data_P = 8'b1001_0111; flag_p = 1'b1; end  //151
    479             1                        122     			10'b00_1100_1101 : begin  encoded_data_P = 8'b1001_1000; flag_p = 1'b1; end  //152
    480             1                        116     			10'b10_0110_0010 : begin  encoded_data_P = 8'b1001_1001; flag_p = 1'b1; end  //153
    481             1                         98     			10'b01_0110_0010 : begin  encoded_data_P = 8'b1001_1010; flag_p = 1'b1; end  //154
    482             1                         92     			10'b00_1001_1101 : begin  encoded_data_P = 8'b1001_1011; flag_p = 1'b1; end  //155
    483             1                        126     			10'b00_1110_0010 : begin  encoded_data_P = 8'b1001_1100; flag_p = 1'b1; end  //156
    484             1                        104     			10'b01_0001_1101 : begin  encoded_data_P = 8'b1001_1101; flag_p = 1'b1; end  //157
    485             1                         94     			10'b10_0001_1101 : begin  encoded_data_P = 8'b1001_1110; flag_p = 1'b1; end  //158
    486             1                        132     			10'b01_0100_1101 : begin  encoded_data_P = 8'b1001_1111; flag_p = 1'b1; end  //159
    487             1                        120     			10'b01_1000_1010 : begin  encoded_data_P = 8'b1010_0000; flag_p = 1'b1; end  //160
    488             1                         98     			10'b10_0010_1010 : begin  encoded_data_P = 8'b1010_0001; flag_p = 1'b1; end  //161
    489             1                        102     			10'b01_0010_1010 : begin  encoded_data_P = 8'b1010_0010; flag_p = 1'b1; end  //162
    490             1                        168     			10'b11_0001_1010 : begin  encoded_data_P = 8'b1010_0011; flag_p = 1'b1; end  //163
    491             1                        124     			10'b00_1010_1010 : begin  encoded_data_P = 8'b1010_0100; flag_p = 1'b1; end  //164
    492             1                        159     			10'b10_1001_1010 : begin  encoded_data_P = 8'b1010_0101; flag_p = 1'b1; end  //165
    493             1                        156     			10'b01_1001_1010 : begin  encoded_data_P = 8'b1010_0110; flag_p = 1'b1; end  //166
    494             1                         92     			10'b00_0111_1010 : begin  encoded_data_P = 8'b1010_0111; flag_p = 1'b1; end  //167
    495             1                        110     			10'b00_0110_1010 : begin  encoded_data_P = 8'b1010_1000; flag_p = 1'b1; end  //168
    496             1                        165     			10'b10_0101_1010 : begin  encoded_data_P = 8'b1010_1001; flag_p = 1'b1; end  //169
    497             1                        149     			10'b01_0101_1010 : begin  encoded_data_P = 8'b1010_1010; flag_p = 1'b1; end  //170
    498             1                        170     			10'b11_0100_1010 : begin  encoded_data_P = 8'b1010_1011; flag_p = 1'b1; end  //171
    499             1                        170     			10'b00_1101_1010 : begin  encoded_data_P = 8'b1010_1100; flag_p = 1'b1; end  //172
    500             1                        193     			10'b10_1100_1010 : begin  encoded_data_P = 8'b1010_1101; flag_p = 1'b1; end  //173
    501             1                        163     			10'b01_1100_1010 : begin  encoded_data_P = 8'b1010_1110; flag_p = 1'b1; end  //174
    502             1                        112     			10'b10_1000_1010 : begin  encoded_data_P = 8'b1010_1111; flag_p = 1'b1; end  //175
    503             1                         90     			10'b10_0100_1010 : begin  encoded_data_P = 8'b1011_0000; flag_p = 1'b1; end  //176
    504             1                        166     			10'b10_0011_1010 : begin  encoded_data_P = 8'b1011_0001; flag_p = 1'b1; end  //177
    505             1                        166     			10'b01_0011_1010 : begin  encoded_data_P = 8'b1011_0010; flag_p = 1'b1; end  //178
    506             1                        191     			10'b11_0010_1010 : begin  encoded_data_P = 8'b1011_0011; flag_p = 1'b1; end  //179
    507             1                        148     			10'b00_1011_1010 : begin  encoded_data_P = 8'b1011_0100; flag_p = 1'b1; end  //180
    508             1                        157     			10'b10_1010_1010 : begin  encoded_data_P = 8'b1011_0101; flag_p = 1'b1; end  //181
    509             1                        166     			10'b01_1010_1010 : begin  encoded_data_P = 8'b1011_0110; flag_p = 1'b1; end  //182
    510             1                         98     			10'b00_0101_1010 : begin  encoded_data_P = 8'b1011_0111; flag_p = 1'b1; end  //183
    511             1                        108     			10'b00_1100_1010 : begin  encoded_data_P = 8'b1011_1000; flag_p = 1'b1; end  //184
    512             1                        191     			10'b10_0110_1010 : begin  encoded_data_P = 8'b1011_1001; flag_p = 1'b1; end  //185
    513             1                        181     			10'b01_0110_1010 : begin  encoded_data_P = 8'b1011_1010; flag_p = 1'b1; end  //186
    514             1                        128     			10'b00_1001_1010 : begin  encoded_data_P = 8'b1011_1011; flag_p = 1'b1; end  //187
    515             1                        165     			10'b00_1110_1010 : begin  encoded_data_P = 8'b1011_1100; flag_p = 1'b1; end  //188
    516             1                         98     			10'b01_0001_1010 : begin  encoded_data_P = 8'b1011_1101; flag_p = 1'b1; end  //189
    517             1                        132     			10'b10_0001_1010 : begin  encoded_data_P = 8'b1011_1110; flag_p = 1'b1; end  //190
    518             1                        124     			10'b01_0100_1010 : begin  encoded_data_P = 8'b1011_1111; flag_p = 1'b1; end  //191
    519             1                         94     			10'b01_1000_0110 : begin  encoded_data_P = 8'b1100_0000; flag_p = 1'b1; end  //192
    520             1                        132     			10'b10_0010_0110 : begin  encoded_data_P = 8'b1100_0001; flag_p = 1'b1; end  //193
    521             1                        106     			10'b01_0010_0110 : begin  encoded_data_P = 8'b1100_0010; flag_p = 1'b1; end  //194
    522             1                        156     			10'b11_0001_0110 : begin  encoded_data_P = 8'b1100_0011; flag_p = 1'b1; end  //195
    523             1                         90     			10'b00_1010_0110 : begin  encoded_data_P = 8'b1100_0100; flag_p = 1'b1; end  //196
    524             1                        140     			10'b10_1001_0110 : begin  encoded_data_P = 8'b1100_0101; flag_p = 1'b1; end  //197
    525             1                        180     			10'b01_1001_0110 : begin  encoded_data_P = 8'b1100_0110; flag_p = 1'b1; end  //198
    526             1                        130     			10'b00_0111_0110 : begin  encoded_data_P = 8'b1100_0111; flag_p = 1'b1; end  //199
    527             1                        122     			10'b00_0110_0110 : begin  encoded_data_P = 8'b1100_1000; flag_p = 1'b1; end  //200
    528             1                        173     			10'b10_0101_0110 : begin  encoded_data_P = 8'b1100_1001; flag_p = 1'b1; end  //201
    529             1                        172     			10'b01_0101_0110 : begin  encoded_data_P = 8'b1100_1010; flag_p = 1'b1; end  //202
    530             1                        165     			10'b11_0100_0110 : begin  encoded_data_P = 8'b1100_1011; flag_p = 1'b1; end  //203
    531             1                        143     			10'b00_1101_0110 : begin  encoded_data_P = 8'b1100_1100; flag_p = 1'b1; end  //204
    532             1                        177     			10'b10_1100_0110 : begin  encoded_data_P = 8'b1100_1101; flag_p = 1'b1; end  //205
    533             1                        162     			10'b01_1100_0110 : begin  encoded_data_P = 8'b1100_1110; flag_p = 1'b1; end  //206
    534             1                        110     			10'b10_1000_0110 : begin  encoded_data_P = 8'b1100_1111; flag_p = 1'b1; end  //207
    535             1                        108     			10'b10_0100_0110 : begin  encoded_data_P = 8'b1101_0000; flag_p = 1'b1; end  //208
    536             1                        165     			10'b10_0011_0110 : begin  encoded_data_P = 8'b1101_0001; flag_p = 1'b1; end  //209
    537             1                        185     			10'b01_0011_0110 : begin  encoded_data_P = 8'b1101_0010; flag_p = 1'b1; end  //210
    538             1                        175     			10'b11_0010_0110 : begin  encoded_data_P = 8'b1101_0011; flag_p = 1'b1; end  //211
    539             1                        171     			10'b00_1011_0110 : begin  encoded_data_P = 8'b1101_0100; flag_p = 1'b1; end  //212
    540             1                        141     			10'b10_1010_0110 : begin  encoded_data_P = 8'b1101_0101; flag_p = 1'b1; end  //213
    541             1                        193     			10'b01_1010_0110 : begin  encoded_data_P = 8'b1101_0110; flag_p = 1'b1; end  //214
    542             1                        108     			10'b00_0101_0110 : begin  encoded_data_P = 8'b1101_0111; flag_p = 1'b1; end  //215
    543             1                        114     			10'b00_1100_0110 : begin  encoded_data_P = 8'b1101_1000; flag_p = 1'b1; end  //216
    544             1                        157     			10'b10_0110_0110 : begin  encoded_data_P = 8'b1101_1001; flag_p = 1'b1; end  //217
    545             1                        171     			10'b01_0110_0110 : begin  encoded_data_P = 8'b1101_1010; flag_p = 1'b1; end  //218
    546             1                        120     			10'b00_1001_0110 : begin  encoded_data_P = 8'b1101_1011; flag_p = 1'b1; end  //219
    547             1                        183     			10'b00_1110_0110 : begin  encoded_data_P = 8'b1101_1100; flag_p = 1'b1; end  //220
    548             1                        104     			10'b01_0001_0110 : begin  encoded_data_P = 8'b1101_1101; flag_p = 1'b1; end  //221
    549             1                        100     			10'b10_0001_0110 : begin  encoded_data_P = 8'b1101_1110; flag_p = 1'b1; end  //222
    550             1                        134     			10'b01_0100_0110 : begin  encoded_data_P = 8'b1101_1111; flag_p = 1'b1; end  //223
    551             1                        126     			10'b01_1000_1110 : begin  encoded_data_P = 8'b1110_0000; flag_p = 1'b1; end  //224
    552             1                        124     			10'b10_0010_1110 : begin  encoded_data_P = 8'b1110_0001; flag_p = 1'b1; end  //225
    553             1                         82     			10'b01_0010_1110 : begin  encoded_data_P = 8'b1110_0010; flag_p = 1'b1; end  //226
    554             1                        118     			10'b11_0001_0001 : begin  encoded_data_P = 8'b1110_0011; flag_p = 1'b1; end  //227
    555             1                         98     			10'b00_1010_1110 : begin  encoded_data_P = 8'b1110_0100; flag_p = 1'b1; end  //228
    556             1                         82     			10'b10_1001_0001 : begin  encoded_data_P = 8'b1110_0101; flag_p = 1'b1; end  //229
    557             1                        112     			10'b01_1001_0001 : begin  encoded_data_P = 8'b1110_0110; flag_p = 1'b1; end  //230
    558             1                        108     			10'b00_0111_0001 : begin  encoded_data_P = 8'b1110_0111; flag_p = 1'b1; end  //231
    559             1                        136     			10'b00_0110_1110 : begin  encoded_data_P = 8'b1110_1000; flag_p = 1'b1; end  //232
    560             1                         90     			10'b10_0101_0001 : begin  encoded_data_P = 8'b1110_1001; flag_p = 1'b1; end  //233
    561             1                        106     			10'b01_0101_0001 : begin  encoded_data_P = 8'b1110_1010; flag_p = 1'b1; end  //234
    562             1                        108     			10'b11_0100_1000 : begin  encoded_data_P = 8'b1110_1011; flag_p = 1'b1; end  //235
    563             1                        136     			10'b00_1101_0001 : begin  encoded_data_P = 8'b1110_1100; flag_p = 1'b1; end  //236
    564             1                        114     			10'b10_1100_1000 : begin  encoded_data_P = 8'b1110_1101; flag_p = 1'b1; end  //237
    565             1                        110     			10'b01_1100_1000 : begin  encoded_data_P = 8'b1110_1110; flag_p = 1'b1; end  //238
    566             1                        124     			10'b10_1000_1110 : begin  encoded_data_P = 8'b1110_1111; flag_p = 1'b1; end  //239
    567             1                        103     			10'b10_0100_1110 : begin  encoded_data_P = 8'b1111_0000; flag_p = 1'b1; end  //240
    568             1                        104     			10'b10_0011_0001 : begin  encoded_data_P = 8'b1111_0001; flag_p = 1'b1; end  //241
    569             1                        106     			10'b01_0011_0001 : begin  encoded_data_P = 8'b1111_0010; flag_p = 1'b1; end  //242
    570             1                         86     			10'b11_0010_0001 : begin  encoded_data_P = 8'b1111_0011; flag_p = 1'b1; end  //243
    571             1                        112     			10'b00_1011_0001 : begin  encoded_data_P = 8'b1111_0100; flag_p = 1'b1; end  //244
    572             1                        128     			10'b10_1010_0001 : begin  encoded_data_P = 8'b1111_0101; flag_p = 1'b1; end  //245
    573             1                        104     			10'b01_1010_0001 : begin  encoded_data_P = 8'b1111_0110; flag_p = 1'b1; end  //246
    574             1                        100     			10'b00_0101_1110 : begin  encoded_data_P = 8'b1111_0111; flag_p = 1'b1; end  //247
    575             1                         96     			10'b00_1100_1110 : begin  encoded_data_P = 8'b1111_1000; flag_p = 1'b1; end  //248
    576             1                         94     			10'b10_0110_0001 : begin  encoded_data_P = 8'b1111_1001; flag_p = 1'b1; end  //249
    577             1                         84     			10'b01_0110_0001 : begin  encoded_data_P = 8'b1111_1010; flag_p = 1'b1; end  //250
    578             1                        112     			10'b00_1001_1110 : begin  encoded_data_P = 8'b1111_1011; flag_p = 1'b1; end  //251
    579             1                        128     			10'b00_1110_0001 : begin  encoded_data_P = 8'b1111_1100; flag_p = 1'b1; end  //252
    580             1                        120     			10'b01_0001_1110 : begin  encoded_data_P = 8'b1111_1101; flag_p = 1'b1; end  //253
    581             1                        100     			10'b10_0001_1110 : begin  encoded_data_P = 8'b1111_1110; flag_p = 1'b1; end  //254
    582             1                        100     			10'b01_0100_1110 : begin  encoded_data_P = 8'b1111_1111; flag_p = 1'b1; end  //255
    584             1                    ***0***     			10'b11_0000_1011 : begin  encoded_data_P = 8'b0001_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    585             1                    ***0***     			10'b11_0000_0110 : begin  encoded_data_P = 8'b0011_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    586             1                    ***0***     			10'b11_0000_1010 : begin  encoded_data_P = 8'b0101_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    587             1                    ***0***     			10'b11_0000_1100 : begin  encoded_data_P = 8'b0111_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    588             1                    ***0***     			10'b11_0000_1101 : begin  encoded_data_P = 8'b1001_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    589             1                    ***0***     			10'b11_0000_0101 : begin  encoded_data_P = 8'b1011_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    590             1                    ***0***     			10'b11_0000_1001 : begin  encoded_data_P = 8'b1101_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    591             1                          3     			10'b11_0000_0111 : begin  encoded_data_P = 8'b1111_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    592             1                    ***0***     			10'b00_0101_0111 : begin  encoded_data_P = 8'b1111_0111; flag_p = 1'b1; RxDataK_P = 1'b1; end
    593             1                          2     			10'b00_1001_0111 : begin  encoded_data_P = 8'b1111_1011; flag_p = 1'b1; RxDataK_P = 1'b1; end
    594             1                    ***0***     			10'b01_0001_0111 : begin  encoded_data_P = 8'b1111_1101; flag_p = 1'b1; RxDataK_P = 1'b1; end
    595             1                    ***0***     			10'b10_0001_0111 : begin  encoded_data_P = 8'b1111_1110; flag_p = 1'b1; RxDataK_P = 1'b1; end
    597             1                      62133     			default : begin 
Branch totals: 259 hits of 269 branches = 96.28%

------------------------------------IF Branch------------------------------------
    601                                    62133     Count coming in to IF
    601             1                      27298     					if(Data_in == 10'h0f3) begin
    606             1                      34835     			    else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    619                                   110000     Count coming in to IF
    619             1                         20     	if(!Rst_n)
    621             1                      54985     	else if(flag)
    623             1                      54995     	else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    629                                   110000     Count coming in to IF
    629             1                         20     	if(!Rst_n) begin
    635             1                     109980     	else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    636                                   109980     Count coming in to IF
    636             1                      31356     	   if(flag_n && flag_p)
    638             1                      78624     	   else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    642                                   109980     Count coming in to IF
    642             1                      54985         RxDataK        <= (flag)? RxDataK_P : RxDataK_N                        ;
    642             2                      54995         RxDataK        <= (flag)? RxDataK_P : RxDataK_N                        ;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         3         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/decode --

  File 8_10_decoding.v
----------------Focused Condition View-------------------
Line       601 Item    1  (Data_in == 243)
Condition totals: 1 of 1 input term covered = 100.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (Data_in == 243)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Data_in == 243)_0    -                             
  Row   2:          5  (Data_in == 243)_1    -                             

----------------Focused Condition View-------------------
Line       636 Item    1  (flag_n && flag_p)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      flag_n         Y
      flag_p         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  flag_n_0              -                             
  Row   2:          5  flag_n_1              flag_p                        
  Row   3:          5  flag_p_0              flag_n                        
  Row   4:          5  flag_p_1              flag_n                        


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PCS_U/PCS_RX_U/decode --

  File 8_10_decoding.v
-----------Focused Expression View (Bimodal)------------
Line       639 Item    1  ((~flag && flag_p) || (flag && flag_n))
Expression totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
        flag         Y
      flag_p         Y
      flag_n         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  flag_0                flag_p, ~(~flag && flag_p)         
 Row   2:           0           5  flag_1                ~(flag && flag_n), flag_n          
 Row   3:           5           0  flag_p_0              ~flag                              
 Row   4:           0           3  flag_p_1              ~flag                              
 Row   5:           5           0  flag_n_0              flag                               
 Row   6:           0           5  flag_n_1              flag                               

----------------Focused Expression View-----------------
Line       641 Item    1  (DecodeError_P & DecodeError_N)
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  DecodeError_P         Y
  DecodeError_N         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  DecodeError_P_0       DecodeError_N                 
  Row   2:          5  DecodeError_P_1       DecodeError_N                 
  Row   3:          5  DecodeError_N_0       DecodeError_P                 
  Row   4:          5  DecodeError_N_1       DecodeError_P                 

-----------Focused Expression View (Bimodal)------------
Line       642 Item    1  (flag? RxDataK_P: RxDataK_N)
Expression totals: 3 of 3 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage                  Hint
  -----------  --------  --------------------------------------  --------------
         flag         Y
    RxDataK_P         Y
    RxDataK_N         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  flag_0                -                                  
 Row   2:           0           5  flag_1                -                                  
 Row   3:           5           0  RxDataK_P_0           flag                               
 Row   4:           0           5  RxDataK_P_1           flag                               
 Row   5:           5           0  RxDataK_N_0           ~flag                              
 Row   6:           0           5  RxDataK_N_1           ~flag                              


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                    1131      1071        60    94.69%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/decode --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File 8_10_decoding.v
    1                                                module decoder(
    2                                                  	input 			    CLK           ,
    3                                                    input 			    Rst_n         ,
    4                                                    input     [9:0] Data_in       ,
    5                                                    output reg[7:0] Data_out      ,
    6                                                    output reg   		DecodeError   ,
    7                                                    output reg			DisparityError,
    8                                                    output reg      RxDataK
    9                                                );
    10                                               
    11                                               reg [9:0] temp;
    12                                               reg[7:0] encoded_data_N;
    13                                               reg[7:0] encoded_data_P;
    14                                               reg DecodeError_N,DecodeError_P;
    15                                               reg RxDataK_N , RxDataK_P;
    16                                               reg flag , flag_n , flag_p; 
    17                                               
    18              1                     110000     always @(posedge CLK or negedge Rst_n) begin
    19                                                 if (!Rst_n) begin
    20              1                         20         flag <= 1'b0;
    21              1                         20     	  temp <= 10'b0; // cause decode error 
    22                                                 end else begin
    23              1                     109980         flag <= ~flag;
    24              1                     109980     	temp <= Data_in;
    25                                                 end
    26                                               end 
    27                                               
    28              1                      57189     always @(*) begin
    29              1                      57189     		RxDataK_N = 1'b0;
    30              1                      57189     		DecodeError_N = 1'b0;
    31              1                      57189     		flag_n = 1'b0 ;
    32                                               
    33                                               		      case(temp) 
    34              1                         40     		      	10'b10_0111_0100 : begin encoded_data_N =  8'b0000_0000; flag_n = 1'b1; end //0
    34              2                         40     
    35              1                         41     		      	10'b01_1101_0100 : begin encoded_data_N =  8'b0000_0001; flag_n = 1'b1; end //1
    35              2                         41     
    36              1                         35     		      	10'b10_1101_0100 : begin encoded_data_N =  8'b0000_0010; flag_n = 1'b1; end //2
    36              2                         35     
    37              1                         56     		      	10'b11_0001_1011 : begin encoded_data_N =  8'b0000_0011; flag_n = 1'b1; end //3
    37              2                         56     
    38              1                         39     		      	10'b11_0101_0100 : begin encoded_data_N =  8'b0000_0100; flag_n = 1'b1; end //4
    38              2                         39     
    39              1                         39     		      	10'b10_1001_1011 : begin encoded_data_N =  8'b0000_0101; flag_n = 1'b1; end //5
    39              2                         39     
    40              1                         46     		      	10'b01_1001_1011 : begin encoded_data_N =  8'b0000_0110; flag_n = 1'b1; end //6
    40              2                         46     
    41              1                         51     		      	10'b11_1000_1011 : begin encoded_data_N =  8'b0000_0111; flag_n = 1'b1; end //7
    41              2                         51     
    42              1                         40     		      	10'b11_1001_0100 : begin encoded_data_N =  8'b0000_1000; flag_n = 1'b1; end //8
    42              2                         40     
    43              1                         60     		      	10'b10_0101_1011 : begin encoded_data_N =  8'b0000_1001; flag_n = 1'b1; end //9
    43              2                         60     
    44              1                         43     		      	10'b01_0101_1011 : begin encoded_data_N =  8'b0000_1010; flag_n = 1'b1; end //10
    44              2                         43     
    45              1                         45     		      	10'b11_0100_1011 : begin encoded_data_N =  8'b0000_1011; flag_n = 1'b1; end //11
    45              2                         45     
    46              1                         49     		      	10'b00_1101_1011 : begin encoded_data_N =  8'b0000_1100; flag_n = 1'b1; end //12
    46              2                         49     
    47              1                         44     		      	10'b10_1100_1011 : begin encoded_data_N =  8'b0000_1101; flag_n = 1'b1; end //13
    47              2                         44     
    48              1                         60     		      	10'b01_1100_1011 : begin encoded_data_N =  8'b0000_1110; flag_n = 1'b1; end //14
    48              2                         60     
    49              1                         43     		      	10'b01_0111_0100 : begin encoded_data_N =  8'b0000_1111; flag_n = 1'b1; end //15
    49              2                         43     
    50              1                         47     		      	10'b01_1011_0100 : begin encoded_data_N =  8'b0001_0000; flag_n = 1'b1; end //16
    50              2                         47     
    51              1                         47     		      	10'b10_0011_1011 : begin encoded_data_N =  8'b0001_0001; flag_n = 1'b1; end //17
    51              2                         47     
    52              1                         48     		      	10'b01_0011_1011 : begin encoded_data_N =  8'b0001_0010; flag_n = 1'b1; end //18
    52              2                         48     
    53              1                         41     		      	10'b11_0010_1011 : begin encoded_data_N =  8'b0001_0011; flag_n = 1'b1; end //19
    53              2                         41     
    54              1                         34     		      	10'b00_1011_1011 : begin encoded_data_N =  8'b0001_0100; flag_n = 1'b1; end //20
    54              2                         34     
    55              1                         59     		      	10'b10_1010_1011 : begin encoded_data_N =  8'b0001_0101; flag_n = 1'b1; end //21
    55              2                         59     
    56              1                         44     		      	10'b01_1010_1011 : begin encoded_data_N =  8'b0001_0110; flag_n = 1'b1; end //22
    56              2                         44     
    57              1                         47     		      	10'b11_1010_0100 : begin encoded_data_N =  8'b0001_0111; flag_n = 1'b1; end //23
    57              2                         47     
    58              1                         53     		      	10'b11_0011_0100 : begin encoded_data_N =  8'b0001_1000; flag_n = 1'b1; end //24
    58              2                         53     
    59              1                         39     		      	10'b10_0110_1011 : begin encoded_data_N =  8'b0001_1001; flag_n = 1'b1; end //25
    59              2                         39     
    60              1                         54     		      	10'b01_0110_1011 : begin encoded_data_N =  8'b0001_1010; flag_n = 1'b1; end //26
    60              2                         54     
    61              1                         50     		      	10'b11_0110_0100 : begin encoded_data_N =  8'b0001_1011; flag_n = 1'b1; end //27
    61              2                         50     
    62              1                         44     		      	10'b00_1110_1011 : begin encoded_data_N =  8'b0001_1100; flag_n = 1'b1; end //28
    62              2                         44     
    63              1                         42     		      	10'b10_1110_0100 : begin encoded_data_N =  8'b0001_1101; flag_n = 1'b1; end //29
    63              2                         42     
    64              1                         38     		      	10'b01_1110_0100 : begin encoded_data_N =  8'b0001_1110; flag_n = 1'b1; end //30
    64              2                         38     
    65              1                         48     		      	10'b10_1011_0100 : begin encoded_data_N =  8'b0001_1111; flag_n = 1'b1; end //31
    65              2                         48     
    66              1                         51     		      	10'b10_0111_1001 : begin encoded_data_N =  8'b0010_0000; flag_n = 1'b1; end //32
    66              2                         51     
    67              1                         36     		      	10'b01_1101_1001 : begin encoded_data_N =  8'b0010_0001; flag_n = 1'b1; end //33
    67              2                         36     
    68              1                         48     		      	10'b10_1101_1001 : begin encoded_data_N =  8'b0010_0010; flag_n = 1'b1; end //34
    68              2                         48     
    69              1                        101     		      	10'b11_0001_1001 : begin encoded_data_N =  8'b0010_0011; flag_n = 1'b1; end //35
    69              2                        101     
    70              1                         45     		      	10'b11_0101_1001 : begin encoded_data_N =  8'b0010_0100; flag_n = 1'b1; end //36
    70              2                         45     
    71              1                         94     		      	10'b10_1001_1001 : begin encoded_data_N =  8'b0010_0101; flag_n = 1'b1; end //37
    71              2                         94     
    72              1                         99     		      	10'b01_1001_1001 : begin encoded_data_N =  8'b0010_0110; flag_n = 1'b1; end //38
    72              2                         99     
    73              1                         44     		      	10'b11_1000_1001 : begin encoded_data_N =  8'b0010_0111; flag_n = 1'b1; end //39
    73              2                         44     
    74              1                         49     		      	10'b11_1001_1001 : begin encoded_data_N =  8'b0010_1000; flag_n = 1'b1; end //40
    74              2                         49     
    75              1                        117     		      	10'b10_0101_1001 : begin encoded_data_N =  8'b0010_1001; flag_n = 1'b1; end //41
    75              2                        117     
    76              1                         83     		      	10'b01_0101_1001 : begin encoded_data_N =  8'b0010_1010; flag_n = 1'b1; end //42
    76              2                         83     
    77              1                         97     		      	10'b11_0100_1001 : begin encoded_data_N =  8'b0010_1011; flag_n = 1'b1; end //43
    77              2                         97     
    78              1                         89     		      	10'b00_1101_1001 : begin encoded_data_N =  8'b0010_1100; flag_n = 1'b1; end //44
    78              2                         89     
    79              1                         91     		      	10'b10_1100_1001 : begin encoded_data_N =  8'b0010_1101; flag_n = 1'b1; end //45
    79              2                         91     
    80              1                        101     		      	10'b01_1100_1001 : begin encoded_data_N =  8'b0010_1110; flag_n = 1'b1; end //46
    80              2                        101     
    81              1                         29     		      	10'b01_0111_1001 : begin encoded_data_N =  8'b0010_1111; flag_n = 1'b1; end //47
    81              2                         29     
    82              1                         57     		      	10'b01_1011_1001 : begin encoded_data_N =  8'b0011_0000; flag_n = 1'b1; end //48
    82              2                         57     
    83              1                         96     		      	10'b10_0011_1001 : begin encoded_data_N =  8'b0011_0001; flag_n = 1'b1; end //49
    83              2                         96     
    84              1                        116     		      	10'b01_0011_1001 : begin encoded_data_N =  8'b0011_0010; flag_n = 1'b1; end //50
    84              2                        116     
    85              1                        118     		      	10'b11_0010_1001 : begin encoded_data_N =  8'b0011_0011; flag_n = 1'b1; end //51
    85              2                        118     
    86              1                         97     		      	10'b00_1011_1001 : begin encoded_data_N =  8'b0011_0100; flag_n = 1'b1; end //52
    86              2                         97     
    87              1                        105     		      	10'b10_1010_1001 : begin encoded_data_N =  8'b0011_0101; flag_n = 1'b1; end //53
    87              2                        105     
    88              1                        109     		      	10'b01_1010_1001 : begin encoded_data_N =  8'b0011_0110; flag_n = 1'b1; end //54
    88              2                        109     
    89              1                         34     		      	10'b11_1010_1001 : begin encoded_data_N =  8'b0011_0111; flag_n = 1'b1; end //55
    89              2                         34     
    90              1                         29     		      	10'b11_0011_1001 : begin encoded_data_N =  8'b0011_1000; flag_n = 1'b1; end //56
    90              2                         29     
    91              1                         91     		      	10'b10_0110_1001 : begin encoded_data_N =  8'b0011_1001; flag_n = 1'b1; end //57
    91              2                         91     
    92              1                        108     		      	10'b01_0110_1001 : begin encoded_data_N =  8'b0011_1010; flag_n = 1'b1; end //58
    92              2                        108     
    93              1                         52     		      	10'b11_0110_1001 : begin encoded_data_N =  8'b0011_1011; flag_n = 1'b1; end //59
    93              2                         52     
    94              1                        120     		      	10'b00_1110_1001 : begin encoded_data_N =  8'b0011_1100; flag_n = 1'b1; end //60
    94              2                        120     
    95              1                         42     		      	10'b10_1110_1001 : begin encoded_data_N =  8'b0011_1101; flag_n = 1'b1; end //61
    95              2                         42     
    96              1                         38     		      	10'b01_1110_1001 : begin encoded_data_N =  8'b0011_1110; flag_n = 1'b1; end //62
    96              2                         38     
    97              1                         38     		      	10'b10_1011_1001 : begin encoded_data_N =  8'b0011_1111; flag_n = 1'b1; end //63
    97              2                         38     
    98              1                         46     		      	10'b10_0111_0101 : begin encoded_data_N =  8'b0100_0000; flag_n = 1'b1; end //64
    98              2                         46     
    99              1                         44     		      	10'b01_1101_0101 : begin encoded_data_N =  8'b0100_0001; flag_n = 1'b1; end //65
    99              2                         44     
    100             1                         45     		      	10'b10_1101_0101 : begin encoded_data_N =  8'b0100_0010; flag_n = 1'b1; end //66
    100             2                         45     
    101             1                         90     		      	10'b11_0001_0101 : begin encoded_data_N =  8'b0100_0011; flag_n = 1'b1; end //67
    101             2                         90     
    102             1                         48     		      	10'b11_0101_0101 : begin encoded_data_N =  8'b0100_0100; flag_n = 1'b1; end //68
    102             2                         48     
    103             1                        100     		      	10'b10_1001_0101 : begin encoded_data_N =  8'b0100_0101; flag_n = 1'b1; end //69
    103             2                        100     
    104             1                        106     		      	10'b01_1001_0101 : begin encoded_data_N =  8'b0100_0110; flag_n = 1'b1; end //70
    104             2                        106     
    105             1                         39     		      	10'b11_1000_0101 : begin encoded_data_N =  8'b0100_0111; flag_n = 1'b1; end //71
    105             2                         39     
    106             1                         39     		      	10'b11_1001_0101 : begin encoded_data_N =  8'b0100_1000; flag_n = 1'b1; end //72
    106             2                         39     
    107             1                        115     		      	10'b10_0101_0101 : begin encoded_data_N =  8'b0100_1001; flag_n = 1'b1; end //73
    107             2                        115     
    108             1                      10021     		      	10'b01_0101_0101 : begin encoded_data_N =  8'b0100_1010; flag_n = 1'b1; end //74
    108             2                      10021     
    109             1                         93     		      	10'b11_0100_0101 : begin encoded_data_N =  8'b0100_1011; flag_n = 1'b1; end //75
    109             2                         93     
    110             1                         85     		      	10'b00_1101_0101 : begin encoded_data_N =  8'b0100_1100; flag_n = 1'b1; end //76
    110             2                         85     
    111             1                         90     		      	10'b10_1100_0101 : begin encoded_data_N =  8'b0100_1101; flag_n = 1'b1; end //77
    111             2                         90     
    112             1                         90     		      	10'b01_1100_0101 : begin encoded_data_N =  8'b0100_1110; flag_n = 1'b1; end //78
    112             2                         90     
    113             1                         50     		      	10'b01_0111_0101 : begin encoded_data_N =  8'b0100_1111; flag_n = 1'b1; end //79
    113             2                         50     
    114             1                         33     		      	10'b01_1011_0101 : begin encoded_data_N =  8'b0101_0000; flag_n = 1'b1; end //80
    114             2                         33     
    115             1                        105     		      	10'b10_0011_0101 : begin encoded_data_N =  8'b0101_0001; flag_n = 1'b1; end //81
    115             2                        105     
    116             1                         89     		      	10'b01_0011_0101 : begin encoded_data_N =  8'b0101_0010; flag_n = 1'b1; end //82
    116             2                         89     
    117             1                        103     		      	10'b11_0010_0101 : begin encoded_data_N =  8'b0101_0011; flag_n = 1'b1; end //83
    117             2                        103     
    118             1                         97     		      	10'b00_1011_0101 : begin encoded_data_N =  8'b0101_0100; flag_n = 1'b1; end //84
    118             2                         97     
    119             1                         92     		      	10'b10_1010_0101 : begin encoded_data_N =  8'b0101_0101; flag_n = 1'b1; end //85
    119             2                         92     
    120             1                        106     		      	10'b01_1010_0101 : begin encoded_data_N =  8'b0101_0110; flag_n = 1'b1; end //86
    120             2                        106     
    121             1                         49     		      	10'b11_1010_0101 : begin encoded_data_N =  8'b0101_0111; flag_n = 1'b1; end //87
    121             2                         49     
    122             1                         42     		      	10'b11_0011_0101 : begin encoded_data_N =  8'b0101_1000; flag_n = 1'b1; end //88
    122             2                         42     
    123             1                         99     		      	10'b10_0110_0101 : begin encoded_data_N =  8'b0101_1001; flag_n = 1'b1; end //89
    123             2                         99     
    124             1                         98     		      	10'b01_0110_0101 : begin encoded_data_N =  8'b0101_1010; flag_n = 1'b1; end //90
    124             2                         98     
    125             1                         35     		      	10'b11_0110_0101 : begin encoded_data_N =  8'b0101_1011; flag_n = 1'b1; end //91
    125             2                         35     
    126             1                        101     		      	10'b00_1110_0101 : begin encoded_data_N =  8'b0101_1100; flag_n = 1'b1; end //92
    126             2                        101     
    127             1                         33     		      	10'b10_1110_0101 : begin encoded_data_N =  8'b0101_1101; flag_n = 1'b1; end //93
    127             2                         33     
    128             1                         35     		      	10'b01_1110_0101 : begin encoded_data_N =  8'b0101_1110; flag_n = 1'b1; end //94
    128             2                         35     
    129             1                         39     		      	10'b10_1011_0101 : begin encoded_data_N =  8'b0101_1111; flag_n = 1'b1; end //95
    129             2                         39     
    130             1                         41     		      	10'b10_0111_0011 : begin encoded_data_N =  8'b0110_0000; flag_n = 1'b1; end //96
    130             2                         41     
    131             1                         52     		      	10'b01_1101_0011 : begin encoded_data_N =  8'b0110_0001; flag_n = 1'b1; end //97
    131             2                         52     
    132             1                         46     		      	10'b10_1101_0011 : begin encoded_data_N =  8'b0110_0010; flag_n = 1'b1; end //98
    132             2                         46     
    133             1                         48     		      	10'b11_0001_1100 : begin encoded_data_N =  8'b0110_0011; flag_n = 1'b1; end //99
    133             2                         48     
    134             1                         39     		      	10'b11_0101_0011 : begin encoded_data_N =  8'b0110_0100; flag_n = 1'b1; end //100
    134             2                         39     
    135             1                         45     		      	10'b10_1001_1100 : begin encoded_data_N =  8'b0110_0101; flag_n = 1'b1; end //101
    135             2                         45     
    136             1                         35     		      	10'b01_1001_1100 : begin encoded_data_N =  8'b0110_0110; flag_n = 1'b1; end //102
    136             2                         35     
    137             1                         47     		      	10'b11_1000_1100 : begin encoded_data_N =  8'b0110_0111; flag_n = 1'b1; end //103
    137             2                         47     
    138             1                         43     		      	10'b11_1001_0011 : begin encoded_data_N =  8'b0110_1000; flag_n = 1'b1; end //104
    138             2                         43     
    139             1                         49     		      	10'b10_0101_1100 : begin encoded_data_N =  8'b0110_1001; flag_n = 1'b1; end //105
    139             2                         49     
    140             1                         38     		      	10'b01_0101_1100 : begin encoded_data_N =  8'b0110_1010; flag_n = 1'b1; end //106
    140             2                         38     
    141             1                         37     		      	10'b11_0100_1100 : begin encoded_data_N =  8'b0110_1011; flag_n = 1'b1; end //107
    141             2                         37     
    142             1                         42     		      	10'b00_1101_1100 : begin encoded_data_N =  8'b0110_1100; flag_n = 1'b1; end //108
    142             2                         42     
    143             1                         49     		      	10'b10_1100_1100 : begin encoded_data_N =  8'b0110_1101; flag_n = 1'b1; end //109
    143             2                         49     
    144             1                         57     		      	10'b01_1100_1100 : begin encoded_data_N =  8'b0110_1110; flag_n = 1'b1; end //110
    144             2                         57     
    145             1                         50     		      	10'b01_0111_0011 : begin encoded_data_N =  8'b0110_1111; flag_n = 1'b1; end //111
    145             2                         50     
    146             1                         54     		      	10'b01_1011_0011 : begin encoded_data_N =  8'b0111_0000; flag_n = 1'b1; end //112
    146             2                         54     
    147             1                         48     		      	10'b10_0011_1100 : begin encoded_data_N =  8'b0111_0001; flag_n = 1'b1; end //113
    147             2                         48     
    148             1                         39     		      	10'b01_0011_1100 : begin encoded_data_N =  8'b0111_0010; flag_n = 1'b1; end //114
    148             2                         39     
    149             1                         43     		      	10'b11_0010_1100 : begin encoded_data_N =  8'b0111_0011; flag_n = 1'b1; end //115
    149             2                         43     
    150             1                         46     		      	10'b00_1011_1100 : begin encoded_data_N =  8'b0111_0100; flag_n = 1'b1; end //116
    150             2                         46     
    151             1                         42     		      	10'b10_1010_1100 : begin encoded_data_N =  8'b0111_0101; flag_n = 1'b1; end //117
    151             2                         42     
    152             1                         49     		      	10'b01_1010_1100 : begin encoded_data_N =  8'b0111_0110; flag_n = 1'b1; end //118
    152             2                         49     
    153             1                         42     		      	10'b11_1010_0011 : begin encoded_data_N =  8'b0111_0111; flag_n = 1'b1; end //119
    153             2                         42     
    154             1                         49     		      	10'b11_0011_0011 : begin encoded_data_N =  8'b0111_1000; flag_n = 1'b1; end //120
    154             2                         49     
    155             1                         35     		      	10'b10_0110_1100 : begin encoded_data_N =  8'b0111_1001; flag_n = 1'b1; end //121
    155             2                         35     
    156             1                         47     		      	10'b01_0110_1100 : begin encoded_data_N =  8'b0111_1010; flag_n = 1'b1; end //122
    156             2                         47     
    157             1                         40     		      	10'b11_0110_0011 : begin encoded_data_N =  8'b0111_1011; flag_n = 1'b1; end //123
    157             2                         40     
    158             1                         38     		      	10'b00_1110_1100 : begin encoded_data_N =  8'b0111_1100; flag_n = 1'b1; end //124
    158             2                         38     
    159             1                         46     		      	10'b10_1110_0011 : begin encoded_data_N =  8'b0111_1101; flag_n = 1'b1; end //125
    159             2                         46     
    160             1                         39     		      	10'b01_1110_0011 : begin encoded_data_N =  8'b0111_1110; flag_n = 1'b1; end //126
    160             2                         39     
    161             1                         50     		      	10'b10_1011_0011 : begin encoded_data_N =  8'b0111_1111; flag_n = 1'b1; end //127
    161             2                         50     
    162             1                         35     		      	10'b10_0111_0010 : begin encoded_data_N =  8'b1000_0000; flag_n = 1'b1; end //128
    162             2                         35     
    163             1                         38     		      	10'b01_1101_0010 : begin encoded_data_N =  8'b1000_0001; flag_n = 1'b1; end //129
    163             2                         38     
    164             1                         44     		      	10'b10_1101_0010 : begin encoded_data_N =  8'b1000_0010; flag_n = 1'b1; end //130
    164             2                         44     
    165             1                         44     		      	10'b11_0001_1101 : begin encoded_data_N =  8'b1000_0011; flag_n = 1'b1; end //131
    165             2                         44     
    166             1                         53     		      	10'b11_0101_0010 : begin encoded_data_N =  8'b1000_0100; flag_n = 1'b1; end //132
    166             2                         53     
    167             1                         57     		      	10'b10_1001_1101 : begin encoded_data_N =  8'b1000_0101; flag_n = 1'b1; end //133
    167             2                         57     
    168             1                         42     		      	10'b01_1001_1101 : begin encoded_data_N =  8'b1000_0110; flag_n = 1'b1; end //134
    168             2                         42     
    169             1                         41     		      	10'b11_1000_1101 : begin encoded_data_N =  8'b1000_0111; flag_n = 1'b1; end //135
    169             2                         41     
    170             1                         61     		      	10'b11_1001_0010 : begin encoded_data_N =  8'b1000_1000; flag_n = 1'b1; end //136
    170             2                         61     
    171             1                         43     		      	10'b10_0101_1101 : begin encoded_data_N =  8'b1000_1001; flag_n = 1'b1; end //137
    171             2                         43     
    172             1                         35     		      	10'b01_0101_1101 : begin encoded_data_N =  8'b1000_1010; flag_n = 1'b1; end //138
    172             2                         35     
    173             1                         54     		      	10'b11_0100_1101 : begin encoded_data_N =  8'b1000_1011; flag_n = 1'b1; end //139
    173             2                         54     
    174             1                         43     		      	10'b00_1101_1101 : begin encoded_data_N =  8'b1000_1100; flag_n = 1'b1; end //140
    174             2                         43     
    175             1                         40     		      	10'b10_1100_1101 : begin encoded_data_N =  8'b1000_1101; flag_n = 1'b1; end //141
    175             2                         40     
    176             1                         41     		      	10'b01_1100_1101 : begin encoded_data_N =  8'b1000_1110; flag_n = 1'b1; end //142
    176             2                         41     
    177             1                         33     		      	10'b01_0111_0010 : begin encoded_data_N =  8'b1000_1111; flag_n = 1'b1; end //143
    177             2                         33     
    178             1                         47     		      	10'b01_1011_0010 : begin encoded_data_N =  8'b1001_0000; flag_n = 1'b1; end //144
    178             2                         47     
    179             1                         40     		      	10'b10_0011_1101 : begin encoded_data_N =  8'b1001_0001; flag_n = 1'b1; end //145
    179             2                         40     
    180             1                         55     		      	10'b01_0011_1101 : begin encoded_data_N =  8'b1001_0010; flag_n = 1'b1; end //146
    180             2                         55     
    181             1                         45     		      	10'b11_0010_1101 : begin encoded_data_N =  8'b1001_0011; flag_n = 1'b1; end //147
    181             2                         45     
    182             1                         45     		      	10'b00_1011_1101 : begin encoded_data_N =  8'b1001_0100; flag_n = 1'b1; end //148
    182             2                         45     
    183             1                         47     		      	10'b10_1010_1101 : begin encoded_data_N =  8'b1001_0101; flag_n = 1'b1; end //149
    183             2                         47     
    184             1                         45     		      	10'b01_1010_1101 : begin encoded_data_N =  8'b1001_0110; flag_n = 1'b1; end //150
    184             2                         45     
    185             1                         33     		      	10'b11_1010_0010 : begin encoded_data_N =  8'b1001_0111; flag_n = 1'b1; end //151
    185             2                         33     
    186             1                         47     		      	10'b11_0011_0010 : begin encoded_data_N =  8'b1001_1000; flag_n = 1'b1; end //152
    186             2                         47     
    187             1                         45     		      	10'b10_0110_1101 : begin encoded_data_N =  8'b1001_1001; flag_n = 1'b1; end //153
    187             2                         45     
    188             1                         36     		      	10'b01_0110_1101 : begin encoded_data_N =  8'b1001_1010; flag_n = 1'b1; end //154
    188             2                         36     
    189             1                         37     		      	10'b11_0110_0010 : begin encoded_data_N =  8'b1001_1011; flag_n = 1'b1; end //155
    189             2                         37     
    190             1                         55     		      	10'b00_1110_1101 : begin encoded_data_N =  8'b1001_1100; flag_n = 1'b1; end //156
    190             2                         55     
    191             1                         18     		      	10'b10_1110_0010 : begin encoded_data_N =  8'b1001_1101; flag_n = 1'b1; end //157
    191             2                         18     
    192             1                         53     		      	10'b01_1110_0010 : begin encoded_data_N =  8'b1001_1110; flag_n = 1'b1; end //158
    192             2                         53     
    193             1                         49     		      	10'b10_1011_0010 : begin encoded_data_N =  8'b1001_1111; flag_n = 1'b1; end //159
    193             2                         49     
    194             1                         46     		      	10'b10_0111_1010 : begin encoded_data_N =  8'b1010_0000; flag_n = 1'b1; end //160
    194             2                         46     
    195             1                         48     		      	10'b01_1101_1010 : begin encoded_data_N =  8'b1010_0001; flag_n = 1'b1; end //161
    195             2                         48     
    196             1                         38     		      	10'b10_1101_1010 : begin encoded_data_N =  8'b1010_0010; flag_n = 1'b1; end //162
    196             2                         38     
    197             1                         95     		      	10'b11_0001_1010 : begin encoded_data_N =  8'b1010_0011; flag_n = 1'b1; end //163
    197             2                         95     
    198             1                         38     		      	10'b11_0101_1010 : begin encoded_data_N =  8'b1010_0100; flag_n = 1'b1; end //164
    198             2                         38     
    199             1                         94     		      	10'b10_1001_1010 : begin encoded_data_N =  8'b1010_0101; flag_n = 1'b1; end //165
    199             2                         94     
    200             1                         96     		      	10'b01_1001_1010 : begin encoded_data_N =  8'b1010_0110; flag_n = 1'b1; end //166
    200             2                         96     
    201             1                         41     		      	10'b11_1000_1010 : begin encoded_data_N =  8'b1010_0111; flag_n = 1'b1; end //167
    201             2                         41     
    202             1                         38     		      	10'b11_1001_1010 : begin encoded_data_N =  8'b1010_1000; flag_n = 1'b1; end //168
    202             2                         38     
    203             1                         96     		      	10'b10_0101_1010 : begin encoded_data_N =  8'b1010_1001; flag_n = 1'b1; end //169
    203             2                         96     
    204             1                         85     		      	10'b01_0101_1010 : begin encoded_data_N =  8'b1010_1010; flag_n = 1'b1; end //170
    204             2                         85     
    205             1                         99     		      	10'b11_0100_1010 : begin encoded_data_N =  8'b1010_1011; flag_n = 1'b1; end //171
    205             2                         99     
    206             1                        100     		      	10'b00_1101_1010 : begin encoded_data_N =  8'b1010_1100; flag_n = 1'b1; end //172
    206             2                        100     
    207             1                        111     		      	10'b10_1100_1010 : begin encoded_data_N =  8'b1010_1101; flag_n = 1'b1; end //173
    207             2                        111     
    208             1                         99     		      	10'b01_1100_1010 : begin encoded_data_N =  8'b1010_1110; flag_n = 1'b1; end //174
    208             2                         99     
    209             1                         44     		      	10'b01_0111_1010 : begin encoded_data_N =  8'b1010_1111; flag_n = 1'b1; end //175
    209             2                         44     
    210             1                         37     		      	10'b01_1011_1010 : begin encoded_data_N =  8'b1011_0000; flag_n = 1'b1; end //176
    210             2                         37     
    211             1                         97     		      	10'b10_0011_1010 : begin encoded_data_N =  8'b1011_0001; flag_n = 1'b1; end //177
    211             2                         97     
    212             1                         98     		      	10'b01_0011_1010 : begin encoded_data_N =  8'b1011_0010; flag_n = 1'b1; end //178
    212             2                         98     
    213             1                        106     		      	10'b11_0010_1010 : begin encoded_data_N =  8'b1011_0011; flag_n = 1'b1; end //179
    213             2                        106     
    214             1                         92     		      	10'b00_1011_1010 : begin encoded_data_N =  8'b1011_0100; flag_n = 1'b1; end //180
    214             2                         92     
    215             1                        104     		      	10'b10_1010_1010 : begin encoded_data_N =  8'b1011_0101; flag_n = 1'b1; end //181
    215             2                        104     
    216             1                        100     		      	10'b01_1010_1010 : begin encoded_data_N =  8'b1011_0110; flag_n = 1'b1; end //182
    216             2                        100     
    217             1                         44     		      	10'b11_1010_1010 : begin encoded_data_N =  8'b1011_0111; flag_n = 1'b1; end //183
    217             2                         44     
    218             1                         39     		      	10'b11_0011_1010 : begin encoded_data_N =  8'b1011_1000; flag_n = 1'b1; end //184
    218             2                         39     
    219             1                        111     		      	10'b10_0110_1010 : begin encoded_data_N =  8'b1011_1001; flag_n = 1'b1; end //185
    219             2                        111     
    220             1                        107     		      	10'b01_0110_1010 : begin encoded_data_N =  8'b1011_1010; flag_n = 1'b1; end //186
    220             2                        107     
    221             1                         53     		      	10'b11_0110_1010 : begin encoded_data_N =  8'b1011_1011; flag_n = 1'b1; end //187
    221             2                         53     
    222             1                         92     		      	10'b00_1110_1010 : begin encoded_data_N =  8'b1011_1100; flag_n = 1'b1; end //188
    222             2                         92     
    223             1                         50     		      	10'b10_1110_1010 : begin encoded_data_N =  8'b1011_1101; flag_n = 1'b1; end //189
    223             2                         50     
    224             1                         43     		      	10'b01_1110_1010 : begin encoded_data_N =  8'b1011_1110; flag_n = 1'b1; end //190
    224             2                         43     
    225             1                         46     		      	10'b10_1011_1010 : begin encoded_data_N =  8'b1011_1111; flag_n = 1'b1; end //191
    225             2                         46     
    226             1                         47     		      	10'b10_0111_0110 : begin encoded_data_N =  8'b1100_0000; flag_n = 1'b1; end //192
    226             2                         47     
    227             1                         54     		      	10'b01_1101_0110 : begin encoded_data_N =  8'b1100_0001; flag_n = 1'b1; end //193
    227             2                         54     
    228             1                         32     		      	10'b10_1101_0110 : begin encoded_data_N =  8'b1100_0010; flag_n = 1'b1; end //194
    228             2                         32     
    229             1                         92     		      	10'b11_0001_0110 : begin encoded_data_N =  8'b1100_0011; flag_n = 1'b1; end //195
    229             2                         92     
    230             1                         42     		      	10'b11_0101_0110 : begin encoded_data_N =  8'b1100_0100; flag_n = 1'b1; end //196
    230             2                         42     
    231             1                         83     		      	10'b10_1001_0110 : begin encoded_data_N =  8'b1100_0101; flag_n = 1'b1; end //197
    231             2                         83     
    232             1                        106     		      	10'b01_1001_0110 : begin encoded_data_N =  8'b1100_0110; flag_n = 1'b1; end //198
    232             2                        106     
    233             1                         52     		      	10'b11_1000_0110 : begin encoded_data_N =  8'b1100_0111; flag_n = 1'b1; end //199
    233             2                         52     
    234             1                         35     		      	10'b11_1001_0110 : begin encoded_data_N =  8'b1100_1000; flag_n = 1'b1; end //200
    234             2                         35     
    235             1                        101     		      	10'b10_0101_0110 : begin encoded_data_N =  8'b1100_1001; flag_n = 1'b1; end //201
    235             2                        101     
    236             1                         98     		      	10'b01_0101_0110 : begin encoded_data_N =  8'b1100_1010; flag_n = 1'b1; end //202
    236             2                         98     
    237             1                         95     		      	10'b11_0100_0110 : begin encoded_data_N =  8'b1100_1011; flag_n = 1'b1; end //203
    237             2                         95     
    238             1                         84     		      	10'b00_1101_0110 : begin encoded_data_N =  8'b1100_1100; flag_n = 1'b1; end //204
    238             2                         84     
    239             1                        108     		      	10'b10_1100_0110 : begin encoded_data_N =  8'b1100_1101; flag_n = 1'b1; end //205
    239             2                        108     
    240             1                         93     		      	10'b01_1100_0110 : begin encoded_data_N =  8'b1100_1110; flag_n = 1'b1; end //206
    240             2                         93     
    241             1                         42     		      	10'b01_0111_0110 : begin encoded_data_N =  8'b1100_1111; flag_n = 1'b1; end //207
    241             2                         42     
    242             1                         44     		      	10'b01_1011_0110 : begin encoded_data_N =  8'b1101_0000; flag_n = 1'b1; end //208
    242             2                         44     
    243             1                         97     		      	10'b10_0011_0110 : begin encoded_data_N =  8'b1101_0001; flag_n = 1'b1; end //209
    243             2                         97     
    244             1                        107     		      	10'b01_0011_0110 : begin encoded_data_N =  8'b1101_0010; flag_n = 1'b1; end //210
    244             2                        107     
    245             1                        106     		      	10'b11_0010_0110 : begin encoded_data_N =  8'b1101_0011; flag_n = 1'b1; end //211
    245             2                        106     
    246             1                        100     		      	10'b00_1011_0110 : begin encoded_data_N =  8'b1101_0100; flag_n = 1'b1; end //212
    246             2                        100     
    247             1                         88     		      	10'b10_1010_0110 : begin encoded_data_N =  8'b1101_0101; flag_n = 1'b1; end //213
    247             2                         88     
    248             1                        109     		      	10'b01_1010_0110 : begin encoded_data_N =  8'b1101_0110; flag_n = 1'b1; end //214
    248             2                        109     
    249             1                         49     		      	10'b11_1010_0110 : begin encoded_data_N =  8'b1101_0111; flag_n = 1'b1; end //215
    249             2                         49     
    250             1                         35     		      	10'b11_0011_0110 : begin encoded_data_N =  8'b1101_1000; flag_n = 1'b1; end //216
    250             2                         35     
    251             1                         92     		      	10'b10_0110_0110 : begin encoded_data_N =  8'b1101_1001; flag_n = 1'b1; end //217
    251             2                         92     
    252             1                        105     		      	10'b01_0110_0110 : begin encoded_data_N =  8'b1101_1010; flag_n = 1'b1; end //218
    252             2                        105     
    253             1                         39     		      	10'b11_0110_0110 : begin encoded_data_N =  8'b1101_1011; flag_n = 1'b1; end //219
    253             2                         39     
    254             1                        105     		      	10'b00_1110_0110 : begin encoded_data_N =  8'b1101_1100; flag_n = 1'b1; end //220
    254             2                        105     
    255             1                         36     		      	10'b10_1110_0110 : begin encoded_data_N =  8'b1101_1101; flag_n = 1'b1; end //221
    255             2                         36     
    256             1                         47     		      	10'b01_1110_0110 : begin encoded_data_N =  8'b1101_1110; flag_n = 1'b1; end //222
    256             2                         47     
    257             1                         54     		      	10'b10_1011_0110 : begin encoded_data_N =  8'b1101_1111; flag_n = 1'b1; end //223
    257             2                         54     
    258             1                         36     		      	10'b10_0111_0001 : begin encoded_data_N =  8'b1110_0000; flag_n = 1'b1; end //224
    258             2                         36     
    259             1                         38     		      	10'b01_1101_0001 : begin encoded_data_N =  8'b1110_0001; flag_n = 1'b1; end //225
    259             2                         38     
    260             1                         40     		      	10'b10_1101_0001 : begin encoded_data_N =  8'b1110_0010; flag_n = 1'b1; end //226
    260             2                         40     
    261             1                         58     		      	10'b11_0001_1110 : begin encoded_data_N =  8'b1110_0011; flag_n = 1'b1; end //227
    261             2                         58     
    262             1                         46     		      	10'b11_0101_0001 : begin encoded_data_N =  8'b1110_0100; flag_n = 1'b1; end //228
    262             2                         46     
    263             1                         36     		      	10'b10_1001_1110 : begin encoded_data_N =  8'b1110_0101; flag_n = 1'b1; end //229
    263             2                         36     
    264             1                         42     		      	10'b01_1001_1110 : begin encoded_data_N =  8'b1110_0110; flag_n = 1'b1; end //230
    264             2                         42     
    265             1                         48     		      	10'b11_1000_1110 : begin encoded_data_N =  8'b1110_0111; flag_n = 1'b1; end //231
    265             2                         48     
    266             1                         47     		      	10'b11_1001_0001 : begin encoded_data_N =  8'b1110_1000; flag_n = 1'b1; end //232
    266             2                         47     
    267             1                         47     		      	10'b10_0101_1110 : begin encoded_data_N =  8'b1110_1001; flag_n = 1'b1; end //233
    267             2                         47     
    268             1                         45     		      	10'b01_0101_1110 : begin encoded_data_N =  8'b1110_1010; flag_n = 1'b1; end //234
    268             2                         45     
    269             1                         51     		      	10'b11_0100_1110 : begin encoded_data_N =  8'b1110_1011; flag_n = 1'b1; end //235
    269             2                         51     
    270             1                         47     		      	10'b00_1101_1110 : begin encoded_data_N =  8'b1110_1100; flag_n = 1'b1; end //236
    270             2                         47     
    271             1                         51     		      	10'b10_1100_1110 : begin encoded_data_N =  8'b1110_1101; flag_n = 1'b1; end //237
    271             2                         51     
    272             1                         38     		      	10'b01_1100_1110 : begin encoded_data_N =  8'b1110_1110; flag_n = 1'b1; end //238
    272             2                         38     
    273             1                         32     		      	10'b01_0111_0001 : begin encoded_data_N =  8'b1110_1111; flag_n = 1'b1; end //239
    273             2                         32     
    274             1                         42     		      	10'b01_1011_0001 : begin encoded_data_N =  8'b1111_0000; flag_n = 1'b1; end //240
    274             2                         42     
    275             1                         47     		      	10'b10_0011_0111 : begin encoded_data_N =  8'b1111_0001; flag_n = 1'b1; end //241
    275             2                         47     
    276             1                         43     		      	10'b01_0011_0111 : begin encoded_data_N =  8'b1111_0010; flag_n = 1'b1; end //242
    276             2                         43     
    277             1                         41     		      	10'b11_0010_1110 : begin encoded_data_N =  8'b1111_0011; flag_n = 1'b1; end //243
    277             2                         41     
    278             1                         28     		      	10'b00_1011_0111 : begin encoded_data_N =  8'b1111_0100; flag_n = 1'b1; end //244
    278             2                         28     
    279             1                         33     		      	10'b10_1010_1110 : begin encoded_data_N =  8'b1111_0101; flag_n = 1'b1; end //245
    279             2                         33     
    280             1                         54     		      	10'b01_1010_1110 : begin encoded_data_N =  8'b1111_0110; flag_n = 1'b1; end //246
    280             2                         54     
    281             1                         43     		      	10'b11_1010_0001 : begin encoded_data_N =  8'b1111_0111; flag_n = 1'b1; end //247
    281             2                         43     
    282             1                         43     		      	10'b11_0011_0001 : begin encoded_data_N =  8'b1111_1000; flag_n = 1'b1; end //248
    282             2                         43     
    283             1                         36     		      	10'b10_0110_1110 : begin encoded_data_N =  8'b1111_1001; flag_n = 1'b1; end //249
    283             2                         36     
    284             1                         56     		      	10'b01_0110_1110 : begin encoded_data_N =  8'b1111_1010; flag_n = 1'b1; end //250
    284             2                         56     
    285             1                         42     		      	10'b11_0110_0001 : begin encoded_data_N =  8'b1111_1011; flag_n = 1'b1; end //251
    285             2                         42     
    286             1                         38     		      	10'b00_1110_1110 : begin encoded_data_N =  8'b1111_1100; flag_n = 1'b1; end //252
    286             2                         38     
    287             1                         39     		      	10'b10_1110_0001 : begin encoded_data_N =  8'b1111_1101; flag_n = 1'b1; end //253
    287             2                         39     
    288             1                         32     		      	10'b01_1110_0001 : begin encoded_data_N =  8'b1111_1110; flag_n = 1'b1; end //254
    288             2                         32     
    289             1                         44     		      	10'b10_1011_0001 : begin encoded_data_N =  8'b1111_1111; flag_n = 1'b1; end //255
    289             2                         44     
    290                                              		      	// command 	 
    291             1                    ***0***     		      	10'b00_1111_0100 : begin encoded_data_N =  8'b0001_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    291             2                    ***0***     
    291             3                    ***0***     
    292             1                    ***0***     		      	10'b00_1111_1001 : begin encoded_data_N =  8'b0011_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    292             2                    ***0***     
    292             3                    ***0***     
    293             1                    ***0***     		      	10'b00_1111_0101 : begin encoded_data_N =  8'b0101_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    293             2                    ***0***     
    293             3                    ***0***     
    294             1                      21134     		      	10'b00_1111_0011 : begin encoded_data_N =  8'b0111_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    294             2                      21134     
    294             3                      21134     
    295             1                    ***0***     		      	10'b00_1111_0010 : begin encoded_data_N =  8'b1001_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    295             2                    ***0***     
    295             3                    ***0***     
    296             1                    ***0***     		      	10'b00_1111_1010 : begin encoded_data_N =  8'b1011_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    296             2                    ***0***     
    296             3                    ***0***     
    297             1                    ***0***     		      	10'b00_1111_0110 : begin encoded_data_N =  8'b1101_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    297             2                    ***0***     
    297             3                    ***0***     
    298             1                          5     		      	10'b00_1111_1000 : begin encoded_data_N =  8'b1111_1100; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    298             2                          5     
    298             3                          5     
    299             1                    ***0***     		      	10'b11_1010_1000 : begin encoded_data_N =  8'b1111_0111; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    299             2                    ***0***     
    299             3                    ***0***     
    300             1                    ***0***     		      	10'b11_0110_1000 : begin encoded_data_N =  8'b1111_1011; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    300             2                    ***0***     
    300             3                    ***0***     
    301             1                    ***0***     		      	10'b10_1110_1000 : begin encoded_data_N =  8'b1111_1101; flag_n = 1'b1; RxDataK_N = 1'b1; end 
    301             2                    ***0***     
    301             3                    ***0***     
    302             1                    ***0***     		      	10'b01_1110_1000 : begin encoded_data_N =  8'b1111_1110; flag_n = 1'b1; RxDataK_N = 1'b1; end  
    302             2                    ***0***     
    302             3                    ***0***     
    303                                              
    304                                              		default : begin 
    305             1                      10950     					RxDataK_N = 1'b0;
    306             1                      10950     					encoded_data_N = 8'b0000_0000;
    307             1                      10950     					flag_n = 1'b0;
    308             1                      10950     					DecodeError_N = 1'b1; // error in decoding 
    309                                              			end 
    310                                              
    311                                              	endcase 
    312                                              
    313                                              	end	
    314                                              
    315                                              
    316                                              
    317                                              
    318             1                     114367      always@(*)
    319                                                begin
    320                                              
    321             1                     114367        flag_p = 1'b0;
    322             1                     114367     	 DecodeError_P = 1'b0;
    323             1                     114367     	 RxDataK_P = 1'b0 ;
    324                                              
    325                                                   case (temp)
    326                                              
    327             1                         98     			10'b01_1000_1011 : begin  encoded_data_P = 8'b0000_0000; flag_p = 1'b1; end  //0
    327             2                         98     
    328             1                         78     			10'b10_0010_1011 : begin  encoded_data_P = 8'b0000_0001; flag_p = 1'b1; end  //1
    328             2                         78     
    329             1                        114     			10'b01_0010_1011 : begin  encoded_data_P = 8'b0000_0010; flag_p = 1'b1; end  //2
    329             2                        114     
    330             1                        114     			10'b11_0001_0100 : begin  encoded_data_P = 8'b0000_0011; flag_p = 1'b1; end  //3
    330             2                        114     
    331             1                        104     			10'b00_1010_1011 : begin  encoded_data_P = 8'b0000_0100; flag_p = 1'b1; end  //4
    331             2                        104     
    332             1                         96     			10'b10_1001_0100 : begin  encoded_data_P = 8'b0000_0101; flag_p = 1'b1; end  //5
    332             2                         96     
    333             1                        108     			10'b01_1001_0100 : begin  encoded_data_P = 8'b0000_0110; flag_p = 1'b1; end  //6
    333             2                        108     
    334             1                        106     			10'b00_0111_0100 : begin  encoded_data_P = 8'b0000_0111; flag_p = 1'b1; end  //7
    334             2                        106     
    335             1                        110     			10'b00_0110_1011 : begin  encoded_data_P = 8'b0000_1000; flag_p = 1'b1; end  //8
    335             2                        110     
    336             1                        118     			10'b10_0101_0100 : begin  encoded_data_P = 8'b0000_1001; flag_p = 1'b1; end  //9
    336             2                        118     
    337             1                         85     			10'b01_0101_0100 : begin  encoded_data_P = 8'b0000_1010; flag_p = 1'b1; end  //10
    337             2                         85     
    338             1                         86     			10'b11_0100_0100 : begin  encoded_data_P = 8'b0000_1011; flag_p = 1'b1; end  //11
    338             2                         86     
    339             1                         94     			10'b00_1101_0100 : begin  encoded_data_P = 8'b0000_1100; flag_p = 1'b1; end  //12
    339             2                         94     
    340             1                        104     			10'b10_1100_0100 : begin  encoded_data_P = 8'b0000_1101; flag_p = 1'b1; end  //13
    340             2                        104     
    341             1                        114     			10'b01_1100_0100 : begin  encoded_data_P = 8'b0000_1110; flag_p = 1'b1; end  //14
    341             2                        114     
    342             1                        106     			10'b10_1000_1011 : begin  encoded_data_P = 8'b0000_1111; flag_p = 1'b1; end  //15
    342             2                        106     
    343             1                        122     			10'b10_0100_1011 : begin  encoded_data_P = 8'b0001_0000; flag_p = 1'b1; end  //16
    343             2                        122     
    344             1                         98     			10'b10_0011_0100 : begin  encoded_data_P = 8'b0001_0001; flag_p = 1'b1; end  //17
    344             2                         98     
    345             1                         98     			10'b01_0011_0100 : begin  encoded_data_P = 8'b0001_0010; flag_p = 1'b1; end  //18
    345             2                         98     
    346             1                        137     			10'b11_0010_0100 : begin  encoded_data_P = 8'b0001_0011; flag_p = 1'b1; end  //19
    346             2                        137     
    347             1                        103     			10'b00_1011_0100 : begin  encoded_data_P = 8'b0001_0100; flag_p = 1'b1; end  //20
    347             2                        103     
    348             1                        120     			10'b10_1010_0100 : begin  encoded_data_P = 8'b0001_0101; flag_p = 1'b1; end  //21
    348             2                        120     
    349             1                        112     			10'b01_1010_0100 : begin  encoded_data_P = 8'b0001_0110; flag_p = 1'b1; end  //22
    349             2                        112     
    350             1                        108     			10'b00_0101_1011 : begin  encoded_data_P = 8'b0001_0111; flag_p = 1'b1; end  //23
    350             2                        108     
    351             1                         99     			10'b00_1100_1011 : begin  encoded_data_P = 8'b0001_1000; flag_p = 1'b1; end  //24
    351             2                         99     
    352             1                        106     			10'b10_0110_0100 : begin  encoded_data_P = 8'b0001_1001; flag_p = 1'b1; end  //25
    352             2                        106     
    353             1                        138     			10'b01_0110_0100 : begin  encoded_data_P = 8'b0001_1010; flag_p = 1'b1; end  //26
    353             2                        138     
    354             1                        120     			10'b00_1001_1011 : begin  encoded_data_P = 8'b0001_1011; flag_p = 1'b1; end  //27
    354             2                        120     
    355             1                        114     			10'b00_1110_0100 : begin  encoded_data_P = 8'b0001_1100; flag_p = 1'b1; end  //28
    355             2                        114     
    356             1                        142     			10'b01_0001_1011 : begin  encoded_data_P = 8'b0001_1101; flag_p = 1'b1; end  //29
    356             2                        142     
    357             1                        104     			10'b10_0001_1011 : begin  encoded_data_P = 8'b0001_1110; flag_p = 1'b1; end  //30
    357             2                        104     
    358             1                        127     			10'b01_0100_1011 : begin  encoded_data_P = 8'b0001_1111; flag_p = 1'b1; end  //31
    358             2                        127     
    359             1                         88     			10'b01_1000_1001 : begin  encoded_data_P = 8'b0010_0000; flag_p = 1'b1; end  //32
    359             2                         88     
    360             1                        100     			10'b10_0010_1001 : begin  encoded_data_P = 8'b0010_0001; flag_p = 1'b1; end  //33
    360             2                        100     
    361             1                        100     			10'b01_0010_1001 : begin  encoded_data_P = 8'b0010_0010; flag_p = 1'b1; end  //34
    361             2                        100     
    362             1                        166     			10'b11_0001_1001 : begin  encoded_data_P = 8'b0010_0011; flag_p = 1'b1; end  //35
    362             2                        166     
    363             1                        112     			10'b00_1010_1001 : begin  encoded_data_P = 8'b0010_0100; flag_p = 1'b1; end  //36
    363             2                        112     
    364             1                        163     			10'b10_1001_1001 : begin  encoded_data_P = 8'b0010_0101; flag_p = 1'b1; end  //37
    364             2                        163     
    365             1                        171     			10'b01_1001_1001 : begin  encoded_data_P = 8'b0010_0110; flag_p = 1'b1; end  //38
    365             2                        171     
    366             1                         98     			10'b00_0111_1001 : begin  encoded_data_P = 8'b0010_0111; flag_p = 1'b1; end  //39
    366             2                         98     
    367             1                         86     			10'b00_0110_1001 : begin  encoded_data_P = 8'b0010_1000; flag_p = 1'b1; end  //40
    367             2                         86     
    368             1                        207     			10'b10_0101_1001 : begin  encoded_data_P = 8'b0010_1001; flag_p = 1'b1; end  //41
    368             2                        207     
    369             1                        137     			10'b01_0101_1001 : begin  encoded_data_P = 8'b0010_1010; flag_p = 1'b1; end  //42
    369             2                        137     
    370             1                        165     			10'b11_0100_1001 : begin  encoded_data_P = 8'b0010_1011; flag_p = 1'b1; end  //43
    370             2                        165     
    371             1                        151     			10'b00_1101_1001 : begin  encoded_data_P = 8'b0010_1100; flag_p = 1'b1; end  //44
    371             2                        151     
    372             1                        155     			10'b10_1100_1001 : begin  encoded_data_P = 8'b0010_1101; flag_p = 1'b1; end  //45
    372             2                        155     
    373             1                        181     			10'b01_1100_1001 : begin  encoded_data_P = 8'b0010_1110; flag_p = 1'b1; end  //46
    373             2                        181     
    374             1                         98     			10'b10_1000_1001 : begin  encoded_data_P = 8'b0010_1111; flag_p = 1'b1; end  //47
    374             2                         98     
    375             1                        128     			10'b10_0100_1001 : begin  encoded_data_P = 8'b0011_0000; flag_p = 1'b1; end  //48
    375             2                        128     
    376             1                        169     			10'b10_0011_1001 : begin  encoded_data_P = 8'b0011_0001; flag_p = 1'b1; end  //49
    376             2                        169     
    377             1                        196     			10'b01_0011_1001 : begin  encoded_data_P = 8'b0011_0010; flag_p = 1'b1; end  //50
    377             2                        196     
    378             1                        189     			10'b11_0010_1001 : begin  encoded_data_P = 8'b0011_0011; flag_p = 1'b1; end  //51
    378             2                        189     
    379             1                        162     			10'b00_1011_1001 : begin  encoded_data_P = 8'b0011_0100; flag_p = 1'b1; end  //52
    379             2                        162     
    380             1                        174     			10'b10_1010_1001 : begin  encoded_data_P = 8'b0011_0101; flag_p = 1'b1; end  //53
    380             2                        174     
    381             1                        175     			10'b01_1010_1001 : begin  encoded_data_P = 8'b0011_0110; flag_p = 1'b1; end  //54
    381             2                        175     
    382             1                        116     			10'b00_0101_1001 : begin  encoded_data_P = 8'b0011_0111; flag_p = 1'b1; end  //55
    382             2                        116     
    383             1                         84     			10'b00_1100_1001 : begin  encoded_data_P = 8'b0011_1000; flag_p = 1'b1; end  //56
    383             2                         84     
    384             1                        153     			10'b10_0110_1001 : begin  encoded_data_P = 8'b0011_1001; flag_p = 1'b1; end  //57
    384             2                        153     
    385             1                        186     			10'b01_0110_1001 : begin  encoded_data_P = 8'b0011_1010; flag_p = 1'b1; end  //58
    385             2                        186     
    386             1                        125     			10'b00_1001_1001 : begin  encoded_data_P = 8'b0011_1011; flag_p = 1'b1; end  //59
    386             2                        125     
    387             1                        200     			10'b00_1110_1001 : begin  encoded_data_P = 8'b0011_1100; flag_p = 1'b1; end  //60
    387             2                        200     
    388             1                        104     			10'b01_0001_1001 : begin  encoded_data_P = 8'b0011_1101; flag_p = 1'b1; end  //61
    388             2                        104     
    389             1                        128     			10'b10_0001_1001 : begin  encoded_data_P = 8'b0011_1110; flag_p = 1'b1; end  //62
    389             2                        128     
    390             1                        124     			10'b01_0100_1001 : begin  encoded_data_P = 8'b0011_1111; flag_p = 1'b1; end  //63
    390             2                        124     
    391             1                        126     			10'b01_1000_0101 : begin  encoded_data_P = 8'b0100_0000; flag_p = 1'b1; end  //64
    391             2                        126     
    392             1                         98     			10'b10_0010_0101 : begin  encoded_data_P = 8'b0100_0001; flag_p = 1'b1; end  //65
    392             2                         98     
    393             1                        110     			10'b01_0010_0101 : begin  encoded_data_P = 8'b0100_0010; flag_p = 1'b1; end  //66
    393             2                        110     
    394             1                        154     			10'b11_0001_0101 : begin  encoded_data_P = 8'b0100_0011; flag_p = 1'b1; end  //67
    394             2                        154     
    395             1                        110     			10'b00_1010_0101 : begin  encoded_data_P = 8'b0100_0100; flag_p = 1'b1; end  //68
    395             2                        110     
    396             1                        164     			10'b10_1001_0101 : begin  encoded_data_P = 8'b0100_0101; flag_p = 1'b1; end  //69
    396             2                        164     
    397             1                        184     			10'b01_1001_0101 : begin  encoded_data_P = 8'b0100_0110; flag_p = 1'b1; end  //70
    397             2                        184     
    398             1                        106     			10'b00_0111_0101 : begin  encoded_data_P = 8'b0100_0111; flag_p = 1'b1; end  //71
    398             2                        106     
    399             1                         96     			10'b00_0110_0101 : begin  encoded_data_P = 8'b0100_1000; flag_p = 1'b1; end  //72
    399             2                         96     
    400             1                        201     			10'b10_0101_0101 : begin  encoded_data_P = 8'b0100_1001; flag_p = 1'b1; end  //73
    400             2                        201     
    401             1                      20012     			10'b01_0101_0101 : begin  encoded_data_P = 8'b0100_1010; flag_p = 1'b1; end  //74
    401             2                      20012     
    402             1                        168     			10'b11_0100_0101 : begin  encoded_data_P = 8'b0100_1011; flag_p = 1'b1; end  //75
    402             2                        168     
    403             1                        139     			10'b00_1101_0101 : begin  encoded_data_P = 8'b0100_1100; flag_p = 1'b1; end  //76
    403             2                        139     
    404             1                        160     			10'b10_1100_0101 : begin  encoded_data_P = 8'b0100_1101; flag_p = 1'b1; end  //77
    404             2                        160     
    405             1                        154     			10'b01_1100_0101 : begin  encoded_data_P = 8'b0100_1110; flag_p = 1'b1; end  //78
    405             2                        154     
    406             1                        106     			10'b10_1000_0101 : begin  encoded_data_P = 8'b0100_1111; flag_p = 1'b1; end  //79
    406             2                        106     
    407             1                        108     			10'b10_0100_0101 : begin  encoded_data_P = 8'b0101_0000; flag_p = 1'b1; end  //80
    407             2                        108     
    408             1                        181     			10'b10_0011_0101 : begin  encoded_data_P = 8'b0101_0001; flag_p = 1'b1; end  //81
    408             2                        181     
    409             1                        152     			10'b01_0011_0101 : begin  encoded_data_P = 8'b0101_0010; flag_p = 1'b1; end  //82
    409             2                        152     
    410             1                        175     			10'b11_0010_0101 : begin  encoded_data_P = 8'b0101_0011; flag_p = 1'b1; end  //83
    410             2                        175     
    411             1                        165     			10'b00_1011_0101 : begin  encoded_data_P = 8'b0101_0100; flag_p = 1'b1; end  //84
    411             2                        165     
    412             1                        157     			10'b10_1010_0101 : begin  encoded_data_P = 8'b0101_0101; flag_p = 1'b1; end  //85
    412             2                        157     
    413             1                        188     			10'b01_1010_0101 : begin  encoded_data_P = 8'b0101_0110; flag_p = 1'b1; end  //86
    413             2                        188     
    414             1                         92     			10'b00_0101_0101 : begin  encoded_data_P = 8'b0101_0111; flag_p = 1'b1; end  //87
    414             2                         92     
    415             1                        134     			10'b00_1100_0101 : begin  encoded_data_P = 8'b0101_1000; flag_p = 1'b1; end  //88
    415             2                        134     
    416             1                        168     			10'b10_0110_0101 : begin  encoded_data_P = 8'b0101_1001; flag_p = 1'b1; end  //89
    416             2                        168     
    417             1                        168     			10'b01_0110_0101 : begin  encoded_data_P = 8'b0101_1010; flag_p = 1'b1; end  //90
    417             2                        168     
    418             1                        104     			10'b00_1001_0101 : begin  encoded_data_P = 8'b0101_1011; flag_p = 1'b1; end  //91
    418             2                        104     
    419             1                        168     			10'b00_1110_0101 : begin  encoded_data_P = 8'b0101_1100; flag_p = 1'b1; end  //92
    419             2                        168     
    420             1                        108     			10'b01_0001_0101 : begin  encoded_data_P = 8'b0101_1101; flag_p = 1'b1; end  //93
    420             2                        108     
    421             1                        110     			10'b10_0001_0101 : begin  encoded_data_P = 8'b0101_1110; flag_p = 1'b1; end  //94
    421             2                        110     
    422             1                        102     			10'b01_0100_0101 : begin  encoded_data_P = 8'b0101_1111; flag_p = 1'b1; end  //95
    422             2                        102     
    423             1                        113     			10'b01_1000_1100 : begin  encoded_data_P = 8'b0110_0000; flag_p = 1'b1; end  //96
    423             2                        113     
    424             1                        104     			10'b10_0010_1100 : begin  encoded_data_P = 8'b0110_0001; flag_p = 1'b1; end  //97
    424             2                        104     
    425             1                        126     			10'b01_0010_1100 : begin  encoded_data_P = 8'b0110_0010; flag_p = 1'b1; end  //98
    425             2                        126     
    426             1                        140     			10'b11_0001_0011 : begin  encoded_data_P = 8'b0110_0011; flag_p = 1'b1; end  //99
    426             2                        140     
    427             1                        104     			10'b00_1010_1100 : begin  encoded_data_P = 8'b0110_0100; flag_p = 1'b1; end  //100
    427             2                        104     
    428             1                        100     			10'b10_1001_0011 : begin  encoded_data_P = 8'b0110_0101; flag_p = 1'b1; end  //101
    428             2                        100     
    429             1                         99     			10'b01_1001_0011 : begin  encoded_data_P = 8'b0110_0110; flag_p = 1'b1; end  //102
    429             2                         99     
    430             1                        120     			10'b00_0111_0011 : begin  encoded_data_P = 8'b0110_0111; flag_p = 1'b1; end  //103
    430             2                        120     
    431             1                         84     			10'b00_0110_1100 : begin  encoded_data_P = 8'b0110_1000; flag_p = 1'b1; end  //104
    431             2                         84     
    432             1                        124     			10'b10_0101_0011 : begin  encoded_data_P = 8'b0110_1001; flag_p = 1'b1; end  //105
    432             2                        124     
    433             1                         94     			10'b01_0101_0011 : begin  encoded_data_P = 8'b0110_1010; flag_p = 1'b1; end  //106
    433             2                         94     
    434             1                        103     			10'b11_0100_0011 : begin  encoded_data_P = 8'b0110_1011; flag_p = 1'b1; end  //107
    434             2                        103     
    435             1                        138     			10'b00_1101_0011 : begin  encoded_data_P = 8'b0110_1100; flag_p = 1'b1; end  //108
    435             2                        138     
    436             1                        120     			10'b10_1100_0011 : begin  encoded_data_P = 8'b0110_1101; flag_p = 1'b1; end  //109
    436             2                        120     
    437             1                        108     			10'b01_1100_0011 : begin  encoded_data_P = 8'b0110_1110; flag_p = 1'b1; end  //110
    437             2                        108     
    438             1                         96     			10'b10_1000_1100 : begin  encoded_data_P = 8'b0110_1111; flag_p = 1'b1; end  //111
    438             2                         96     
    439             1                        124     			10'b10_0100_1100 : begin  encoded_data_P = 8'b0111_0000; flag_p = 1'b1; end  //112
    439             2                        124     
    440             1                        112     			10'b10_0011_0011 : begin  encoded_data_P = 8'b0111_0001; flag_p = 1'b1; end  //113
    440             2                        112     
    441             1                        106     			10'b01_0011_0011 : begin  encoded_data_P = 8'b0111_0010; flag_p = 1'b1; end  //114
    441             2                        106     
    442             1                        124     			10'b11_0010_0011 : begin  encoded_data_P = 8'b0111_0011; flag_p = 1'b1; end  //115
    442             2                        124     
    443             1                        126     			10'b00_1011_0011 : begin  encoded_data_P = 8'b0111_0100; flag_p = 1'b1; end  //116
    443             2                        126     
    444             1                        108     			10'b10_1010_0011 : begin  encoded_data_P = 8'b0111_0101; flag_p = 1'b1; end  //117
    444             2                        108     
    445             1                         90     			10'b01_1010_0011 : begin  encoded_data_P = 8'b0111_0110; flag_p = 1'b1; end  //118
    445             2                         90     
    446             1                        102     			10'b00_0101_1100 : begin  encoded_data_P = 8'b0111_0111; flag_p = 1'b1; end  //119
    446             2                        102     
    447             1                        100     			10'b00_1100_1100 : begin  encoded_data_P = 8'b0111_1000; flag_p = 1'b1; end  //120
    447             2                        100     
    448             1                        120     			10'b10_0110_0011 : begin  encoded_data_P = 8'b0111_1001; flag_p = 1'b1; end  //121
    448             2                        120     
    449             1                        120     			10'b01_0110_0011 : begin  encoded_data_P = 8'b0111_1010; flag_p = 1'b1; end  //122
    449             2                        120     
    450             1                        110     			10'b00_1001_1100 : begin  encoded_data_P = 8'b0111_1011; flag_p = 1'b1; end  //123
    450             2                        110     
    451             1                        150     			10'b00_1110_0011 : begin  encoded_data_P = 8'b0111_1100; flag_p = 1'b1; end  //124
    451             2                        150     
    452             1                        118     			10'b01_0001_1100 : begin  encoded_data_P = 8'b0111_1101; flag_p = 1'b1; end  //125
    452             2                        118     
    453             1                        134     			10'b10_0001_1100 : begin  encoded_data_P = 8'b0111_1110; flag_p = 1'b1; end  //126
    453             2                        134     
    454             1                         86     			10'b01_0100_1100 : begin  encoded_data_P = 8'b0111_1111; flag_p = 1'b1; end  //127
    454             2                         86     
    455             1                        126     			10'b01_1000_1101 : begin  encoded_data_P = 8'b1000_0000; flag_p = 1'b1; end  //128
    455             2                        126     
    456             1                        114     			10'b10_0010_1101 : begin  encoded_data_P = 8'b1000_0001; flag_p = 1'b1; end  //129
    456             2                        114     
    457             1                         86     			10'b01_0010_1101 : begin  encoded_data_P = 8'b1000_0010; flag_p = 1'b1; end  //130
    457             2                         86     
    458             1                        118     			10'b11_0001_0010 : begin  encoded_data_P = 8'b1000_0011; flag_p = 1'b1; end  //131
    458             2                        118     
    459             1                        106     			10'b00_1010_1101 : begin  encoded_data_P = 8'b1000_0100; flag_p = 1'b1; end  //132
    459             2                        106     
    460             1                        118     			10'b10_1001_0010 : begin  encoded_data_P = 8'b1000_0101; flag_p = 1'b1; end  //133
    460             2                        118     
    461             1                        130     			10'b01_1001_0010 : begin  encoded_data_P = 8'b1000_0110; flag_p = 1'b1; end  //134
    461             2                        130     
    462             1                        132     			10'b00_0111_0010 : begin  encoded_data_P = 8'b1000_0111; flag_p = 1'b1; end  //135
    462             2                        132     
    463             1                        112     			10'b00_0110_1101 : begin  encoded_data_P = 8'b1000_1000; flag_p = 1'b1; end  //136
    463             2                        112     
    464             1                        110     			10'b10_0101_0010 : begin  encoded_data_P = 8'b1000_1001; flag_p = 1'b1; end  //137
    464             2                        110     
    465             1                        136     			10'b01_0101_0010 : begin  encoded_data_P = 8'b1000_1010; flag_p = 1'b1; end  //138
    465             2                        136     
    466             1                         94     			10'b11_0100_0010 : begin  encoded_data_P = 8'b1000_1011; flag_p = 1'b1; end  //139
    466             2                         94     
    467             1                        114     			10'b00_1101_0010 : begin  encoded_data_P = 8'b1000_1100; flag_p = 1'b1; end  //140
    467             2                        114     
    468             1                        128     			10'b10_1100_0010 : begin  encoded_data_P = 8'b1000_1101; flag_p = 1'b1; end  //141
    468             2                        128     
    469             1                        106     			10'b01_1100_0010 : begin  encoded_data_P = 8'b1000_1110; flag_p = 1'b1; end  //142
    469             2                        106     
    470             1                        127     			10'b10_1000_1101 : begin  encoded_data_P = 8'b1000_1111; flag_p = 1'b1; end  //143
    470             2                        127     
    471             1                        114     			10'b10_0100_1101 : begin  encoded_data_P = 8'b1001_0000; flag_p = 1'b1; end  //144
    471             2                        114     
    472             1                        106     			10'b10_0011_0010 : begin  encoded_data_P = 8'b1001_0001; flag_p = 1'b1; end  //145
    472             2                        106     
    473             1                        137     			10'b01_0011_0010 : begin  encoded_data_P = 8'b1001_0010; flag_p = 1'b1; end  //146
    473             2                        137     
    474             1                         76     			10'b11_0010_0010 : begin  encoded_data_P = 8'b1001_0011; flag_p = 1'b1; end  //147
    474             2                         76     
    475             1                        114     			10'b00_1011_0010 : begin  encoded_data_P = 8'b1001_0100; flag_p = 1'b1; end  //148
    475             2                        114     
    476             1                         76     			10'b10_1010_0010 : begin  encoded_data_P = 8'b1001_0101; flag_p = 1'b1; end  //149
    476             2                         76     
    477             1                        130     			10'b01_1010_0010 : begin  encoded_data_P = 8'b1001_0110; flag_p = 1'b1; end  //150
    477             2                        130     
    478             1                         98     			10'b00_0101_1101 : begin  encoded_data_P = 8'b1001_0111; flag_p = 1'b1; end  //151
    478             2                         98     
    479             1                        122     			10'b00_1100_1101 : begin  encoded_data_P = 8'b1001_1000; flag_p = 1'b1; end  //152
    479             2                        122     
    480             1                        116     			10'b10_0110_0010 : begin  encoded_data_P = 8'b1001_1001; flag_p = 1'b1; end  //153
    480             2                        116     
    481             1                         98     			10'b01_0110_0010 : begin  encoded_data_P = 8'b1001_1010; flag_p = 1'b1; end  //154
    481             2                         98     
    482             1                         92     			10'b00_1001_1101 : begin  encoded_data_P = 8'b1001_1011; flag_p = 1'b1; end  //155
    482             2                         92     
    483             1                        126     			10'b00_1110_0010 : begin  encoded_data_P = 8'b1001_1100; flag_p = 1'b1; end  //156
    483             2                        126     
    484             1                        104     			10'b01_0001_1101 : begin  encoded_data_P = 8'b1001_1101; flag_p = 1'b1; end  //157
    484             2                        104     
    485             1                         94     			10'b10_0001_1101 : begin  encoded_data_P = 8'b1001_1110; flag_p = 1'b1; end  //158
    485             2                         94     
    486             1                        132     			10'b01_0100_1101 : begin  encoded_data_P = 8'b1001_1111; flag_p = 1'b1; end  //159
    486             2                        132     
    487             1                        120     			10'b01_1000_1010 : begin  encoded_data_P = 8'b1010_0000; flag_p = 1'b1; end  //160
    487             2                        120     
    488             1                         98     			10'b10_0010_1010 : begin  encoded_data_P = 8'b1010_0001; flag_p = 1'b1; end  //161
    488             2                         98     
    489             1                        102     			10'b01_0010_1010 : begin  encoded_data_P = 8'b1010_0010; flag_p = 1'b1; end  //162
    489             2                        102     
    490             1                        168     			10'b11_0001_1010 : begin  encoded_data_P = 8'b1010_0011; flag_p = 1'b1; end  //163
    490             2                        168     
    491             1                        124     			10'b00_1010_1010 : begin  encoded_data_P = 8'b1010_0100; flag_p = 1'b1; end  //164
    491             2                        124     
    492             1                        159     			10'b10_1001_1010 : begin  encoded_data_P = 8'b1010_0101; flag_p = 1'b1; end  //165
    492             2                        159     
    493             1                        156     			10'b01_1001_1010 : begin  encoded_data_P = 8'b1010_0110; flag_p = 1'b1; end  //166
    493             2                        156     
    494             1                         92     			10'b00_0111_1010 : begin  encoded_data_P = 8'b1010_0111; flag_p = 1'b1; end  //167
    494             2                         92     
    495             1                        110     			10'b00_0110_1010 : begin  encoded_data_P = 8'b1010_1000; flag_p = 1'b1; end  //168
    495             2                        110     
    496             1                        165     			10'b10_0101_1010 : begin  encoded_data_P = 8'b1010_1001; flag_p = 1'b1; end  //169
    496             2                        165     
    497             1                        149     			10'b01_0101_1010 : begin  encoded_data_P = 8'b1010_1010; flag_p = 1'b1; end  //170
    497             2                        149     
    498             1                        170     			10'b11_0100_1010 : begin  encoded_data_P = 8'b1010_1011; flag_p = 1'b1; end  //171
    498             2                        170     
    499             1                        170     			10'b00_1101_1010 : begin  encoded_data_P = 8'b1010_1100; flag_p = 1'b1; end  //172
    499             2                        170     
    500             1                        193     			10'b10_1100_1010 : begin  encoded_data_P = 8'b1010_1101; flag_p = 1'b1; end  //173
    500             2                        193     
    501             1                        163     			10'b01_1100_1010 : begin  encoded_data_P = 8'b1010_1110; flag_p = 1'b1; end  //174
    501             2                        163     
    502             1                        112     			10'b10_1000_1010 : begin  encoded_data_P = 8'b1010_1111; flag_p = 1'b1; end  //175
    502             2                        112     
    503             1                         90     			10'b10_0100_1010 : begin  encoded_data_P = 8'b1011_0000; flag_p = 1'b1; end  //176
    503             2                         90     
    504             1                        166     			10'b10_0011_1010 : begin  encoded_data_P = 8'b1011_0001; flag_p = 1'b1; end  //177
    504             2                        166     
    505             1                        166     			10'b01_0011_1010 : begin  encoded_data_P = 8'b1011_0010; flag_p = 1'b1; end  //178
    505             2                        166     
    506             1                        191     			10'b11_0010_1010 : begin  encoded_data_P = 8'b1011_0011; flag_p = 1'b1; end  //179
    506             2                        191     
    507             1                        148     			10'b00_1011_1010 : begin  encoded_data_P = 8'b1011_0100; flag_p = 1'b1; end  //180
    507             2                        148     
    508             1                        157     			10'b10_1010_1010 : begin  encoded_data_P = 8'b1011_0101; flag_p = 1'b1; end  //181
    508             2                        157     
    509             1                        166     			10'b01_1010_1010 : begin  encoded_data_P = 8'b1011_0110; flag_p = 1'b1; end  //182
    509             2                        166     
    510             1                         98     			10'b00_0101_1010 : begin  encoded_data_P = 8'b1011_0111; flag_p = 1'b1; end  //183
    510             2                         98     
    511             1                        108     			10'b00_1100_1010 : begin  encoded_data_P = 8'b1011_1000; flag_p = 1'b1; end  //184
    511             2                        108     
    512             1                        191     			10'b10_0110_1010 : begin  encoded_data_P = 8'b1011_1001; flag_p = 1'b1; end  //185
    512             2                        191     
    513             1                        181     			10'b01_0110_1010 : begin  encoded_data_P = 8'b1011_1010; flag_p = 1'b1; end  //186
    513             2                        181     
    514             1                        128     			10'b00_1001_1010 : begin  encoded_data_P = 8'b1011_1011; flag_p = 1'b1; end  //187
    514             2                        128     
    515             1                        165     			10'b00_1110_1010 : begin  encoded_data_P = 8'b1011_1100; flag_p = 1'b1; end  //188
    515             2                        165     
    516             1                         98     			10'b01_0001_1010 : begin  encoded_data_P = 8'b1011_1101; flag_p = 1'b1; end  //189
    516             2                         98     
    517             1                        132     			10'b10_0001_1010 : begin  encoded_data_P = 8'b1011_1110; flag_p = 1'b1; end  //190
    517             2                        132     
    518             1                        124     			10'b01_0100_1010 : begin  encoded_data_P = 8'b1011_1111; flag_p = 1'b1; end  //191
    518             2                        124     
    519             1                         94     			10'b01_1000_0110 : begin  encoded_data_P = 8'b1100_0000; flag_p = 1'b1; end  //192
    519             2                         94     
    520             1                        132     			10'b10_0010_0110 : begin  encoded_data_P = 8'b1100_0001; flag_p = 1'b1; end  //193
    520             2                        132     
    521             1                        106     			10'b01_0010_0110 : begin  encoded_data_P = 8'b1100_0010; flag_p = 1'b1; end  //194
    521             2                        106     
    522             1                        156     			10'b11_0001_0110 : begin  encoded_data_P = 8'b1100_0011; flag_p = 1'b1; end  //195
    522             2                        156     
    523             1                         90     			10'b00_1010_0110 : begin  encoded_data_P = 8'b1100_0100; flag_p = 1'b1; end  //196
    523             2                         90     
    524             1                        140     			10'b10_1001_0110 : begin  encoded_data_P = 8'b1100_0101; flag_p = 1'b1; end  //197
    524             2                        140     
    525             1                        180     			10'b01_1001_0110 : begin  encoded_data_P = 8'b1100_0110; flag_p = 1'b1; end  //198
    525             2                        180     
    526             1                        130     			10'b00_0111_0110 : begin  encoded_data_P = 8'b1100_0111; flag_p = 1'b1; end  //199
    526             2                        130     
    527             1                        122     			10'b00_0110_0110 : begin  encoded_data_P = 8'b1100_1000; flag_p = 1'b1; end  //200
    527             2                        122     
    528             1                        173     			10'b10_0101_0110 : begin  encoded_data_P = 8'b1100_1001; flag_p = 1'b1; end  //201
    528             2                        173     
    529             1                        172     			10'b01_0101_0110 : begin  encoded_data_P = 8'b1100_1010; flag_p = 1'b1; end  //202
    529             2                        172     
    530             1                        165     			10'b11_0100_0110 : begin  encoded_data_P = 8'b1100_1011; flag_p = 1'b1; end  //203
    530             2                        165     
    531             1                        143     			10'b00_1101_0110 : begin  encoded_data_P = 8'b1100_1100; flag_p = 1'b1; end  //204
    531             2                        143     
    532             1                        177     			10'b10_1100_0110 : begin  encoded_data_P = 8'b1100_1101; flag_p = 1'b1; end  //205
    532             2                        177     
    533             1                        162     			10'b01_1100_0110 : begin  encoded_data_P = 8'b1100_1110; flag_p = 1'b1; end  //206
    533             2                        162     
    534             1                        110     			10'b10_1000_0110 : begin  encoded_data_P = 8'b1100_1111; flag_p = 1'b1; end  //207
    534             2                        110     
    535             1                        108     			10'b10_0100_0110 : begin  encoded_data_P = 8'b1101_0000; flag_p = 1'b1; end  //208
    535             2                        108     
    536             1                        165     			10'b10_0011_0110 : begin  encoded_data_P = 8'b1101_0001; flag_p = 1'b1; end  //209
    536             2                        165     
    537             1                        185     			10'b01_0011_0110 : begin  encoded_data_P = 8'b1101_0010; flag_p = 1'b1; end  //210
    537             2                        185     
    538             1                        175     			10'b11_0010_0110 : begin  encoded_data_P = 8'b1101_0011; flag_p = 1'b1; end  //211
    538             2                        175     
    539             1                        171     			10'b00_1011_0110 : begin  encoded_data_P = 8'b1101_0100; flag_p = 1'b1; end  //212
    539             2                        171     
    540             1                        141     			10'b10_1010_0110 : begin  encoded_data_P = 8'b1101_0101; flag_p = 1'b1; end  //213
    540             2                        141     
    541             1                        193     			10'b01_1010_0110 : begin  encoded_data_P = 8'b1101_0110; flag_p = 1'b1; end  //214
    541             2                        193     
    542             1                        108     			10'b00_0101_0110 : begin  encoded_data_P = 8'b1101_0111; flag_p = 1'b1; end  //215
    542             2                        108     
    543             1                        114     			10'b00_1100_0110 : begin  encoded_data_P = 8'b1101_1000; flag_p = 1'b1; end  //216
    543             2                        114     
    544             1                        157     			10'b10_0110_0110 : begin  encoded_data_P = 8'b1101_1001; flag_p = 1'b1; end  //217
    544             2                        157     
    545             1                        171     			10'b01_0110_0110 : begin  encoded_data_P = 8'b1101_1010; flag_p = 1'b1; end  //218
    545             2                        171     
    546             1                        120     			10'b00_1001_0110 : begin  encoded_data_P = 8'b1101_1011; flag_p = 1'b1; end  //219
    546             2                        120     
    547             1                        183     			10'b00_1110_0110 : begin  encoded_data_P = 8'b1101_1100; flag_p = 1'b1; end  //220
    547             2                        183     
    548             1                        104     			10'b01_0001_0110 : begin  encoded_data_P = 8'b1101_1101; flag_p = 1'b1; end  //221
    548             2                        104     
    549             1                        100     			10'b10_0001_0110 : begin  encoded_data_P = 8'b1101_1110; flag_p = 1'b1; end  //222
    549             2                        100     
    550             1                        134     			10'b01_0100_0110 : begin  encoded_data_P = 8'b1101_1111; flag_p = 1'b1; end  //223
    550             2                        134     
    551             1                        126     			10'b01_1000_1110 : begin  encoded_data_P = 8'b1110_0000; flag_p = 1'b1; end  //224
    551             2                        126     
    552             1                        124     			10'b10_0010_1110 : begin  encoded_data_P = 8'b1110_0001; flag_p = 1'b1; end  //225
    552             2                        124     
    553             1                         82     			10'b01_0010_1110 : begin  encoded_data_P = 8'b1110_0010; flag_p = 1'b1; end  //226
    553             2                         82     
    554             1                        118     			10'b11_0001_0001 : begin  encoded_data_P = 8'b1110_0011; flag_p = 1'b1; end  //227
    554             2                        118     
    555             1                         98     			10'b00_1010_1110 : begin  encoded_data_P = 8'b1110_0100; flag_p = 1'b1; end  //228
    555             2                         98     
    556             1                         82     			10'b10_1001_0001 : begin  encoded_data_P = 8'b1110_0101; flag_p = 1'b1; end  //229
    556             2                         82     
    557             1                        112     			10'b01_1001_0001 : begin  encoded_data_P = 8'b1110_0110; flag_p = 1'b1; end  //230
    557             2                        112     
    558             1                        108     			10'b00_0111_0001 : begin  encoded_data_P = 8'b1110_0111; flag_p = 1'b1; end  //231
    558             2                        108     
    559             1                        136     			10'b00_0110_1110 : begin  encoded_data_P = 8'b1110_1000; flag_p = 1'b1; end  //232
    559             2                        136     
    560             1                         90     			10'b10_0101_0001 : begin  encoded_data_P = 8'b1110_1001; flag_p = 1'b1; end  //233
    560             2                         90     
    561             1                        106     			10'b01_0101_0001 : begin  encoded_data_P = 8'b1110_1010; flag_p = 1'b1; end  //234
    561             2                        106     
    562             1                        108     			10'b11_0100_1000 : begin  encoded_data_P = 8'b1110_1011; flag_p = 1'b1; end  //235
    562             2                        108     
    563             1                        136     			10'b00_1101_0001 : begin  encoded_data_P = 8'b1110_1100; flag_p = 1'b1; end  //236
    563             2                        136     
    564             1                        114     			10'b10_1100_1000 : begin  encoded_data_P = 8'b1110_1101; flag_p = 1'b1; end  //237
    564             2                        114     
    565             1                        110     			10'b01_1100_1000 : begin  encoded_data_P = 8'b1110_1110; flag_p = 1'b1; end  //238
    565             2                        110     
    566             1                        124     			10'b10_1000_1110 : begin  encoded_data_P = 8'b1110_1111; flag_p = 1'b1; end  //239
    566             2                        124     
    567             1                        103     			10'b10_0100_1110 : begin  encoded_data_P = 8'b1111_0000; flag_p = 1'b1; end  //240
    567             2                        103     
    568             1                        104     			10'b10_0011_0001 : begin  encoded_data_P = 8'b1111_0001; flag_p = 1'b1; end  //241
    568             2                        104     
    569             1                        106     			10'b01_0011_0001 : begin  encoded_data_P = 8'b1111_0010; flag_p = 1'b1; end  //242
    569             2                        106     
    570             1                         86     			10'b11_0010_0001 : begin  encoded_data_P = 8'b1111_0011; flag_p = 1'b1; end  //243
    570             2                         86     
    571             1                        112     			10'b00_1011_0001 : begin  encoded_data_P = 8'b1111_0100; flag_p = 1'b1; end  //244
    571             2                        112     
    572             1                        128     			10'b10_1010_0001 : begin  encoded_data_P = 8'b1111_0101; flag_p = 1'b1; end  //245
    572             2                        128     
    573             1                        104     			10'b01_1010_0001 : begin  encoded_data_P = 8'b1111_0110; flag_p = 1'b1; end  //246
    573             2                        104     
    574             1                        100     			10'b00_0101_1110 : begin  encoded_data_P = 8'b1111_0111; flag_p = 1'b1; end  //247
    574             2                        100     
    575             1                         96     			10'b00_1100_1110 : begin  encoded_data_P = 8'b1111_1000; flag_p = 1'b1; end  //248
    575             2                         96     
    576             1                         94     			10'b10_0110_0001 : begin  encoded_data_P = 8'b1111_1001; flag_p = 1'b1; end  //249
    576             2                         94     
    577             1                         84     			10'b01_0110_0001 : begin  encoded_data_P = 8'b1111_1010; flag_p = 1'b1; end  //250
    577             2                         84     
    578             1                        112     			10'b00_1001_1110 : begin  encoded_data_P = 8'b1111_1011; flag_p = 1'b1; end  //251
    578             2                        112     
    579             1                        128     			10'b00_1110_0001 : begin  encoded_data_P = 8'b1111_1100; flag_p = 1'b1; end  //252
    579             2                        128     
    580             1                        120     			10'b01_0001_1110 : begin  encoded_data_P = 8'b1111_1101; flag_p = 1'b1; end  //253
    580             2                        120     
    581             1                        100     			10'b10_0001_1110 : begin  encoded_data_P = 8'b1111_1110; flag_p = 1'b1; end  //254
    581             2                        100     
    582             1                        100     			10'b01_0100_1110 : begin  encoded_data_P = 8'b1111_1111; flag_p = 1'b1; end  //255
    582             2                        100     
    583                                              			//command
    584             1                    ***0***     			10'b11_0000_1011 : begin  encoded_data_P = 8'b0001_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    584             2                    ***0***     
    584             3                    ***0***     
    585             1                    ***0***     			10'b11_0000_0110 : begin  encoded_data_P = 8'b0011_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    585             2                    ***0***     
    585             3                    ***0***     
    586             1                    ***0***     			10'b11_0000_1010 : begin  encoded_data_P = 8'b0101_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    586             2                    ***0***     
    586             3                    ***0***     
    587             1                    ***0***     			10'b11_0000_1100 : begin  encoded_data_P = 8'b0111_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    587             2                    ***0***     
    587             3                    ***0***     
    588             1                    ***0***     			10'b11_0000_1101 : begin  encoded_data_P = 8'b1001_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    588             2                    ***0***     
    588             3                    ***0***     
    589             1                    ***0***     			10'b11_0000_0101 : begin  encoded_data_P = 8'b1011_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    589             2                    ***0***     
    589             3                    ***0***     
    590             1                    ***0***     			10'b11_0000_1001 : begin  encoded_data_P = 8'b1101_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    590             2                    ***0***     
    590             3                    ***0***     
    591             1                          3     			10'b11_0000_0111 : begin  encoded_data_P = 8'b1111_1100; flag_p = 1'b1; RxDataK_P = 1'b1; end
    591             2                          3     
    591             3                          3     
    592             1                    ***0***     			10'b00_0101_0111 : begin  encoded_data_P = 8'b1111_0111; flag_p = 1'b1; RxDataK_P = 1'b1; end
    592             2                    ***0***     
    592             3                    ***0***     
    593             1                          2     			10'b00_1001_0111 : begin  encoded_data_P = 8'b1111_1011; flag_p = 1'b1; RxDataK_P = 1'b1; end
    593             2                          2     
    593             3                          2     
    594             1                    ***0***     			10'b01_0001_0111 : begin  encoded_data_P = 8'b1111_1101; flag_p = 1'b1; RxDataK_P = 1'b1; end
    594             2                    ***0***     
    594             3                    ***0***     
    595             1                    ***0***     			10'b10_0001_0111 : begin  encoded_data_P = 8'b1111_1110; flag_p = 1'b1; RxDataK_P = 1'b1; end
    595             2                    ***0***     
    595             3                    ***0***     
    596                                              
    597                                              			default : begin 
    598             1                      62133     					DecodeError_P = 1'b1; // error in decoding 
    599             1                      62133     					flag_p = 1'b0;
    600                                              					
    601                                              					if(Data_in == 10'h0f3) begin
    602             1                      27298     					  encoded_data_P = 8'h7c;
    603             1                      27298     					  RxDataK_P = 1'b1;
    604                                              					end
    605                                              
    606                                              			    else begin
    607             1                      34835     			    	encoded_data_P = 8'b0000_0000;
    608             1                      34835     			      RxDataK_P = 1'b0;
    609                                              			    end
    610                                              			  end 
    611                                              
    612                                              	endcase 
    613                                              end
    614                                              
    615                                              
    616                                              
    617                                              
    618             1                     110000     always @(posedge CLK or negedge Rst_n) begin
    619                                              	if(!Rst_n)
    620             1                         20     		Data_out <= 8'b0000_0000;
    621                                              	else if(flag)
    622             1                      54985     		Data_out <= encoded_data_P;
    623                                              	else
    624             1                      54995     	  Data_out <= encoded_data_N;	
    625                                              end 
    626                                              
    627                                              
    628             1                     110000     always @(posedge CLK or negedge Rst_n) begin
    629                                              	if(!Rst_n) begin
    630             1                         20     	  DisparityError <= 0 ;
    631             1                         20         DecodeError    <= 0 ;
    632             1                         20         RxDataK        <= 0 ;
    633                                                end 
    634                                                 
    635                                              	else begin
    636                                              	   if(flag_n && flag_p)
    637             1                      31356     	      DisparityError <=  0 ;
    638                                              	   else 
    639             1                      78624     	      DisparityError <= ((!flag && flag_p) || (flag && flag_n)) ? 1'b1 : 1'b0;
    640                                                 
    641             1                     109980         DecodeError    <= DecodeError_P & DecodeError_N                        ;
    642             1                     109980         RxDataK        <= (flag)? RxDataK_P : RxDataK_N                        ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        112       112         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/decode --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               CLK           5           5      100.00 
                                      Data_in[0-9]           5           5      100.00 
                                     Data_out[0-7]           5           5      100.00 
                                       DecodeError           5           5      100.00 
                                     DecodeError_N           5           5      100.00 
                                     DecodeError_P           5           5      100.00 
                                    DisparityError           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                           RxDataK           5           5      100.00 
                                         RxDataK_N           5           5      100.00 
                                         RxDataK_P           5           5      100.00 
                               encoded_data_N[0-7]           5           5      100.00 
                               encoded_data_P[0-7]           5           5      100.00 
                                              flag           5           5      100.00 
                                            flag_n           5           5      100.00 
                                            flag_p           5           5      100.00 
                                         temp[0-9]           5           5      100.00 

Total Node Count     =         56 
Toggled Node Count   =         56 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (112 of 112 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/rx_status
=== Design Unit: work.Reeceiver_Status
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         5         3    62.50%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_status

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Receiver_Status.v
------------------------------------CASE Branch------------------------------------
    11                                     54608     Count coming in to CASE
    14              1                      26048           6'b00_00_00: RxStatus <= 3'b000;   // NO ERROR
    15              1                          2           6'b00_10_00: RxStatus <= 3'b001;   // Skp_Added
    16              1                    ***0***           6'b00_01_00: RxStatus <= 3'b010;   // Skp_Removed
    20              1                        817           6'bxx_xx_1x: RxStatus <= 3'b100;  // Decode ERROR - Disparity_Error (OPTIONAL) 
    21              1                    ***0***           6'b10_xx_0x: RxStatus <= 3'b101;  // OVERFLOW
    22              1                       1025           6'b01_xx_0x: RxStatus <= 3'b110;  //UNDERFLOW
    23              1                      26716           6'b00_xx_01: RxStatus <= 3'b111;  //Disparity_Error
    24              1                    ***0***           default:     RxStatus <= 3'b000;  
Branch totals: 5 hits of 8 branches = 62.50%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       9         6         3    66.66%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_status --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Receiver_Status.v
    1                                                module Reeceiver_Status ( 
    2                                                    input Overflow, 
    3                                                    input Underflow, 
    4                                                    input Skp_Added, 
    5                                                    input Skp_Removed, 
    6                                                    input Decode_Error, 
    7                                                    input Disparity_Error, 
    8                                                    output reg [2:0] RxStatus 
    9                                                ); 
    10              1                      54608       always @(*) begin 
    11                                                   casex ({ 
    12                                                     Overflow, Underflow, Skp_Added, Skp_Removed, Decode_Error, Disparity_Error 
    13                                                   }) 
    14              1                      26048           6'b00_00_00: RxStatus <= 3'b000;   // NO ERROR
    15              1                          2           6'b00_10_00: RxStatus <= 3'b001;   // Skp_Added
    16              1                    ***0***           6'b00_01_00: RxStatus <= 3'b010;   // Skp_Removed
    17                                                     //6'b11_11_11: RxStatus <= 3'b011;  /////receiver detected ignored 
    18                                                     //6'b00_xx_00: RxStatus <= 3'b011; 
    19                                                
    20              1                        817           6'bxx_xx_1x: RxStatus <= 3'b100;  // Decode ERROR - Disparity_Error (OPTIONAL) 
    21              1                    ***0***           6'b10_xx_0x: RxStatus <= 3'b101;  // OVERFLOW
    22              1                       1025           6'b01_xx_0x: RxStatus <= 3'b110;  //UNDERFLOW
    23              1                      26716           6'b00_xx_01: RxStatus <= 3'b111;  //Disparity_Error
    24              1                    ***0***           default:     RxStatus <= 3'b000;  

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         18        14         4    77.77%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_status --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      Decode_Error           5           5      100.00 
                                   Disparity_Error           5           5      100.00 
                                          Overflow           0           0        0.00 
                                     RxStatus[0-2]           5           5      100.00 
                                         Skp_Added           1           1      100.00 
                                       Skp_Removed           0           0        0.00 
                                         Underflow           5           5      100.00 

Total Node Count     =          9 
Toggled Node Count   =          7 
Untoggled Node Count =          2 

Toggle Coverage      =      77.77% (14 of 18 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U/rx_gasket
=== Design Unit: work.GasKet_RX
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        25        23         2    92.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_gasket

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File GasKet_RX.v
------------------------------------IF Branch------------------------------------
    18                                     69972     Count coming in to IF
    18              1                         20         if (!Rst_n) begin
    21              1                      40726     	else if((width == 6'd8 && count == 2'b00) || (width == 6'd16 && count == 2'b01) || (width == 6'd32 && count == 2'b11) || Rx_Datak) begin
    23              1                      29226         end else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    29                                     84440     Count coming in to IF
    29              1                         20         if (!Rst_n) begin
    31              1                      84420         end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    33                                     84420     Count coming in to CASE
    34              1                      55184             2'b00: begin 
    40              1                      14427             2'b01:begin 
    46              1                       7405             2'b10:begin
    52              1                       7404             2'b11:begin 
                                         ***0***     All False Count
Branch totals: 4 hits of 5 branches = 80.00%

------------------------------------IF Branch------------------------------------
    36                                     55184     Count coming in to IF
    36              1                      34805               if(Data_in == 8'h7c && Rx_Datak) flag[0] <= 0 ;
    37              1                      20379               else flag[0] <= 1 ; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    42                                     14427     Count coming in to IF
    42              1                          1               if(Data_in == 8'h7c && Rx_Datak) flag[1] <= 0 ;
    43              1                      14426               else flag[1] <= 1 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    48                                      7405     Count coming in to IF
    48              1                    ***0***               if(Data_in == 8'h7c && Rx_Datak) flag[2] <= 0 ;
    49              1                       7405               else flag[2] <= 1 ;           
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    54                                      7404     Count coming in to IF
    54              1                         10               if(Data_in == 8'h7c && Rx_Datak) flag[3] <= 0 ;
    55              1                       7394               else flag[3] <= 1 ;            
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    64                                     77067     Count coming in to IF
    64              1                         20        if(~Rst_n) begin
    68              1                       5954        else if(width == 6'd8 && flag[0]) begin
    72              1                      14032       else if (width == 6'd16 && (&flag[1:0])) begin
    76              1                      22244       else if(width == 6'd32 && &flag) begin
    80              1                      34817        else 
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------IF Branch------------------------------------
    85                                     40701     Count coming in to IF
    85              1                         30         if (!Rst_n) Data_out <= 32'b0;
    86              1                      40671         else begin
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      21        19         2    90.47%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_gasket --

  File GasKet_RX.v
----------------Focused Condition View-------------------
Line       21 Item    1  (((((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) || ((width == 32) && (count == 3))) || Rx_Datak)
Condition totals: 7 of 7 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   (width == 8)         Y
   (count == 0)         Y
  (width == 16)         Y
   (count == 1)         Y
  (width == 32)         Y
   (count == 3)         Y
       Rx_Datak         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (width == 8)_0        (~Rx_Datak && ~((width == 32) && (count == 3)) && ~((width == 16) && (count == 1)))
  Row   2:          5  (width == 8)_1        (count == 0)                  
  Row   3:          5  (count == 0)_0        (~Rx_Datak && ~((width == 32) && (count == 3)) && ~((width == 16) && (count == 1)) && (width == 8))
  Row   4:          5  (count == 0)_1        (width == 8)                  
  Row   5:          5  (width == 16)_0       (~Rx_Datak && ~((width == 32) && (count == 3)) && ~((width == 8) && (count == 0)))
  Row   6:          5  (width == 16)_1       (~((width == 8) && (count == 0)) && (count == 1))
  Row   7:          5  (count == 1)_0        (~Rx_Datak && ~((width == 32) && (count == 3)) && ~((width == 8) && (count == 0)) && (width == 16))
  Row   8:          5  (count == 1)_1        (~((width == 8) && (count == 0)) && (width == 16))
  Row   9:          5  (width == 32)_0       (~Rx_Datak && ~(((width == 8) && (count == 0)) || ((width == 16) && (count == 1))))
 Row   10:          5  (width == 32)_1       (~(((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) && (count == 3))
 Row   11:          5  (count == 3)_0        (~Rx_Datak && ~(((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) && (width == 32))
 Row   12:          5  (count == 3)_1        (~(((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) && (width == 32))
 Row   13:          5  Rx_Datak_0            ~((((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) || ((width == 32) && (count == 3)))
 Row   14:          5  Rx_Datak_1            ~((((width == 8) && (count == 0)) || ((width == 16) && (count == 1))) || ((width == 32) && (count == 3)))

----------------Focused Condition View-------------------
Line       36 Item    1  ((Data_in == 124) && Rx_Datak)
Condition totals: 2 of 2 input terms covered = 100.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (Data_in == 124)         Y
          Rx_Datak         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Data_in == 124)_0    -                             
  Row   2:          5  (Data_in == 124)_1    Rx_Datak                      
  Row   3:          5  Rx_Datak_0            (Data_in == 124)              
  Row   4:          5  Rx_Datak_1            (Data_in == 124)              

----------------Focused Condition View-------------------
Line       42 Item    1  ((Data_in == 124) && Rx_Datak)
Condition totals: 2 of 2 input terms covered = 100.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (Data_in == 124)         Y
          Rx_Datak         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Data_in == 124)_0    -                             
  Row   2:          1  (Data_in == 124)_1    Rx_Datak                      
  Row   3:          5  Rx_Datak_0            (Data_in == 124)              
  Row   4:          1  Rx_Datak_1            (Data_in == 124)              

----------------Focused Condition View-------------------
Line       48 Item    1  ((Data_in == 124) && Rx_Datak)
Condition totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (Data_in == 124)         N  '_1' not hit             Hit '_1'
          Rx_Datak         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Data_in == 124)_0    -                             
  Row   2:    ***0***  (Data_in == 124)_1    Rx_Datak                      
  Row   3:          5  Rx_Datak_0            (Data_in == 124)              
  Row   4:    ***0***  Rx_Datak_1            (Data_in == 124)              

----------------Focused Condition View-------------------
Line       54 Item    1  ((Data_in == 124) && Rx_Datak)
Condition totals: 2 of 2 input terms covered = 100.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (Data_in == 124)         Y
          Rx_Datak         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Data_in == 124)_0    -                             
  Row   2:          5  (Data_in == 124)_1    Rx_Datak                      
  Row   3:          5  Rx_Datak_0            (Data_in == 124)              
  Row   4:          5  Rx_Datak_1            (Data_in == 124)              

----------------Focused Condition View-------------------
Line       68 Item    1  ((width == 8) && flag[0])
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (width == 8)         Y
       flag[0]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (width == 8)_0        -                             
  Row   2:          5  (width == 8)_1        flag[0]                       
  Row   3:          5  flag[0]_0             (width == 8)                  
  Row   4:          5  flag[0]_1             (width == 8)                  

----------------Focused Condition View-------------------
Line       72 Item    1  ((width == 16) && &flag[1:0])
Condition totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (width == 16)         Y
     &flag[1:0]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (width == 16)_0       -                             
  Row   2:          5  (width == 16)_1       &flag[1:0]                    
  Row   3:          5  &flag[1:0]_0          (width == 16)                 
  Row   4:          5  &flag[1:0]_1          (width == 16)                 

----------------Focused Condition View-------------------
Line       76 Item    1  ((width == 32) && &flag)
Condition totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (width == 32)         Y
          &flag         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (width == 32)_0       -                             
  Row   2:          5  (width == 32)_1       &flag                         
  Row   3:          5  &flag_0               (width == 32)                 
  Row   4:          5  &flag_1               (width == 32)                 


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      27        26         1    96.29%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_gasket --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File GasKet_RX.v
    1                                                module GasKet_RX (
    2                                                    input             clk_to_get,
    3                                                    input             PCLK,
    4                                                    input             Rst_n,
    5                                                    input             Rx_Datak,
    6                                                    input      [ 5:0] width,
    7                                                    input      [ 7:0] Data_in,
    8                                                    output reg [31:0] Data_out
    9                                                );
    10                                               
    11                                                 
    12                                                 reg [31:0] data_out;
    13                                                 reg [1:0] count;
    14                                                 reg [3:0] flag;
    15                                                 reg [31:0]temp_reg;
    16                                               
    17              1                      69972       always @(posedge clk_to_get or negedge Rst_n) begin
    18                                                   if (!Rst_n) begin
    19              1                         20           count <= 3'b01;
    20                                                   end 
    21                                               	else if((width == 6'd8 && count == 2'b00) || (width == 6'd16 && count == 2'b01) || (width == 6'd32 && count == 2'b11) || Rx_Datak) begin
    22              1                      40726           count <= 2'b00;
    23                                                   end else begin
    24              1                      29226           count <= count + 1'b1;
    25                                                   end
    26                                                 end
    27                                               
    28              1                      84440       always @(posedge clk_to_get or negedge Rst_n) begin
    29                                                   if (!Rst_n) begin
    30              1                         20           data_out <= 32'b0;
    31                                                   end else begin
    32                                               
    33                                                     case (count)
    34                                                       2'b00: begin 
    35              1                      55184               data_out[7 :0] <= Data_in;
    36              1                      34805               if(Data_in == 8'h7c && Rx_Datak) flag[0] <= 0 ;
    37              1                      20379               else flag[0] <= 1 ; 
    38                                                       end
    39                                                       
    40                                                       2'b01:begin 
    41              1                      14427               data_out[15:8] <= Data_in;
    42              1                          1               if(Data_in == 8'h7c && Rx_Datak) flag[1] <= 0 ;
    43              1                      14426               else flag[1] <= 1 ;
    44                                                       end   
    45                                                       
    46                                                       2'b10:begin
    47              1                       7405               data_out[23:16] <= Data_in; 
    48              1                    ***0***               if(Data_in == 8'h7c && Rx_Datak) flag[2] <= 0 ;
    49              1                       7405               else flag[2] <= 1 ;           
    50                                                       end
    51                                                       
    52                                                       2'b11:begin 
    53              1                       7404               data_out[31:24] <= Data_in;
    54              1                         10               if(Data_in == 8'h7c && Rx_Datak) flag[3] <= 0 ;
    55              1                       7394               else flag[3] <= 1 ;            
    56                                                       end
    57                                                     
    58                                                     endcase
    59                                                   end
    60                                                 end
    61                                               
    62                                               
    63              1                      77067      always @(posedge clk_to_get or negedge Rst_n) begin
    64                                                  if(~Rst_n) begin
    65              1                         20         temp_reg <= 0;
    66                                                  end
    67                                               
    68                                                  else if(width == 6'd8 && flag[0]) begin
    69              1                       5954         temp_reg <= {24'b0,data_out[7:0]};
    70                                                  end
    71                                               
    72                                                 else if (width == 6'd16 && (&flag[1:0])) begin
    73              1                      14032         temp_reg <= {24'b0,data_out[15:0]};
    74                                                  end
    75                                                 
    76                                                 else if(width == 6'd32 && &flag) begin
    77              1                      22244         temp_reg <= data_out;
    78                                                  end
    79                                                 
    80                                                  else 
    81              1                      34817         temp_reg <= 0;
    82                                                end
    83                                               
    84              1                      40701       always @(posedge PCLK or negedge Rst_n) begin
    85              1                         30         if (!Rst_n) Data_out <= 32'b0;
    86                                                   else begin
    87              1                      40671           Data_out <= temp_reg;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        240       230        10    95.83%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U/rx_gasket --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      Data_in[0-7]           5           5      100.00 
                                    Data_out[0-31]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                          Rx_Datak           5           5      100.00 
                                        clk_to_get           5           5      100.00 
                                        count[0-1]           5           5      100.00 
                                    data_out[0-31]           5           5      100.00 
                                           flag[0]           5           5      100.00 
                                           flag[1]           1           1      100.00 
                                           flag[2]           0           0        0.00 
                                           flag[3]           5           5      100.00 
                                    temp_reg[0-31]           5           5      100.00 
                                        width[0-2]           0           0        0.00 
                                          width[3]           0           5       50.00 
                                          width[4]           5           5      100.00 
                                          width[5]           5           0       50.00 

Total Node Count     =        120 
Toggled Node Count   =        114 
Untoggled Node Count =          6 

Toggle Coverage      =      95.83% (230 of 240 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U/PCS_RX_U
=== Design Unit: work.PCS_RX
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        164       152        12    92.68%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U/PCS_RX_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                               Collected_Data[0-9]           5           5      100.00 
                                       Comma_pulse           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                       DecodeError           5           5      100.00 
                                   Disparity_Error           5           5      100.00 
                                              PCLK           5           5      100.00 
                                     RX_Data[0-31]           5           5      100.00 
                                          RX_DataK           5           5      100.00 
                                    RX_Status[0-2]           5           5      100.00 
                                          RX_Valid           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                       Skp_Removed           0           0        0.00 
                                           WordClk           5           5      100.00 
                              data_to_decoder[0-9]           5           5      100.00 
                               data_to_gasket[0-7]           5           5      100.00 
                                          overflow           0           0        0.00 
                                  recovered_clk_5G           5           5      100.00 
                                         skp_added           1           1      100.00 
                                         underflow           5           5      100.00 

Total Node Count     =         82 
Toggled Node Count   =         75 
Untoggled Node Count =          7 

Toggle Coverage      =      92.68% (152 of 164 bins)

=================================================================================
=== Instance: /top/DUT/PCS_U
=== Design Unit: work.PCS
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        210       202         8    96.19%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PCS_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Bit_Rate_Clk_10           5           5      100.00 
                               Collected_Data[0-9]           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                  Data_In_PMA[0-9]           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                 MAC_TX_Data[0-31]           5           5      100.00 
                                 MAC_TX_Datak[0-3]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                             RST_n           5           5      100.00 
                                     RX_Data[0-31]           5           5      100.00 
                                          RX_DataK           5           5      100.00 
                                    RX_Status[0-2]           5           5      100.00 
                                          RX_Valid           5           5      100.00 
                                           WordClk           5           5      100.00 
                                  recovered_clk_5G           5           5      100.00 

Total Node Count     =        105 
Toggled Node Count   =        100 
Untoggled Node Count =          5 

Toggle Coverage      =      96.19% (202 of 210 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PMA_TX_U
=== Design Unit: work.PMA_TX
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        11        11         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PMA_TX_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PMA_TX.v
------------------------------------IF Branch------------------------------------
    24                                    110000     Count coming in to IF
    24              1                         20       if (!Rst_n) begin
    29              1                     104970       else if (MAC_Data_En && Counter != 10) begin
    34              1                       5010       else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    43                                   1059635     Count coming in to IF
    43              1                         20      if(!Rst_n) begin
    47              1                     115000      else if(Counter == 0) begin
    51              1                     944615      else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    59                                    865305     Count coming in to IF
    59              1                         20      if(!Rst_n) begin
    63              1                     865285      else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    72                                   1099835     Count coming in to IF
    72              1                         20       if(~Rst_n) begin
    76              1                     944625       else if(Counter != 9 && flag) begin
    80              1                     155190       else 
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       5         4         1    80.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PMA_U/PMA_TX_U --

  File PMA_TX.v
----------------Focused Condition View-------------------
Line       29 Item    1  (MAC_Data_En && (Counter != 10))
Condition totals: 1 of 2 input terms covered = 50.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
      MAC_Data_En         Y
  (Counter != 10)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  MAC_Data_En_0         -                             
  Row   2:          5  MAC_Data_En_1         (Counter != 10)               
  Row   3:    ***0***  (Counter != 10)_0     MAC_Data_En                   
  Row   4:          5  (Counter != 10)_1     MAC_Data_En                   

----------------Focused Condition View-------------------
Line       47 Item    1  (Counter == 0)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (Counter == 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Counter == 0)_0      -                             
  Row   2:          5  (Counter == 0)_1      -                             

----------------Focused Condition View-------------------
Line       76 Item    1  ((Counter != 9) && flag)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (Counter != 9)         Y
            flag         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (Counter != 9)_0      -                             
  Row   2:          5  (Counter != 9)_1      flag                          
  Row   3:          5  flag_0                (Counter != 9)                
  Row   4:          5  flag_1                (Counter != 9)                


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      18        18         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PMA_TX_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PMA_TX.v
    1                                                module PMA_TX #(parameter DATA_WIDTH = 'd10)
    2                                                  (
    3                                                   input                    Bit_Rate_Clk_10 ,  
    4                                                   input                    Bit_Rate_Clk    ,
    5                                                   input                    Rst_n           ,
    6                                                   input [DATA_WIDTH - 1:0] Data_in         , 
    7                                                   input                    MAC_Data_En     , 
    8                                                   output  reg              TX_Out_P        ,   
    9                                                   output                   TX_Out_N            
    10                                                 );
    11                                               
    12                                               
    13                                               reg [DATA_WIDTH - 1 : 0] Temp_Reg           ;
    14                                               reg [DATA_WIDTH - 1 : 0] Temp_Reg2          ;
    15                                               reg [3              : 0] Counter            ; 
    16                                               reg                      flag               ;
    17                                               
    18                                               
    19                                               
    20                                               assign TX_Out_N = ~TX_Out_P                 ;
    21                                               
    22                                               
    23              1                     110000     always @(posedge Bit_Rate_Clk_10 or negedge Rst_n) begin
    24                                                 if (!Rst_n) begin
    25              1                         20         Temp_Reg <= 0                    ;
    26              1                         20         flag     <= 0                    ;    
    27                                                 end
    28                                               
    29                                                 else if (MAC_Data_En && Counter != 10) begin
    30              1                     104970         Temp_Reg <= Data_in              ;
    31              1                     104970         flag     <= 1                    ; 
    32                                                 end
    33                                               
    34                                                 else begin
    35              1                       5010         Temp_Reg <= Data_in              ;
    36              1                       5010         flag     <= 0                    ;
    37                                                 end
    38                                               end
    39                                               
    40                                               
    41                                               
    42              1                    1059635     always @(posedge Bit_Rate_Clk or negedge Rst_n) begin
    43                                                if(!Rst_n) begin
    44              1                         20        Temp_Reg2 <= 0              ;
    45                                                end
    46                                               
    47                                                else if(Counter == 0) begin
    48              1                     115000       Temp_Reg2 <= Temp_Reg        ;
    49                                                end
    50                                               
    51                                                else
    52              1                     944615      Temp_Reg2 <= Temp_Reg2 >> 1   ;
    53                                               
    54                                               end
    55                                               
    56                                               
    57                                               
    58              1                     865305     always @(posedge Bit_Rate_Clk or negedge Rst_n) begin
    59                                                if(!Rst_n) begin
    60              1                         20        TX_Out_P <= 0                 ;
    61                                                end
    62                                               
    63                                                else begin
    64              1                     865285       TX_Out_P <= Temp_Reg2[0]        ;
    65                                                end
    66                                               
    67                                               end
    68                                               
    69                                               
    70                                               
    71              1                    1099835     always @(posedge Bit_Rate_Clk or negedge Rst_n) begin
    72                                                 if(~Rst_n) begin
    73              1                         20         Counter <= 0            ;
    74                                                 end
    75                                               
    76                                                 else if(Counter != 9 && flag) begin
    77              1                     944625         Counter <=  Counter + 1 ;
    78                                                 end
    79                                               
    80                                                 else 
    81              1                     155190         Counter <= 0            ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         82        82         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PMA_TX_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      Bit_Rate_Clk           5           5      100.00 
                                   Bit_Rate_Clk_10           5           5      100.00 
                                      Counter[0-3]           5           5      100.00 
                                      Data_in[0-9]           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                          TX_Out_N           5           5      100.00 
                                          TX_Out_P           5           5      100.00 
                                     Temp_Reg[0-9]           5           5      100.00 
                                    Temp_Reg2[0-9]           5           5      100.00 
                                              flag           5           5      100.00 

Total Node Count     =         41 
Toggled Node Count   =         41 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (82 of 82 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/channelInst
=== Design Unit: work.Channel
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      16        16         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/channelInst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Channel.sv
    3                                                module Channel #(parameter ATTENUATION = 10 , parameter F = 2.5 , parameter N = 10)
    4                                                (
    5                                                  input       Sample_CLK	 ,
    6                                                  input       Data_in      ,
    7                                                  output  real Ynew
    8                                                  //output reg  Data_out	          // Atenuated Data
    9                                                );
    10                                               
    11                                               real Unew ;
    12                                               real Uold ;
    13                                               // real Ynew ;
    14                                               real Yold ;
    15                                               real Ynewn;
    16                                               
    17                                               real A , A_ , x1 , x2 , Wc , alpha , beta;
    18                                               
    19                                               
    20                                               
    21                                               //assign Data_out = Ynew ;
    22                                               
    23                                               
    24                                               initial begin
    25              1                          5     Unew   = 0 ;
    26              1                          5     Uold   = 0 ;
    27              1                          5     Ynew   = 0 ;
    28              1                          5     Yold   = 0 ; 
    29                                               end
    30                                               
    31                                               initial begin
    32                                               
    33                                               if(ATTENUATION == 10) begin
    34              1                          5     A = 1.0/$sqrt(10);  
    35                                               end  
    36                                               
    37                                               // else if(ATTENUATION == 5) begin
    38                                               //  A_ = 1.0/$sqrt(10);
    39                                               //  A  = $sqrt(A_); 
    40                                               // end
    41                                               
    42                                               else begin
    43                                               A  = $pow(10,ATTENUATION/20);  
    44                                               end
    45                                                                    // 10^(db/20)
    46              1                          5     x1 = 1.0/$pow(A,2)  ;               // 1 + (W/Wc)^2
    47              1                          5     x2 = $sqrt(x1 - 1.0);               // W/Wc = x2 = sqrt(x1-1)
    48              1                          5     Wc = (1.0/x2)*2*3.14;    // Wc
    49              1                          5     alpha = $exp(Wc*(-1*1.0/N))  ;
    50              1                          5     beta  = 1.0 - alpha ; 
    51                                               
    52                                               end
    53                                               
    54                                               
    55              1                   10996105     always @(posedge Sample_CLK) begin
    56                                                // Ynew <= 0.811 * Yold + 0.189 * Uold ;
    57              1                   10996105      Ynew <= alpha * Yold + beta * Uold ;
    58              1                   10996105      Yold <= Ynew    ;
    59              1                   10996105      Uold <= Unew    ;
    60              1                   10996105      Unew <= Data_in ;
    61                                               end
    62                                               
    63              1                    5676318     assign Ynewn = 1.0 - Ynew ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          4         4         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/channelInst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           Data_in           5           5      100.00 
                                        Sample_CLK           5           5      100.00 

Total Node Count     =          2 
Toggled Node Count   =          2 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (4 of 4 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/dataSample
=== Design Unit: work.Data_sampling
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/dataSample

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Data_sampling.sv
------------------------------------IF Branch------------------------------------
    7                                    5676313     Count coming in to IF
    7               1                    2856555     	if(data_in >= Threshold) Data_out = 1'b1;
    8               1                    2819758     	else Data_out = 1'b0;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PMA_U/dataSample --

  File Data_sampling.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (data_in >= 1)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (data_in >= 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (data_in >= 1)_0      -                             
  Row   2:          5  (data_in >= 1)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/dataSample --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Data_sampling.sv
    1                                                module Data_sampling #(parameter Threshold = 0.5)(
    2                                                	input  real data_in,
    3                                                	output reg Data_out
    4                                                );
    5                                                
    6               1                    5676313     always @(*) begin
    7               1                    2856555     	if(data_in >= Threshold) Data_out = 1'b1;
    8               1                    2819758     	else Data_out = 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/dataSample --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          Data_out           5           5      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phaseDetector
=== Design Unit: work.BBPD
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         6         6         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phaseDetector

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File BBPD.v
------------------------------------IF Branch------------------------------------
    58                                    859934     Count coming in to IF
    58              1                         20     	if(!rst_n) begin
    62              1                     859914     	else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    69                                    773452     Count coming in to IF
    69              1                         15     	if(!rst_n) begin
    73              1                     773437     	else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                    793838     Count coming in to IF
    79              1                         15      	if(!rst_n) begin
    83              1                     793823     	else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      4         4         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phaseDetector --

  File BBPD.v
-----------Focused Expression View (Bimodal)------------
Line       89 Item    1  (A ^ B)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
           A         Y
           B         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           0  A_0                   -                                  
 Row   2:           0           5  A_1                   -                                  
 Row   3:           5           5  B_0                   -                                  
 Row   4:           5           0  B_1                   -                                  

-----------Focused Expression View (Bimodal)------------
Line       90 Item    1  (B ^ C)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
           B         Y
           C         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           5  B_0                   -                                  
 Row   2:           5           0  B_1                   -                                  
 Row   3:           5           0  C_0                   -                                  
 Row   4:           0           5  C_1                   -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11        11         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phaseDetector --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File BBPD.v
    2                                                module BBPD (
    3                                                	input clk,    // Clock
    4                                                	input clk_ref,
    5                                                
    6                                                    `ifdef THREE_CLKS
    7                                                      input clk_90 ,
    8                                                      input clk_180,
    9                                                    `endif 
    10                                               
    11                                               	input Din, // serial data
    12                                               	input rst_n,  // Asynchronous reset active low
    13                                               	output   Up,Dn,
    14                                               	output reg A
    15                                               );
    16                                               
    17                                               
    18                                               ///////////////////////////////////////////////////////////// IMP1
    19                                               
    20                                               // reg B;
    21                                               // reg T_ , T;
    22                                               
    23                                               
    24                                               
    25                                               // always @(posedge clk or negedge rst_n) begin
    26                                               // 	if(!rst_n) begin
    27                                               // 		A <= 1'b0;
    28                                               // 		B <= 1'b0;
    29                                               // 		T <= 1'b0;
    30                                               // 	end else begin
    31                                               // 		B <= Din;
    32                                               // 		A <= B;
    33                                               // 		T <= T_;
    34                                               // 	end
    35                                               // end
    36                                               
    37                                               
    38                                               
    39                                               
    40                                               
    41                                               // always @(negedge clk or negedge rst_n) begin
    42                                               // 	if(~rst_n) begin
    43                                               // 		 T_<= 0;
    44                                               // 	end else begin
    45                                               // 		 T_<= Din;
    46                                               // 	end
    47                                               // end
    48                                               
    49                                               // assign Up = A ^ T;
    50                                               // assign Dn = B ^ T;
    51                                               
    52                                               
    53                                               ///////////////////////////////////////////////////////////// IMP2
    54                                               
    55                                               reg B , C;
    56                                               
    57              1                     859934     always @(posedge clk or negedge rst_n) begin
    58                                               	if(!rst_n) begin
    59              1                         20     	  A <= 0 ;	
    60                                               	end
    61                                               
    62                                               	else begin
    63              1                     859914     		A <= Din;
    64                                               	end
    65                                                 
    66                                               end
    67                                               
    68              1                     773452     always @(posedge clk_90 or negedge rst_n) begin
    69                                               	if(!rst_n) begin
    70              1                         15     	  B <= 0 ;	
    71                                               	end
    72                                               
    73                                               	else begin
    74              1                     773437     		B <= Din;
    75                                               	end
    76                                               end
    77                                               
    78              1                     793838     always @(posedge clk_180 or negedge rst_n) begin
    79                                                	if(!rst_n) begin
    80              1                         15     	  C <= 0 ;	
    81                                               	end
    82                                               
    83                                               	else begin
    84              1                     793823     		C <= Din;
    85                                               	end
    86                                               end
    87                                               
    88                                               
    89              1                    1168846     assign Up =  A ^ B ;
    90              1                    1148289     assign Dn =  B ^ C ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         22        22         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phaseDetector --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                                 A           5           5      100.00 
                                                 B           5           5      100.00 
                                                 C           5           5      100.00 
                                               Din           5           5      100.00 
                                                Dn           5           5      100.00 
                                                Up           5           5      100.00 
                                               clk           5           5      100.00 
                                            clk_90           5           5      100.00 
                                           clk_180           5           5      100.00 
                                           clk_ref           5           5      100.00 
                                             rst_n           5           5      100.00 

Total Node Count     =         11 
Toggled Node Count   =         11 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (22 of 22 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/Voting_U
=== Design Unit: work.Box_Car_Voting
=================================================================================
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/Voting_U --

  File Box_Car_Voting.sv
----------------Focused Expression View-----------------
Line       29 Item    1  (sum_up > (3 / 2))
Expression totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (sum_up > (3 / 2))         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (sum_up > (3 / 2))_0  -                             
  Row   2:          5  (sum_up > (3 / 2))_1  -                             

----------------Focused Expression View-----------------
Line       30 Item    1  (sum_dn > (3 / 2))
Expression totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (sum_dn > (3 / 2))         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (sum_dn > (3 / 2))_0  -                             
  Row   2:          5  (sum_dn > (3 / 2))_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13        13         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/Voting_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Box_Car_Voting.sv
    1                                                module Box_Car_Voting (
    2                                                    input  clk,
    3                                                    input  Dn,
    4                                                    input  Up,
    5                                                    output vote_Dn,
    6                                                    output vote_Up
    7                                                );
    8                                                  parameter NUMBER_SAMPLES = 3;
    9                                                
    10                                                 reg [NUMBER_SAMPLES-1:0] collector_up;
    11                                                 reg [NUMBER_SAMPLES-1:0] collector_dn;
    12                                                 int sum_up;
    13                                                 int sum_dn;
    14                                                 initial begin
    15              1                          5         collector_up = 0;
    16              1                          5         collector_dn = 0;
    17                                                 end
    18              1                     701313       always @(posedge clk) begin
    19              1                     701313         collector_up = {Up, collector_up[NUMBER_SAMPLES-1:1]};
    20              1                     701313         collector_dn = {Dn, collector_dn[NUMBER_SAMPLES-1:1]};
    21              1                     701313         sum_up = 0;  // Reset sum_up
    22              1                     701313         sum_dn = 0;  // Reset sum_dn
    23              1                     701313         for (int j = 0; j < NUMBER_SAMPLES; j = j + 1) begin
    23              2                    2103939     
    24              1                    2103939           sum_up = sum_up + collector_up[j];
    25              1                    2103939           sum_dn = sum_dn + collector_dn[j];
    26                                                   end
    27                                                 end
    28                                               
    29              1                     575518       assign vote_Up = (sum_up > (NUMBER_SAMPLES / 2));
    30              1                     511076       assign vote_Dn = (sum_dn > (NUMBER_SAMPLES / 2));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        150        30       120    20.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/Voting_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                                Dn           5           5      100.00 
                                                Up           5           5      100.00 
                                               clk           5           5      100.00 
                                 collector_dn[0-2]           5           5      100.00 
                                 collector_up[0-2]           5           5      100.00 
                                       sum_dn[0-1]           5           5      100.00 
                                      sum_dn[2-31]           0           0        0.00 
                                       sum_up[0-1]           5           5      100.00 
                                      sum_up[2-31]           0           0        0.00 
                                           vote_Dn           5           5      100.00 
                                           vote_Up           5           5      100.00 

Total Node Count     =         75 
Toggled Node Count   =         15 
Untoggled Node Count =         60 

Toggle Coverage      =      20.00% (30 of 150 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/DLF_U
=== Design Unit: work.Digital_Loop_Filter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/DLF_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Digital_Loop_Filter.sv
------------------------------------IF Branch------------------------------------
    28                                    413502     Count coming in to IF
    28              1                         15         if (!rst_n) begin
    33              1                     413487         end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    35                                    413487     Count coming in to CASE
    39              1                      94519             2'b10: begin  // late
    46              1                     159358             2'b01: begin  // early 
                                          159610     All False Count
Branch totals: 3 hits of 3 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       8         8         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/DLF_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Digital_Loop_Filter.sv
    3                                                module Digital_Loop_Filter (
    4                                                
    5                                                    input Up,Dn,
    6                                                    input clk,  // Clock
    7                                                    input rst_n,  // Asynchronous reset active low
    8                                                    output [10:0] code
    9                                                
    10                                               ); 
    11                                               
    12                                                 parameter PHUG = 5;
    13                                                 parameter PHASE_WIDTH = 16;
    14                                                 parameter FREQ_WIDTH  = 16;
    15                                                 parameter FRUG = 3;
    16                                               
    17                                                 reg [ FREQ_WIDTH-1:0] freq_integrator;
    18                                                 reg [PHASE_WIDTH-1:0] phase_integrator;
    19                                               
    20                                                 wire [1:0] UP_DN;
    21                                               
    22              1                     253897       assign code = phase_integrator[PHASE_WIDTH-1:PHASE_WIDTH-11];  // top 11
    23                                               
    24                                                 assign UP_DN = {Up,Dn};
    25                                               
    26              1                     413502       always @(posedge clk or negedge rst_n) begin
    27                                               
    28                                                   if (!rst_n) begin
    29                                               
    30              1                         15           phase_integrator <= 0;
    31              1                         15           freq_integrator  <= 0;
    32                                               
    33                                                   end else begin
    34                                               
    35                                                     case ({
    36                                                       Up, Dn
    37                                                     })
    38                                               
    39                                                       2'b10: begin  // late
    40                                               
    41              1                      94519               freq_integrator <= FRUG * (Up - Dn) + (freq_integrator);
    42              1                      94519               phase_integrator  <=  phase_integrator  + freq_integrator[FREQ_WIDTH-2:FREQ_WIDTH-10] + PHUG*(Up - Dn); //$unsigned(~freq_integrator[18:11])
    43                                               
    44                                                       end
    45                                               
    46                                                       2'b01: begin  // early 
    47                                               
    48              1                     159358               freq_integrator <= FRUG * (Up - Dn) + (freq_integrator);
    49              1                     159358               phase_integrator <= phase_integrator - $unsigned(

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         98        98         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/DLF_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                                Dn           5           5      100.00 
                                        UP_DN[0-1]           5           5      100.00 
                                                Up           5           5      100.00 
                                               clk           5           5      100.00 
                                        code[0-10]           5           5      100.00 
                             freq_integrator[0-15]           5           5      100.00 
                            phase_integrator[0-15]           5           5      100.00 
                                             rst_n           5           5      100.00 

Total Node Count     =         49 
Toggled Node Count   =         49 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (98 of 98 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator/Clk_gen_U
=== Design Unit: work.Clk_Gen
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       720       720         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator/Clk_gen_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_generation.sv
------------------------------------IF Branch------------------------------------
    45                                   4401001     Count coming in to IF
    45       1 (GI=1)                         30           if (~rst_n) begin
    49       1 (GI=1)                    4400971           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=2)                         30           if (~rst_n) begin
    49       1 (GI=2)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=3)                         30           if (~rst_n) begin
    49       1 (GI=3)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=4)                         30           if (~rst_n) begin
    49       1 (GI=4)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=5)                         30           if (~rst_n) begin
    49       1 (GI=5)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=6)                         30           if (~rst_n) begin
    49       1 (GI=6)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=7)                         30           if (~rst_n) begin
    49       1 (GI=7)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=8)                         30           if (~rst_n) begin
    49       1 (GI=8)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45       1 (GI=9)                         30           if (~rst_n) begin
    49       1 (GI=9)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=10)                         30           if (~rst_n) begin
    49      1 (GI=10)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=11)                         30           if (~rst_n) begin
    49      1 (GI=11)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=12)                         30           if (~rst_n) begin
    49      1 (GI=12)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=13)                         30           if (~rst_n) begin
    49      1 (GI=13)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=14)                         30           if (~rst_n) begin
    49      1 (GI=14)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=15)                         30           if (~rst_n) begin
    49      1 (GI=15)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=16)                         30           if (~rst_n) begin
    49      1 (GI=16)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=17)                         30           if (~rst_n) begin
    49      1 (GI=17)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=18)                         30           if (~rst_n) begin
    49      1 (GI=18)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=19)                         30           if (~rst_n) begin
    49      1 (GI=19)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=20)                         30           if (~rst_n) begin
    49      1 (GI=20)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=21)                         30           if (~rst_n) begin
    49      1 (GI=21)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=22)                         30           if (~rst_n) begin
    49      1 (GI=22)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=23)                         30           if (~rst_n) begin
    49      1 (GI=23)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=24)                         30           if (~rst_n) begin
    49      1 (GI=24)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=25)                         30           if (~rst_n) begin
    49      1 (GI=25)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=26)                         30           if (~rst_n) begin
    49      1 (GI=26)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=27)                         30           if (~rst_n) begin
    49      1 (GI=27)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=28)                         30           if (~rst_n) begin
    49      1 (GI=28)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=29)                         30           if (~rst_n) begin
    49      1 (GI=29)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=30)                         30           if (~rst_n) begin
    49      1 (GI=30)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=31)                         30           if (~rst_n) begin
    49      1 (GI=31)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=32)                         30           if (~rst_n) begin
    49      1 (GI=32)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=33)                         30           if (~rst_n) begin
    49      1 (GI=33)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=34)                         30           if (~rst_n) begin
    49      1 (GI=34)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=35)                         30           if (~rst_n) begin
    49      1 (GI=35)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=36)                         30           if (~rst_n) begin
    49      1 (GI=36)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=37)                         30           if (~rst_n) begin
    49      1 (GI=37)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=38)                         30           if (~rst_n) begin
    49      1 (GI=38)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=39)                         30           if (~rst_n) begin
    49      1 (GI=39)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=40)                         30           if (~rst_n) begin
    49      1 (GI=40)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=41)                         30           if (~rst_n) begin
    49      1 (GI=41)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400867     Count coming in to IF
    45      1 (GI=42)                         30           if (~rst_n) begin
    49      1 (GI=42)                    4400837           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400866     Count coming in to IF
    45      1 (GI=43)                         30           if (~rst_n) begin
    49      1 (GI=43)                    4400836           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400865     Count coming in to IF
    45      1 (GI=44)                         30           if (~rst_n) begin
    49      1 (GI=44)                    4400835           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400865     Count coming in to IF
    45      1 (GI=45)                         30           if (~rst_n) begin
    49      1 (GI=45)                    4400835           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400862     Count coming in to IF
    45      1 (GI=46)                         30           if (~rst_n) begin
    49      1 (GI=46)                    4400832           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400859     Count coming in to IF
    45      1 (GI=47)                         30           if (~rst_n) begin
    49      1 (GI=47)                    4400829           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400858     Count coming in to IF
    45      1 (GI=48)                         30           if (~rst_n) begin
    49      1 (GI=48)                    4400828           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400857     Count coming in to IF
    45      1 (GI=49)                         30           if (~rst_n) begin
    49      1 (GI=49)                    4400827           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400856     Count coming in to IF
    45      1 (GI=50)                         30           if (~rst_n) begin
    49      1 (GI=50)                    4400826           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400854     Count coming in to IF
    45      1 (GI=51)                         30           if (~rst_n) begin
    49      1 (GI=51)                    4400824           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400853     Count coming in to IF
    45      1 (GI=52)                         30           if (~rst_n) begin
    49      1 (GI=52)                    4400823           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400851     Count coming in to IF
    45      1 (GI=53)                         30           if (~rst_n) begin
    49      1 (GI=53)                    4400821           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400848     Count coming in to IF
    45      1 (GI=54)                         30           if (~rst_n) begin
    49      1 (GI=54)                    4400818           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400847     Count coming in to IF
    45      1 (GI=55)                         30           if (~rst_n) begin
    49      1 (GI=55)                    4400817           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400845     Count coming in to IF
    45      1 (GI=56)                         30           if (~rst_n) begin
    49      1 (GI=56)                    4400815           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400842     Count coming in to IF
    45      1 (GI=57)                         30           if (~rst_n) begin
    49      1 (GI=57)                    4400812           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400840     Count coming in to IF
    45      1 (GI=58)                         30           if (~rst_n) begin
    49      1 (GI=58)                    4400810           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=59)                         30           if (~rst_n) begin
    49      1 (GI=59)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=60)                         30           if (~rst_n) begin
    49      1 (GI=60)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=61)                         30           if (~rst_n) begin
    49      1 (GI=61)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=62)                         30           if (~rst_n) begin
    49      1 (GI=62)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=63)                         30           if (~rst_n) begin
    49      1 (GI=63)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=64)                         30           if (~rst_n) begin
    49      1 (GI=64)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=65)                         30           if (~rst_n) begin
    49      1 (GI=65)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=66)                         30           if (~rst_n) begin
    49      1 (GI=66)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=67)                         30           if (~rst_n) begin
    49      1 (GI=67)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=68)                         30           if (~rst_n) begin
    49      1 (GI=68)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=69)                         30           if (~rst_n) begin
    49      1 (GI=69)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=70)                         30           if (~rst_n) begin
    49      1 (GI=70)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=71)                         30           if (~rst_n) begin
    49      1 (GI=71)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=72)                         30           if (~rst_n) begin
    49      1 (GI=72)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=73)                         30           if (~rst_n) begin
    49      1 (GI=73)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=74)                         30           if (~rst_n) begin
    49      1 (GI=74)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=75)                         30           if (~rst_n) begin
    49      1 (GI=75)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=76)                         30           if (~rst_n) begin
    49      1 (GI=76)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=77)                         30           if (~rst_n) begin
    49      1 (GI=77)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=78)                         30           if (~rst_n) begin
    49      1 (GI=78)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=79)                         30           if (~rst_n) begin
    49      1 (GI=79)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=80)                         30           if (~rst_n) begin
    49      1 (GI=80)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=81)                         30           if (~rst_n) begin
    49      1 (GI=81)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=82)                         30           if (~rst_n) begin
    49      1 (GI=82)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=83)                         30           if (~rst_n) begin
    49      1 (GI=83)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=84)                         30           if (~rst_n) begin
    49      1 (GI=84)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=85)                         30           if (~rst_n) begin
    49      1 (GI=85)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=86)                         30           if (~rst_n) begin
    49      1 (GI=86)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=87)                         30           if (~rst_n) begin
    49      1 (GI=87)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400839     Count coming in to IF
    45      1 (GI=88)                         30           if (~rst_n) begin
    49      1 (GI=88)                    4400809           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400838     Count coming in to IF
    45      1 (GI=89)                         30           if (~rst_n) begin
    49      1 (GI=89)                    4400808           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=90)                         30           if (~rst_n) begin
    49      1 (GI=90)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=91)                         30           if (~rst_n) begin
    49      1 (GI=91)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=92)                         30           if (~rst_n) begin
    49      1 (GI=92)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=93)                         30           if (~rst_n) begin
    49      1 (GI=93)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=94)                         30           if (~rst_n) begin
    49      1 (GI=94)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=95)                         30           if (~rst_n) begin
    49      1 (GI=95)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=96)                         30           if (~rst_n) begin
    49      1 (GI=96)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=97)                         30           if (~rst_n) begin
    49      1 (GI=97)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=98)                         30           if (~rst_n) begin
    49      1 (GI=98)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45      1 (GI=99)                         30           if (~rst_n) begin
    49      1 (GI=99)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=100)                         30           if (~rst_n) begin
    49     1 (GI=100)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=101)                         30           if (~rst_n) begin
    49     1 (GI=101)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=102)                         30           if (~rst_n) begin
    49     1 (GI=102)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=103)                         30           if (~rst_n) begin
    49     1 (GI=103)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=104)                         30           if (~rst_n) begin
    49     1 (GI=104)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=105)                         30           if (~rst_n) begin
    49     1 (GI=105)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=106)                         30           if (~rst_n) begin
    49     1 (GI=106)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=107)                         30           if (~rst_n) begin
    49     1 (GI=107)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=108)                         30           if (~rst_n) begin
    49     1 (GI=108)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=109)                         30           if (~rst_n) begin
    49     1 (GI=109)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=110)                         30           if (~rst_n) begin
    49     1 (GI=110)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=111)                         30           if (~rst_n) begin
    49     1 (GI=111)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=112)                         30           if (~rst_n) begin
    49     1 (GI=112)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=113)                         30           if (~rst_n) begin
    49     1 (GI=113)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=114)                         30           if (~rst_n) begin
    49     1 (GI=114)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=115)                         30           if (~rst_n) begin
    49     1 (GI=115)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=116)                         30           if (~rst_n) begin
    49     1 (GI=116)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=117)                         30           if (~rst_n) begin
    49     1 (GI=117)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=118)                         30           if (~rst_n) begin
    49     1 (GI=118)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=119)                         30           if (~rst_n) begin
    49     1 (GI=119)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=120)                         30           if (~rst_n) begin
    49     1 (GI=120)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=121)                         30           if (~rst_n) begin
    49     1 (GI=121)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=122)                         30           if (~rst_n) begin
    49     1 (GI=122)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=123)                         30           if (~rst_n) begin
    49     1 (GI=123)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=124)                         30           if (~rst_n) begin
    49     1 (GI=124)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=125)                         30           if (~rst_n) begin
    49     1 (GI=125)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=126)                         30           if (~rst_n) begin
    49     1 (GI=126)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=127)                         30           if (~rst_n) begin
    49     1 (GI=127)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=128)                         30           if (~rst_n) begin
    49     1 (GI=128)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=129)                         30           if (~rst_n) begin
    49     1 (GI=129)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=130)                         30           if (~rst_n) begin
    49     1 (GI=130)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=131)                         30           if (~rst_n) begin
    49     1 (GI=131)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=132)                         30           if (~rst_n) begin
    49     1 (GI=132)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=133)                         30           if (~rst_n) begin
    49     1 (GI=133)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=134)                         30           if (~rst_n) begin
    49     1 (GI=134)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400837     Count coming in to IF
    45     1 (GI=135)                         30           if (~rst_n) begin
    49     1 (GI=135)                    4400807           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400836     Count coming in to IF
    45     1 (GI=136)                         30           if (~rst_n) begin
    49     1 (GI=136)                    4400806           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400835     Count coming in to IF
    45     1 (GI=137)                         30           if (~rst_n) begin
    49     1 (GI=137)                    4400805           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400832     Count coming in to IF
    45     1 (GI=138)                         30           if (~rst_n) begin
    49     1 (GI=138)                    4400802           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400829     Count coming in to IF
    45     1 (GI=139)                         30           if (~rst_n) begin
    49     1 (GI=139)                    4400799           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400828     Count coming in to IF
    45     1 (GI=140)                         30           if (~rst_n) begin
    49     1 (GI=140)                    4400798           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400827     Count coming in to IF
    45     1 (GI=141)                         30           if (~rst_n) begin
    49     1 (GI=141)                    4400797           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400826     Count coming in to IF
    45     1 (GI=142)                         30           if (~rst_n) begin
    49     1 (GI=142)                    4400796           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400825     Count coming in to IF
    45     1 (GI=143)                         30           if (~rst_n) begin
    49     1 (GI=143)                    4400795           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400824     Count coming in to IF
    45     1 (GI=144)                         30           if (~rst_n) begin
    49     1 (GI=144)                    4400794           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400821     Count coming in to IF
    45     1 (GI=145)                         30           if (~rst_n) begin
    49     1 (GI=145)                    4400791           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400819     Count coming in to IF
    45     1 (GI=146)                         30           if (~rst_n) begin
    49     1 (GI=146)                    4400789           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400818     Count coming in to IF
    45     1 (GI=147)                         30           if (~rst_n) begin
    49     1 (GI=147)                    4400788           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400815     Count coming in to IF
    45     1 (GI=148)                         30           if (~rst_n) begin
    49     1 (GI=148)                    4400785           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400812     Count coming in to IF
    45     1 (GI=149)                         30           if (~rst_n) begin
    49     1 (GI=149)                    4400782           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400810     Count coming in to IF
    45     1 (GI=150)                         30           if (~rst_n) begin
    49     1 (GI=150)                    4400780           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=151)                         30           if (~rst_n) begin
    49     1 (GI=151)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=152)                         30           if (~rst_n) begin
    49     1 (GI=152)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=153)                         30           if (~rst_n) begin
    49     1 (GI=153)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=154)                         30           if (~rst_n) begin
    49     1 (GI=154)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=155)                         30           if (~rst_n) begin
    49     1 (GI=155)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=156)                         30           if (~rst_n) begin
    49     1 (GI=156)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=157)                         30           if (~rst_n) begin
    49     1 (GI=157)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=158)                         30           if (~rst_n) begin
    49     1 (GI=158)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=159)                         30           if (~rst_n) begin
    49     1 (GI=159)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=160)                         30           if (~rst_n) begin
    49     1 (GI=160)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=161)                         30           if (~rst_n) begin
    49     1 (GI=161)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=162)                         30           if (~rst_n) begin
    49     1 (GI=162)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=163)                         30           if (~rst_n) begin
    49     1 (GI=163)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=164)                         30           if (~rst_n) begin
    49     1 (GI=164)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=165)                         30           if (~rst_n) begin
    49     1 (GI=165)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=166)                         30           if (~rst_n) begin
    49     1 (GI=166)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=167)                         30           if (~rst_n) begin
    49     1 (GI=167)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=168)                         30           if (~rst_n) begin
    49     1 (GI=168)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=169)                         30           if (~rst_n) begin
    49     1 (GI=169)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=170)                         30           if (~rst_n) begin
    49     1 (GI=170)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=171)                         30           if (~rst_n) begin
    49     1 (GI=171)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=172)                         30           if (~rst_n) begin
    49     1 (GI=172)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=173)                         30           if (~rst_n) begin
    49     1 (GI=173)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=174)                         30           if (~rst_n) begin
    49     1 (GI=174)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=175)                         30           if (~rst_n) begin
    49     1 (GI=175)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=176)                         30           if (~rst_n) begin
    49     1 (GI=176)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=177)                         30           if (~rst_n) begin
    49     1 (GI=177)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400809     Count coming in to IF
    45     1 (GI=178)                         30           if (~rst_n) begin
    49     1 (GI=178)                    4400779           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400808     Count coming in to IF
    45     1 (GI=179)                         30           if (~rst_n) begin
    49     1 (GI=179)                    4400778           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=180)                         30           if (~rst_n) begin
    49     1 (GI=180)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=181)                         30           if (~rst_n) begin
    49     1 (GI=181)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=182)                         30           if (~rst_n) begin
    49     1 (GI=182)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=183)                         30           if (~rst_n) begin
    49     1 (GI=183)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=184)                         30           if (~rst_n) begin
    49     1 (GI=184)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=185)                         30           if (~rst_n) begin
    49     1 (GI=185)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=186)                         30           if (~rst_n) begin
    49     1 (GI=186)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=187)                         30           if (~rst_n) begin
    49     1 (GI=187)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=188)                         30           if (~rst_n) begin
    49     1 (GI=188)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=189)                         30           if (~rst_n) begin
    49     1 (GI=189)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=190)                         30           if (~rst_n) begin
    49     1 (GI=190)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=191)                         30           if (~rst_n) begin
    49     1 (GI=191)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=192)                         30           if (~rst_n) begin
    49     1 (GI=192)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=193)                         30           if (~rst_n) begin
    49     1 (GI=193)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=194)                         30           if (~rst_n) begin
    49     1 (GI=194)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=195)                         30           if (~rst_n) begin
    49     1 (GI=195)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=196)                         30           if (~rst_n) begin
    49     1 (GI=196)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=197)                         30           if (~rst_n) begin
    49     1 (GI=197)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=198)                         30           if (~rst_n) begin
    49     1 (GI=198)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=199)                         30           if (~rst_n) begin
    49     1 (GI=199)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=200)                         30           if (~rst_n) begin
    49     1 (GI=200)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=201)                         30           if (~rst_n) begin
    49     1 (GI=201)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=202)                         30           if (~rst_n) begin
    49     1 (GI=202)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=203)                         30           if (~rst_n) begin
    49     1 (GI=203)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=204)                         30           if (~rst_n) begin
    49     1 (GI=204)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=205)                         30           if (~rst_n) begin
    49     1 (GI=205)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=206)                         30           if (~rst_n) begin
    49     1 (GI=206)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=207)                         30           if (~rst_n) begin
    49     1 (GI=207)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=208)                         30           if (~rst_n) begin
    49     1 (GI=208)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=209)                         30           if (~rst_n) begin
    49     1 (GI=209)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=210)                         30           if (~rst_n) begin
    49     1 (GI=210)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=211)                         30           if (~rst_n) begin
    49     1 (GI=211)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=212)                         30           if (~rst_n) begin
    49     1 (GI=212)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=213)                         30           if (~rst_n) begin
    49     1 (GI=213)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=214)                         30           if (~rst_n) begin
    49     1 (GI=214)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=215)                         30           if (~rst_n) begin
    49     1 (GI=215)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=216)                         30           if (~rst_n) begin
    49     1 (GI=216)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=217)                         30           if (~rst_n) begin
    49     1 (GI=217)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=218)                         30           if (~rst_n) begin
    49     1 (GI=218)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=219)                         30           if (~rst_n) begin
    49     1 (GI=219)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=220)                         30           if (~rst_n) begin
    49     1 (GI=220)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=221)                         30           if (~rst_n) begin
    49     1 (GI=221)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=222)                         30           if (~rst_n) begin
    49     1 (GI=222)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=223)                         30           if (~rst_n) begin
    49     1 (GI=223)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400807     Count coming in to IF
    45     1 (GI=224)                         30           if (~rst_n) begin
    49     1 (GI=224)                    4400777           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400806     Count coming in to IF
    45     1 (GI=225)                         30           if (~rst_n) begin
    49     1 (GI=225)                    4400776           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400805     Count coming in to IF
    45     1 (GI=226)                         30           if (~rst_n) begin
    49     1 (GI=226)                    4400775           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400803     Count coming in to IF
    45     1 (GI=227)                         30           if (~rst_n) begin
    49     1 (GI=227)                    4400773           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400801     Count coming in to IF
    45     1 (GI=228)                         30           if (~rst_n) begin
    49     1 (GI=228)                    4400771           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400800     Count coming in to IF
    45     1 (GI=229)                         30           if (~rst_n) begin
    49     1 (GI=229)                    4400770           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400798     Count coming in to IF
    45     1 (GI=230)                         30           if (~rst_n) begin
    49     1 (GI=230)                    4400768           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400797     Count coming in to IF
    45     1 (GI=231)                         30           if (~rst_n) begin
    49     1 (GI=231)                    4400767           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400796     Count coming in to IF
    45     1 (GI=232)                         30           if (~rst_n) begin
    49     1 (GI=232)                    4400766           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400794     Count coming in to IF
    45     1 (GI=233)                         30           if (~rst_n) begin
    49     1 (GI=233)                    4400764           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400793     Count coming in to IF
    45     1 (GI=234)                         30           if (~rst_n) begin
    49     1 (GI=234)                    4400763           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400790     Count coming in to IF
    45     1 (GI=235)                         30           if (~rst_n) begin
    49     1 (GI=235)                    4400760           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400787     Count coming in to IF
    45     1 (GI=236)                         30           if (~rst_n) begin
    49     1 (GI=236)                    4400757           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400785     Count coming in to IF
    45     1 (GI=237)                         30           if (~rst_n) begin
    49     1 (GI=237)                    4400755           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400783     Count coming in to IF
    45     1 (GI=238)                         30           if (~rst_n) begin
    49     1 (GI=238)                    4400753           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400782     Count coming in to IF
    45     1 (GI=239)                         30           if (~rst_n) begin
    49     1 (GI=239)                    4400752           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400780     Count coming in to IF
    45     1 (GI=240)                         30           if (~rst_n) begin
    49     1 (GI=240)                    4400750           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=241)                         30           if (~rst_n) begin
    49     1 (GI=241)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=242)                         30           if (~rst_n) begin
    49     1 (GI=242)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=243)                         30           if (~rst_n) begin
    49     1 (GI=243)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=244)                         30           if (~rst_n) begin
    49     1 (GI=244)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=245)                         30           if (~rst_n) begin
    49     1 (GI=245)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=246)                         30           if (~rst_n) begin
    49     1 (GI=246)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=247)                         30           if (~rst_n) begin
    49     1 (GI=247)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=248)                         30           if (~rst_n) begin
    49     1 (GI=248)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=249)                         30           if (~rst_n) begin
    49     1 (GI=249)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=250)                         30           if (~rst_n) begin
    49     1 (GI=250)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=251)                         30           if (~rst_n) begin
    49     1 (GI=251)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=252)                         30           if (~rst_n) begin
    49     1 (GI=252)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=253)                         30           if (~rst_n) begin
    49     1 (GI=253)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=254)                         30           if (~rst_n) begin
    49     1 (GI=254)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=255)                         30           if (~rst_n) begin
    49     1 (GI=255)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=256)                         30           if (~rst_n) begin
    49     1 (GI=256)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=257)                         30           if (~rst_n) begin
    49     1 (GI=257)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=258)                         30           if (~rst_n) begin
    49     1 (GI=258)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=259)                         30           if (~rst_n) begin
    49     1 (GI=259)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=260)                         30           if (~rst_n) begin
    49     1 (GI=260)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=261)                         30           if (~rst_n) begin
    49     1 (GI=261)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=262)                         30           if (~rst_n) begin
    49     1 (GI=262)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=263)                         30           if (~rst_n) begin
    49     1 (GI=263)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=264)                         30           if (~rst_n) begin
    49     1 (GI=264)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=265)                         30           if (~rst_n) begin
    49     1 (GI=265)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=266)                         30           if (~rst_n) begin
    49     1 (GI=266)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=267)                         30           if (~rst_n) begin
    49     1 (GI=267)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=268)                         30           if (~rst_n) begin
    49     1 (GI=268)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=269)                         30           if (~rst_n) begin
    49     1 (GI=269)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400779     Count coming in to IF
    45     1 (GI=270)                         30           if (~rst_n) begin
    49     1 (GI=270)                    4400749           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400778     Count coming in to IF
    45     1 (GI=271)                         30           if (~rst_n) begin
    49     1 (GI=271)                    4400748           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=272)                         30           if (~rst_n) begin
    49     1 (GI=272)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=273)                         30           if (~rst_n) begin
    49     1 (GI=273)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=274)                         30           if (~rst_n) begin
    49     1 (GI=274)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=275)                         30           if (~rst_n) begin
    49     1 (GI=275)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=276)                         30           if (~rst_n) begin
    49     1 (GI=276)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=277)                         30           if (~rst_n) begin
    49     1 (GI=277)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=278)                         30           if (~rst_n) begin
    49     1 (GI=278)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=279)                         30           if (~rst_n) begin
    49     1 (GI=279)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=280)                         30           if (~rst_n) begin
    49     1 (GI=280)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=281)                         30           if (~rst_n) begin
    49     1 (GI=281)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=282)                         30           if (~rst_n) begin
    49     1 (GI=282)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=283)                         30           if (~rst_n) begin
    49     1 (GI=283)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=284)                         30           if (~rst_n) begin
    49     1 (GI=284)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=285)                         30           if (~rst_n) begin
    49     1 (GI=285)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=286)                         30           if (~rst_n) begin
    49     1 (GI=286)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=287)                         30           if (~rst_n) begin
    49     1 (GI=287)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=288)                         30           if (~rst_n) begin
    49     1 (GI=288)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=289)                         30           if (~rst_n) begin
    49     1 (GI=289)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=290)                         30           if (~rst_n) begin
    49     1 (GI=290)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=291)                         30           if (~rst_n) begin
    49     1 (GI=291)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=292)                         30           if (~rst_n) begin
    49     1 (GI=292)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=293)                         30           if (~rst_n) begin
    49     1 (GI=293)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=294)                         30           if (~rst_n) begin
    49     1 (GI=294)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=295)                         30           if (~rst_n) begin
    49     1 (GI=295)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=296)                         30           if (~rst_n) begin
    49     1 (GI=296)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=297)                         30           if (~rst_n) begin
    49     1 (GI=297)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=298)                         30           if (~rst_n) begin
    49     1 (GI=298)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=299)                         30           if (~rst_n) begin
    49     1 (GI=299)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=300)                         30           if (~rst_n) begin
    49     1 (GI=300)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=301)                         30           if (~rst_n) begin
    49     1 (GI=301)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=302)                         30           if (~rst_n) begin
    49     1 (GI=302)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=303)                         30           if (~rst_n) begin
    49     1 (GI=303)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=304)                         30           if (~rst_n) begin
    49     1 (GI=304)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=305)                         30           if (~rst_n) begin
    49     1 (GI=305)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=306)                         30           if (~rst_n) begin
    49     1 (GI=306)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=307)                         30           if (~rst_n) begin
    49     1 (GI=307)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=308)                         30           if (~rst_n) begin
    49     1 (GI=308)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=309)                         30           if (~rst_n) begin
    49     1 (GI=309)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=310)                         30           if (~rst_n) begin
    49     1 (GI=310)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=311)                         30           if (~rst_n) begin
    49     1 (GI=311)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=312)                         30           if (~rst_n) begin
    49     1 (GI=312)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=313)                         30           if (~rst_n) begin
    49     1 (GI=313)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=314)                         30           if (~rst_n) begin
    49     1 (GI=314)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=315)                         30           if (~rst_n) begin
    49     1 (GI=315)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400777     Count coming in to IF
    45     1 (GI=316)                         30           if (~rst_n) begin
    49     1 (GI=316)                    4400747           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400776     Count coming in to IF
    45     1 (GI=317)                         30           if (~rst_n) begin
    49     1 (GI=317)                    4400746           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400775     Count coming in to IF
    45     1 (GI=318)                         30           if (~rst_n) begin
    49     1 (GI=318)                    4400745           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400774     Count coming in to IF
    45     1 (GI=319)                         30           if (~rst_n) begin
    49     1 (GI=319)                    4400744           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400771     Count coming in to IF
    45     1 (GI=320)                         30           if (~rst_n) begin
    49     1 (GI=320)                    4400741           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400769     Count coming in to IF
    45     1 (GI=321)                         30           if (~rst_n) begin
    49     1 (GI=321)                    4400739           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400768     Count coming in to IF
    45     1 (GI=322)                         30           if (~rst_n) begin
    49     1 (GI=322)                    4400738           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400767     Count coming in to IF
    45     1 (GI=323)                         30           if (~rst_n) begin
    49     1 (GI=323)                    4400737           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400766     Count coming in to IF
    45     1 (GI=324)                         30           if (~rst_n) begin
    49     1 (GI=324)                    4400736           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400765     Count coming in to IF
    45     1 (GI=325)                         30           if (~rst_n) begin
    49     1 (GI=325)                    4400735           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400764     Count coming in to IF
    45     1 (GI=326)                         30           if (~rst_n) begin
    49     1 (GI=326)                    4400734           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400760     Count coming in to IF
    45     1 (GI=327)                         30           if (~rst_n) begin
    49     1 (GI=327)                    4400730           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400757     Count coming in to IF
    45     1 (GI=328)                         30           if (~rst_n) begin
    49     1 (GI=328)                    4400727           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400755     Count coming in to IF
    45     1 (GI=329)                         30           if (~rst_n) begin
    49     1 (GI=329)                    4400725           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400753     Count coming in to IF
    45     1 (GI=330)                         30           if (~rst_n) begin
    49     1 (GI=330)                    4400723           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400752     Count coming in to IF
    45     1 (GI=331)                         30           if (~rst_n) begin
    49     1 (GI=331)                    4400722           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400750     Count coming in to IF
    45     1 (GI=332)                         30           if (~rst_n) begin
    49     1 (GI=332)                    4400720           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=333)                         30           if (~rst_n) begin
    49     1 (GI=333)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=334)                         30           if (~rst_n) begin
    49     1 (GI=334)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=335)                         30           if (~rst_n) begin
    49     1 (GI=335)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=336)                         30           if (~rst_n) begin
    49     1 (GI=336)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=337)                         30           if (~rst_n) begin
    49     1 (GI=337)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=338)                         30           if (~rst_n) begin
    49     1 (GI=338)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=339)                         30           if (~rst_n) begin
    49     1 (GI=339)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=340)                         30           if (~rst_n) begin
    49     1 (GI=340)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=341)                         30           if (~rst_n) begin
    49     1 (GI=341)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=342)                         30           if (~rst_n) begin
    49     1 (GI=342)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=343)                         30           if (~rst_n) begin
    49     1 (GI=343)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=344)                         30           if (~rst_n) begin
    49     1 (GI=344)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=345)                         30           if (~rst_n) begin
    49     1 (GI=345)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=346)                         30           if (~rst_n) begin
    49     1 (GI=346)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=347)                         30           if (~rst_n) begin
    49     1 (GI=347)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=348)                         30           if (~rst_n) begin
    49     1 (GI=348)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=349)                         30           if (~rst_n) begin
    49     1 (GI=349)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=350)                         30           if (~rst_n) begin
    49     1 (GI=350)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=351)                         30           if (~rst_n) begin
    49     1 (GI=351)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=352)                         30           if (~rst_n) begin
    49     1 (GI=352)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=353)                         30           if (~rst_n) begin
    49     1 (GI=353)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=354)                         30           if (~rst_n) begin
    49     1 (GI=354)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=355)                         30           if (~rst_n) begin
    49     1 (GI=355)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=356)                         30           if (~rst_n) begin
    49     1 (GI=356)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=357)                         30           if (~rst_n) begin
    49     1 (GI=357)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=358)                         30           if (~rst_n) begin
    49     1 (GI=358)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400749     Count coming in to IF
    45     1 (GI=359)                         30           if (~rst_n) begin
    49     1 (GI=359)                    4400719           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    45                                   4400748     Count coming in to IF
    45     1 (GI=360)                         30           if (~rst_n) begin
    49     1 (GI=360)                    4400718           else if(i == 1) clk_[1] <= clk_in;
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                    1084      1084         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator/Clk_gen_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_generation.sv
    3                                                module Clk_Gen(
    4                                                
    5                                                input       clk_in,
    6                                                input       rst_n,
    7                                                
    8                                                output clk_90,
    9                                                output clk_180
    10                                               
    11                                               
    12                                               );
    13                                               
    14                                               
    15                                               reg  clk                     ;
    16                                               reg  [360:1] clk_            ;
    17                                               
    18                                               ////////////////////////////////////////
    19                                               ///////// INTERNAL CLK GENERAION ///////
    20                                               ////////////////////////////////////////
    21                                               
    22                                               
    23                                               initial begin
    24              1                          5     clk = 0;
    25              1                          5     forever #0.00055 clk = ~clk ;
    25              2                  400071820     
    25              3                  400071815     
    26                                               end
    27                                               
    28                                               
    29                                               
    30                                               assign clk_90  = clk_[45] ;
    31                                               assign clk_180 = ~clk_in;
    32                                               
    33                                               
    34                                               ///////////////////////////////////////
    35                                               ///////////////////////////////////////
    36                                               ///////////////////////////////////////
    37                                               
    38                                               
    39                                               
    40                                               genvar i;
    41                                               generate
    42                                                 for (i = 1; i <= 360; i = i + 1) begin
    43       1 (GI=1)                    4401001         always @(posedge clk or negedge rst_n) begin
    43       1 (GI=2)                    4400867     
    43       1 (GI=3)                    4400867     
    43       1 (GI=4)                    4400867     
    43       1 (GI=5)                    4400867     
    43       1 (GI=6)                    4400867     
    43       1 (GI=7)                    4400867     
    43       1 (GI=8)                    4400867     
    43       1 (GI=9)                    4400867     
    43      1 (GI=10)                    4400867     
    43      1 (GI=11)                    4400867     
    43      1 (GI=12)                    4400867     
    43      1 (GI=13)                    4400867     
    43      1 (GI=14)                    4400867     
    43      1 (GI=15)                    4400867     
    43      1 (GI=16)                    4400867     
    43      1 (GI=17)                    4400867     
    43      1 (GI=18)                    4400867     
    43      1 (GI=19)                    4400867     
    43      1 (GI=20)                    4400867     
    43      1 (GI=21)                    4400867     
    43      1 (GI=22)                    4400867     
    43      1 (GI=23)                    4400867     
    43      1 (GI=24)                    4400867     
    43      1 (GI=25)                    4400867     
    43      1 (GI=26)                    4400867     
    43      1 (GI=27)                    4400867     
    43      1 (GI=28)                    4400867     
    43      1 (GI=29)                    4400867     
    43      1 (GI=30)                    4400867     
    43      1 (GI=31)                    4400867     
    43      1 (GI=32)                    4400867     
    43      1 (GI=33)                    4400867     
    43      1 (GI=34)                    4400867     
    43      1 (GI=35)                    4400867     
    43      1 (GI=36)                    4400867     
    43      1 (GI=37)                    4400867     
    43      1 (GI=38)                    4400867     
    43      1 (GI=39)                    4400867     
    43      1 (GI=40)                    4400867     
    43      1 (GI=41)                    4400867     
    43      1 (GI=42)                    4400867     
    43      1 (GI=43)                    4400866     
    43      1 (GI=44)                    4400865     
    43      1 (GI=45)                    4400865     
    43      1 (GI=46)                    4400862     
    43      1 (GI=47)                    4400859     
    43      1 (GI=48)                    4400858     
    43      1 (GI=49)                    4400857     
    43      1 (GI=50)                    4400856     
    43      1 (GI=51)                    4400854     
    43      1 (GI=52)                    4400853     
    43      1 (GI=53)                    4400851     
    43      1 (GI=54)                    4400848     
    43      1 (GI=55)                    4400847     
    43      1 (GI=56)                    4400845     
    43      1 (GI=57)                    4400842     
    43      1 (GI=58)                    4400840     
    43      1 (GI=59)                    4400839     
    43      1 (GI=60)                    4400839     
    43      1 (GI=61)                    4400839     
    43      1 (GI=62)                    4400839     
    43      1 (GI=63)                    4400839     
    43      1 (GI=64)                    4400839     
    43      1 (GI=65)                    4400839     
    43      1 (GI=66)                    4400839     
    43      1 (GI=67)                    4400839     
    43      1 (GI=68)                    4400839     
    43      1 (GI=69)                    4400839     
    43      1 (GI=70)                    4400839     
    43      1 (GI=71)                    4400839     
    43      1 (GI=72)                    4400839     
    43      1 (GI=73)                    4400839     
    43      1 (GI=74)                    4400839     
    43      1 (GI=75)                    4400839     
    43      1 (GI=76)                    4400839     
    43      1 (GI=77)                    4400839     
    43      1 (GI=78)                    4400839     
    43      1 (GI=79)                    4400839     
    43      1 (GI=80)                    4400839     
    43      1 (GI=81)                    4400839     
    43      1 (GI=82)                    4400839     
    43      1 (GI=83)                    4400839     
    43      1 (GI=84)                    4400839     
    43      1 (GI=85)                    4400839     
    43      1 (GI=86)                    4400839     
    43      1 (GI=87)                    4400839     
    43      1 (GI=88)                    4400839     
    43      1 (GI=89)                    4400838     
    43      1 (GI=90)                    4400837     
    43      1 (GI=91)                    4400837     
    43      1 (GI=92)                    4400837     
    43      1 (GI=93)                    4400837     
    43      1 (GI=94)                    4400837     
    43      1 (GI=95)                    4400837     
    43      1 (GI=96)                    4400837     
    43      1 (GI=97)                    4400837     
    43      1 (GI=98)                    4400837     
    43      1 (GI=99)                    4400837     
    43     1 (GI=100)                    4400837     
    43     1 (GI=101)                    4400837     
    43     1 (GI=102)                    4400837     
    43     1 (GI=103)                    4400837     
    43     1 (GI=104)                    4400837     
    43     1 (GI=105)                    4400837     
    43     1 (GI=106)                    4400837     
    43     1 (GI=107)                    4400837     
    43     1 (GI=108)                    4400837     
    43     1 (GI=109)                    4400837     
    43     1 (GI=110)                    4400837     
    43     1 (GI=111)                    4400837     
    43     1 (GI=112)                    4400837     
    43     1 (GI=113)                    4400837     
    43     1 (GI=114)                    4400837     
    43     1 (GI=115)                    4400837     
    43     1 (GI=116)                    4400837     
    43     1 (GI=117)                    4400837     
    43     1 (GI=118)                    4400837     
    43     1 (GI=119)                    4400837     
    43     1 (GI=120)                    4400837     
    43     1 (GI=121)                    4400837     
    43     1 (GI=122)                    4400837     
    43     1 (GI=123)                    4400837     
    43     1 (GI=124)                    4400837     
    43     1 (GI=125)                    4400837     
    43     1 (GI=126)                    4400837     
    43     1 (GI=127)                    4400837     
    43     1 (GI=128)                    4400837     
    43     1 (GI=129)                    4400837     
    43     1 (GI=130)                    4400837     
    43     1 (GI=131)                    4400837     
    43     1 (GI=132)                    4400837     
    43     1 (GI=133)                    4400837     
    43     1 (GI=134)                    4400837     
    43     1 (GI=135)                    4400837     
    43     1 (GI=136)                    4400836     
    43     1 (GI=137)                    4400835     
    43     1 (GI=138)                    4400832     
    43     1 (GI=139)                    4400829     
    43     1 (GI=140)                    4400828     
    43     1 (GI=141)                    4400827     
    43     1 (GI=142)                    4400826     
    43     1 (GI=143)                    4400825     
    43     1 (GI=144)                    4400824     
    43     1 (GI=145)                    4400821     
    43     1 (GI=146)                    4400819     
    43     1 (GI=147)                    4400818     
    43     1 (GI=148)                    4400815     
    43     1 (GI=149)                    4400812     
    43     1 (GI=150)                    4400810     
    43     1 (GI=151)                    4400809     
    43     1 (GI=152)                    4400809     
    43     1 (GI=153)                    4400809     
    43     1 (GI=154)                    4400809     
    43     1 (GI=155)                    4400809     
    43     1 (GI=156)                    4400809     
    43     1 (GI=157)                    4400809     
    43     1 (GI=158)                    4400809     
    43     1 (GI=159)                    4400809     
    43     1 (GI=160)                    4400809     
    43     1 (GI=161)                    4400809     
    43     1 (GI=162)                    4400809     
    43     1 (GI=163)                    4400809     
    43     1 (GI=164)                    4400809     
    43     1 (GI=165)                    4400809     
    43     1 (GI=166)                    4400809     
    43     1 (GI=167)                    4400809     
    43     1 (GI=168)                    4400809     
    43     1 (GI=169)                    4400809     
    43     1 (GI=170)                    4400809     
    43     1 (GI=171)                    4400809     
    43     1 (GI=172)                    4400809     
    43     1 (GI=173)                    4400809     
    43     1 (GI=174)                    4400809     
    43     1 (GI=175)                    4400809     
    43     1 (GI=176)                    4400809     
    43     1 (GI=177)                    4400809     
    43     1 (GI=178)                    4400809     
    43     1 (GI=179)                    4400808     
    43     1 (GI=180)                    4400807     
    43     1 (GI=181)                    4400807     
    43     1 (GI=182)                    4400807     
    43     1 (GI=183)                    4400807     
    43     1 (GI=184)                    4400807     
    43     1 (GI=185)                    4400807     
    43     1 (GI=186)                    4400807     
    43     1 (GI=187)                    4400807     
    43     1 (GI=188)                    4400807     
    43     1 (GI=189)                    4400807     
    43     1 (GI=190)                    4400807     
    43     1 (GI=191)                    4400807     
    43     1 (GI=192)                    4400807     
    43     1 (GI=193)                    4400807     
    43     1 (GI=194)                    4400807     
    43     1 (GI=195)                    4400807     
    43     1 (GI=196)                    4400807     
    43     1 (GI=197)                    4400807     
    43     1 (GI=198)                    4400807     
    43     1 (GI=199)                    4400807     
    43     1 (GI=200)                    4400807     
    43     1 (GI=201)                    4400807     
    43     1 (GI=202)                    4400807     
    43     1 (GI=203)                    4400807     
    43     1 (GI=204)                    4400807     
    43     1 (GI=205)                    4400807     
    43     1 (GI=206)                    4400807     
    43     1 (GI=207)                    4400807     
    43     1 (GI=208)                    4400807     
    43     1 (GI=209)                    4400807     
    43     1 (GI=210)                    4400807     
    43     1 (GI=211)                    4400807     
    43     1 (GI=212)                    4400807     
    43     1 (GI=213)                    4400807     
    43     1 (GI=214)                    4400807     
    43     1 (GI=215)                    4400807     
    43     1 (GI=216)                    4400807     
    43     1 (GI=217)                    4400807     
    43     1 (GI=218)                    4400807     
    43     1 (GI=219)                    4400807     
    43     1 (GI=220)                    4400807     
    43     1 (GI=221)                    4400807     
    43     1 (GI=222)                    4400807     
    43     1 (GI=223)                    4400807     
    43     1 (GI=224)                    4400807     
    43     1 (GI=225)                    4400806     
    43     1 (GI=226)                    4400805     
    43     1 (GI=227)                    4400803     
    43     1 (GI=228)                    4400801     
    43     1 (GI=229)                    4400800     
    43     1 (GI=230)                    4400798     
    43     1 (GI=231)                    4400797     
    43     1 (GI=232)                    4400796     
    43     1 (GI=233)                    4400794     
    43     1 (GI=234)                    4400793     
    43     1 (GI=235)                    4400790     
    43     1 (GI=236)                    4400787     
    43     1 (GI=237)                    4400785     
    43     1 (GI=238)                    4400783     
    43     1 (GI=239)                    4400782     
    43     1 (GI=240)                    4400780     
    43     1 (GI=241)                    4400779     
    43     1 (GI=242)                    4400779     
    43     1 (GI=243)                    4400779     
    43     1 (GI=244)                    4400779     
    43     1 (GI=245)                    4400779     
    43     1 (GI=246)                    4400779     
    43     1 (GI=247)                    4400779     
    43     1 (GI=248)                    4400779     
    43     1 (GI=249)                    4400779     
    43     1 (GI=250)                    4400779     
    43     1 (GI=251)                    4400779     
    43     1 (GI=252)                    4400779     
    43     1 (GI=253)                    4400779     
    43     1 (GI=254)                    4400779     
    43     1 (GI=255)                    4400779     
    43     1 (GI=256)                    4400779     
    43     1 (GI=257)                    4400779     
    43     1 (GI=258)                    4400779     
    43     1 (GI=259)                    4400779     
    43     1 (GI=260)                    4400779     
    43     1 (GI=261)                    4400779     
    43     1 (GI=262)                    4400779     
    43     1 (GI=263)                    4400779     
    43     1 (GI=264)                    4400779     
    43     1 (GI=265)                    4400779     
    43     1 (GI=266)                    4400779     
    43     1 (GI=267)                    4400779     
    43     1 (GI=268)                    4400779     
    43     1 (GI=269)                    4400779     
    43     1 (GI=270)                    4400779     
    43     1 (GI=271)                    4400778     
    43     1 (GI=272)                    4400777     
    43     1 (GI=273)                    4400777     
    43     1 (GI=274)                    4400777     
    43     1 (GI=275)                    4400777     
    43     1 (GI=276)                    4400777     
    43     1 (GI=277)                    4400777     
    43     1 (GI=278)                    4400777     
    43     1 (GI=279)                    4400777     
    43     1 (GI=280)                    4400777     
    43     1 (GI=281)                    4400777     
    43     1 (GI=282)                    4400777     
    43     1 (GI=283)                    4400777     
    43     1 (GI=284)                    4400777     
    43     1 (GI=285)                    4400777     
    43     1 (GI=286)                    4400777     
    43     1 (GI=287)                    4400777     
    43     1 (GI=288)                    4400777     
    43     1 (GI=289)                    4400777     
    43     1 (GI=290)                    4400777     
    43     1 (GI=291)                    4400777     
    43     1 (GI=292)                    4400777     
    43     1 (GI=293)                    4400777     
    43     1 (GI=294)                    4400777     
    43     1 (GI=295)                    4400777     
    43     1 (GI=296)                    4400777     
    43     1 (GI=297)                    4400777     
    43     1 (GI=298)                    4400777     
    43     1 (GI=299)                    4400777     
    43     1 (GI=300)                    4400777     
    43     1 (GI=301)                    4400777     
    43     1 (GI=302)                    4400777     
    43     1 (GI=303)                    4400777     
    43     1 (GI=304)                    4400777     
    43     1 (GI=305)                    4400777     
    43     1 (GI=306)                    4400777     
    43     1 (GI=307)                    4400777     
    43     1 (GI=308)                    4400777     
    43     1 (GI=309)                    4400777     
    43     1 (GI=310)                    4400777     
    43     1 (GI=311)                    4400777     
    43     1 (GI=312)                    4400777     
    43     1 (GI=313)                    4400777     
    43     1 (GI=314)                    4400777     
    43     1 (GI=315)                    4400777     
    43     1 (GI=316)                    4400777     
    43     1 (GI=317)                    4400776     
    43     1 (GI=318)                    4400775     
    43     1 (GI=319)                    4400774     
    43     1 (GI=320)                    4400771     
    43     1 (GI=321)                    4400769     
    43     1 (GI=322)                    4400768     
    43     1 (GI=323)                    4400767     
    43     1 (GI=324)                    4400766     
    43     1 (GI=325)                    4400765     
    43     1 (GI=326)                    4400764     
    43     1 (GI=327)                    4400760     
    43     1 (GI=328)                    4400757     
    43     1 (GI=329)                    4400755     
    43     1 (GI=330)                    4400753     
    43     1 (GI=331)                    4400752     
    43     1 (GI=332)                    4400750     
    43     1 (GI=333)                    4400749     
    43     1 (GI=334)                    4400749     
    43     1 (GI=335)                    4400749     
    43     1 (GI=336)                    4400749     
    43     1 (GI=337)                    4400749     
    43     1 (GI=338)                    4400749     
    43     1 (GI=339)                    4400749     
    43     1 (GI=340)                    4400749     
    43     1 (GI=341)                    4400749     
    43     1 (GI=342)                    4400749     
    43     1 (GI=343)                    4400749     
    43     1 (GI=344)                    4400749     
    43     1 (GI=345)                    4400749     
    43     1 (GI=346)                    4400749     
    43     1 (GI=347)                    4400749     
    43     1 (GI=348)                    4400749     
    43     1 (GI=349)                    4400749     
    43     1 (GI=350)                    4400749     
    43     1 (GI=351)                    4400749     
    43     1 (GI=352)                    4400749     
    43     1 (GI=353)                    4400749     
    43     1 (GI=354)                    4400749     
    43     1 (GI=355)                    4400749     
    43     1 (GI=356)                    4400749     
    43     1 (GI=357)                    4400749     
    43     1 (GI=358)                    4400749     
    43     1 (GI=359)                    4400749     
    43     1 (GI=360)                    4400748     
    44                                               
    45                                                     if (~rst_n) begin
    46       1 (GI=1)                         30             clk_[i] <= 0;
    46       1 (GI=2)                         30     
    46       1 (GI=3)                         30     
    46       1 (GI=4)                         30     
    46       1 (GI=5)                         30     
    46       1 (GI=6)                         30     
    46       1 (GI=7)                         30     
    46       1 (GI=8)                         30     
    46       1 (GI=9)                         30     
    46      1 (GI=10)                         30     
    46      1 (GI=11)                         30     
    46      1 (GI=12)                         30     
    46      1 (GI=13)                         30     
    46      1 (GI=14)                         30     
    46      1 (GI=15)                         30     
    46      1 (GI=16)                         30     
    46      1 (GI=17)                         30     
    46      1 (GI=18)                         30     
    46      1 (GI=19)                         30     
    46      1 (GI=20)                         30     
    46      1 (GI=21)                         30     
    46      1 (GI=22)                         30     
    46      1 (GI=23)                         30     
    46      1 (GI=24)                         30     
    46      1 (GI=25)                         30     
    46      1 (GI=26)                         30     
    46      1 (GI=27)                         30     
    46      1 (GI=28)                         30     
    46      1 (GI=29)                         30     
    46      1 (GI=30)                         30     
    46      1 (GI=31)                         30     
    46      1 (GI=32)                         30     
    46      1 (GI=33)                         30     
    46      1 (GI=34)                         30     
    46      1 (GI=35)                         30     
    46      1 (GI=36)                         30     
    46      1 (GI=37)                         30     
    46      1 (GI=38)                         30     
    46      1 (GI=39)                         30     
    46      1 (GI=40)                         30     
    46      1 (GI=41)                         30     
    46      1 (GI=42)                         30     
    46      1 (GI=43)                         30     
    46      1 (GI=44)                         30     
    46      1 (GI=45)                         30     
    46      1 (GI=46)                         30     
    46      1 (GI=47)                         30     
    46      1 (GI=48)                         30     
    46      1 (GI=49)                         30     
    46      1 (GI=50)                         30     
    46      1 (GI=51)                         30     
    46      1 (GI=52)                         30     
    46      1 (GI=53)                         30     
    46      1 (GI=54)                         30     
    46      1 (GI=55)                         30     
    46      1 (GI=56)                         30     
    46      1 (GI=57)                         30     
    46      1 (GI=58)                         30     
    46      1 (GI=59)                         30     
    46      1 (GI=60)                         30     
    46      1 (GI=61)                         30     
    46      1 (GI=62)                         30     
    46      1 (GI=63)                         30     
    46      1 (GI=64)                         30     
    46      1 (GI=65)                         30     
    46      1 (GI=66)                         30     
    46      1 (GI=67)                         30     
    46      1 (GI=68)                         30     
    46      1 (GI=69)                         30     
    46      1 (GI=70)                         30     
    46      1 (GI=71)                         30     
    46      1 (GI=72)                         30     
    46      1 (GI=73)                         30     
    46      1 (GI=74)                         30     
    46      1 (GI=75)                         30     
    46      1 (GI=76)                         30     
    46      1 (GI=77)                         30     
    46      1 (GI=78)                         30     
    46      1 (GI=79)                         30     
    46      1 (GI=80)                         30     
    46      1 (GI=81)                         30     
    46      1 (GI=82)                         30     
    46      1 (GI=83)                         30     
    46      1 (GI=84)                         30     
    46      1 (GI=85)                         30     
    46      1 (GI=86)                         30     
    46      1 (GI=87)                         30     
    46      1 (GI=88)                         30     
    46      1 (GI=89)                         30     
    46      1 (GI=90)                         30     
    46      1 (GI=91)                         30     
    46      1 (GI=92)                         30     
    46      1 (GI=93)                         30     
    46      1 (GI=94)                         30     
    46      1 (GI=95)                         30     
    46      1 (GI=96)                         30     
    46      1 (GI=97)                         30     
    46      1 (GI=98)                         30     
    46      1 (GI=99)                         30     
    46     1 (GI=100)                         30     
    46     1 (GI=101)                         30     
    46     1 (GI=102)                         30     
    46     1 (GI=103)                         30     
    46     1 (GI=104)                         30     
    46     1 (GI=105)                         30     
    46     1 (GI=106)                         30     
    46     1 (GI=107)                         30     
    46     1 (GI=108)                         30     
    46     1 (GI=109)                         30     
    46     1 (GI=110)                         30     
    46     1 (GI=111)                         30     
    46     1 (GI=112)                         30     
    46     1 (GI=113)                         30     
    46     1 (GI=114)                         30     
    46     1 (GI=115)                         30     
    46     1 (GI=116)                         30     
    46     1 (GI=117)                         30     
    46     1 (GI=118)                         30     
    46     1 (GI=119)                         30     
    46     1 (GI=120)                         30     
    46     1 (GI=121)                         30     
    46     1 (GI=122)                         30     
    46     1 (GI=123)                         30     
    46     1 (GI=124)                         30     
    46     1 (GI=125)                         30     
    46     1 (GI=126)                         30     
    46     1 (GI=127)                         30     
    46     1 (GI=128)                         30     
    46     1 (GI=129)                         30     
    46     1 (GI=130)                         30     
    46     1 (GI=131)                         30     
    46     1 (GI=132)                         30     
    46     1 (GI=133)                         30     
    46     1 (GI=134)                         30     
    46     1 (GI=135)                         30     
    46     1 (GI=136)                         30     
    46     1 (GI=137)                         30     
    46     1 (GI=138)                         30     
    46     1 (GI=139)                         30     
    46     1 (GI=140)                         30     
    46     1 (GI=141)                         30     
    46     1 (GI=142)                         30     
    46     1 (GI=143)                         30     
    46     1 (GI=144)                         30     
    46     1 (GI=145)                         30     
    46     1 (GI=146)                         30     
    46     1 (GI=147)                         30     
    46     1 (GI=148)                         30     
    46     1 (GI=149)                         30     
    46     1 (GI=150)                         30     
    46     1 (GI=151)                         30     
    46     1 (GI=152)                         30     
    46     1 (GI=153)                         30     
    46     1 (GI=154)                         30     
    46     1 (GI=155)                         30     
    46     1 (GI=156)                         30     
    46     1 (GI=157)                         30     
    46     1 (GI=158)                         30     
    46     1 (GI=159)                         30     
    46     1 (GI=160)                         30     
    46     1 (GI=161)                         30     
    46     1 (GI=162)                         30     
    46     1 (GI=163)                         30     
    46     1 (GI=164)                         30     
    46     1 (GI=165)                         30     
    46     1 (GI=166)                         30     
    46     1 (GI=167)                         30     
    46     1 (GI=168)                         30     
    46     1 (GI=169)                         30     
    46     1 (GI=170)                         30     
    46     1 (GI=171)                         30     
    46     1 (GI=172)                         30     
    46     1 (GI=173)                         30     
    46     1 (GI=174)                         30     
    46     1 (GI=175)                         30     
    46     1 (GI=176)                         30     
    46     1 (GI=177)                         30     
    46     1 (GI=178)                         30     
    46     1 (GI=179)                         30     
    46     1 (GI=180)                         30     
    46     1 (GI=181)                         30     
    46     1 (GI=182)                         30     
    46     1 (GI=183)                         30     
    46     1 (GI=184)                         30     
    46     1 (GI=185)                         30     
    46     1 (GI=186)                         30     
    46     1 (GI=187)                         30     
    46     1 (GI=188)                         30     
    46     1 (GI=189)                         30     
    46     1 (GI=190)                         30     
    46     1 (GI=191)                         30     
    46     1 (GI=192)                         30     
    46     1 (GI=193)                         30     
    46     1 (GI=194)                         30     
    46     1 (GI=195)                         30     
    46     1 (GI=196)                         30     
    46     1 (GI=197)                         30     
    46     1 (GI=198)                         30     
    46     1 (GI=199)                         30     
    46     1 (GI=200)                         30     
    46     1 (GI=201)                         30     
    46     1 (GI=202)                         30     
    46     1 (GI=203)                         30     
    46     1 (GI=204)                         30     
    46     1 (GI=205)                         30     
    46     1 (GI=206)                         30     
    46     1 (GI=207)                         30     
    46     1 (GI=208)                         30     
    46     1 (GI=209)                         30     
    46     1 (GI=210)                         30     
    46     1 (GI=211)                         30     
    46     1 (GI=212)                         30     
    46     1 (GI=213)                         30     
    46     1 (GI=214)                         30     
    46     1 (GI=215)                         30     
    46     1 (GI=216)                         30     
    46     1 (GI=217)                         30     
    46     1 (GI=218)                         30     
    46     1 (GI=219)                         30     
    46     1 (GI=220)                         30     
    46     1 (GI=221)                         30     
    46     1 (GI=222)                         30     
    46     1 (GI=223)                         30     
    46     1 (GI=224)                         30     
    46     1 (GI=225)                         30     
    46     1 (GI=226)                         30     
    46     1 (GI=227)                         30     
    46     1 (GI=228)                         30     
    46     1 (GI=229)                         30     
    46     1 (GI=230)                         30     
    46     1 (GI=231)                         30     
    46     1 (GI=232)                         30     
    46     1 (GI=233)                         30     
    46     1 (GI=234)                         30     
    46     1 (GI=235)                         30     
    46     1 (GI=236)                         30     
    46     1 (GI=237)                         30     
    46     1 (GI=238)                         30     
    46     1 (GI=239)                         30     
    46     1 (GI=240)                         30     
    46     1 (GI=241)                         30     
    46     1 (GI=242)                         30     
    46     1 (GI=243)                         30     
    46     1 (GI=244)                         30     
    46     1 (GI=245)                         30     
    46     1 (GI=246)                         30     
    46     1 (GI=247)                         30     
    46     1 (GI=248)                         30     
    46     1 (GI=249)                         30     
    46     1 (GI=250)                         30     
    46     1 (GI=251)                         30     
    46     1 (GI=252)                         30     
    46     1 (GI=253)                         30     
    46     1 (GI=254)                         30     
    46     1 (GI=255)                         30     
    46     1 (GI=256)                         30     
    46     1 (GI=257)                         30     
    46     1 (GI=258)                         30     
    46     1 (GI=259)                         30     
    46     1 (GI=260)                         30     
    46     1 (GI=261)                         30     
    46     1 (GI=262)                         30     
    46     1 (GI=263)                         30     
    46     1 (GI=264)                         30     
    46     1 (GI=265)                         30     
    46     1 (GI=266)                         30     
    46     1 (GI=267)                         30     
    46     1 (GI=268)                         30     
    46     1 (GI=269)                         30     
    46     1 (GI=270)                         30     
    46     1 (GI=271)                         30     
    46     1 (GI=272)                         30     
    46     1 (GI=273)                         30     
    46     1 (GI=274)                         30     
    46     1 (GI=275)                         30     
    46     1 (GI=276)                         30     
    46     1 (GI=277)                         30     
    46     1 (GI=278)                         30     
    46     1 (GI=279)                         30     
    46     1 (GI=280)                         30     
    46     1 (GI=281)                         30     
    46     1 (GI=282)                         30     
    46     1 (GI=283)                         30     
    46     1 (GI=284)                         30     
    46     1 (GI=285)                         30     
    46     1 (GI=286)                         30     
    46     1 (GI=287)                         30     
    46     1 (GI=288)                         30     
    46     1 (GI=289)                         30     
    46     1 (GI=290)                         30     
    46     1 (GI=291)                         30     
    46     1 (GI=292)                         30     
    46     1 (GI=293)                         30     
    46     1 (GI=294)                         30     
    46     1 (GI=295)                         30     
    46     1 (GI=296)                         30     
    46     1 (GI=297)                         30     
    46     1 (GI=298)                         30     
    46     1 (GI=299)                         30     
    46     1 (GI=300)                         30     
    46     1 (GI=301)                         30     
    46     1 (GI=302)                         30     
    46     1 (GI=303)                         30     
    46     1 (GI=304)                         30     
    46     1 (GI=305)                         30     
    46     1 (GI=306)                         30     
    46     1 (GI=307)                         30     
    46     1 (GI=308)                         30     
    46     1 (GI=309)                         30     
    46     1 (GI=310)                         30     
    46     1 (GI=311)                         30     
    46     1 (GI=312)                         30     
    46     1 (GI=313)                         30     
    46     1 (GI=314)                         30     
    46     1 (GI=315)                         30     
    46     1 (GI=316)                         30     
    46     1 (GI=317)                         30     
    46     1 (GI=318)                         30     
    46     1 (GI=319)                         30     
    46     1 (GI=320)                         30     
    46     1 (GI=321)                         30     
    46     1 (GI=322)                         30     
    46     1 (GI=323)                         30     
    46     1 (GI=324)                         30     
    46     1 (GI=325)                         30     
    46     1 (GI=326)                         30     
    46     1 (GI=327)                         30     
    46     1 (GI=328)                         30     
    46     1 (GI=329)                         30     
    46     1 (GI=330)                         30     
    46     1 (GI=331)                         30     
    46     1 (GI=332)                         30     
    46     1 (GI=333)                         30     
    46     1 (GI=334)                         30     
    46     1 (GI=335)                         30     
    46     1 (GI=336)                         30     
    46     1 (GI=337)                         30     
    46     1 (GI=338)                         30     
    46     1 (GI=339)                         30     
    46     1 (GI=340)                         30     
    46     1 (GI=341)                         30     
    46     1 (GI=342)                         30     
    46     1 (GI=343)                         30     
    46     1 (GI=344)                         30     
    46     1 (GI=345)                         30     
    46     1 (GI=346)                         30     
    46     1 (GI=347)                         30     
    46     1 (GI=348)                         30     
    46     1 (GI=349)                         30     
    46     1 (GI=350)                         30     
    46     1 (GI=351)                         30     
    46     1 (GI=352)                         30     
    46     1 (GI=353)                         30     
    46     1 (GI=354)                         30     
    46     1 (GI=355)                         30     
    46     1 (GI=356)                         30     
    46     1 (GI=357)                         30     
    46     1 (GI=358)                         30     
    46     1 (GI=359)                         30     
    46     1 (GI=360)                         30     
    47                                                     end 
    48                                               
    49       1 (GI=1)                    4400971           else if(i == 1) clk_[1] <= clk_in;
    50                                               
    51                                                     else begin
    52       1 (GI=2)                    4400837             clk_[i] <= clk_[i-1]; 
    52       1 (GI=3)                    4400837     
    52       1 (GI=4)                    4400837     
    52       1 (GI=5)                    4400837     
    52       1 (GI=6)                    4400837     
    52       1 (GI=7)                    4400837     
    52       1 (GI=8)                    4400837     
    52       1 (GI=9)                    4400837     
    52      1 (GI=10)                    4400837     
    52      1 (GI=11)                    4400837     
    52      1 (GI=12)                    4400837     
    52      1 (GI=13)                    4400837     
    52      1 (GI=14)                    4400837     
    52      1 (GI=15)                    4400837     
    52      1 (GI=16)                    4400837     
    52      1 (GI=17)                    4400837     
    52      1 (GI=18)                    4400837     
    52      1 (GI=19)                    4400837     
    52      1 (GI=20)                    4400837     
    52      1 (GI=21)                    4400837     
    52      1 (GI=22)                    4400837     
    52      1 (GI=23)                    4400837     
    52      1 (GI=24)                    4400837     
    52      1 (GI=25)                    4400837     
    52      1 (GI=26)                    4400837     
    52      1 (GI=27)                    4400837     
    52      1 (GI=28)                    4400837     
    52      1 (GI=29)                    4400837     
    52      1 (GI=30)                    4400837     
    52      1 (GI=31)                    4400837     
    52      1 (GI=32)                    4400837     
    52      1 (GI=33)                    4400837     
    52      1 (GI=34)                    4400837     
    52      1 (GI=35)                    4400837     
    52      1 (GI=36)                    4400837     
    52      1 (GI=37)                    4400837     
    52      1 (GI=38)                    4400837     
    52      1 (GI=39)                    4400837     
    52      1 (GI=40)                    4400837     
    52      1 (GI=41)                    4400837     
    52      1 (GI=42)                    4400837     
    52      1 (GI=43)                    4400836     
    52      1 (GI=44)                    4400835     
    52      1 (GI=45)                    4400835     
    52      1 (GI=46)                    4400832     
    52      1 (GI=47)                    4400829     
    52      1 (GI=48)                    4400828     
    52      1 (GI=49)                    4400827     
    52      1 (GI=50)                    4400826     
    52      1 (GI=51)                    4400824     
    52      1 (GI=52)                    4400823     
    52      1 (GI=53)                    4400821     
    52      1 (GI=54)                    4400818     
    52      1 (GI=55)                    4400817     
    52      1 (GI=56)                    4400815     
    52      1 (GI=57)                    4400812     
    52      1 (GI=58)                    4400810     
    52      1 (GI=59)                    4400809     
    52      1 (GI=60)                    4400809     
    52      1 (GI=61)                    4400809     
    52      1 (GI=62)                    4400809     
    52      1 (GI=63)                    4400809     
    52      1 (GI=64)                    4400809     
    52      1 (GI=65)                    4400809     
    52      1 (GI=66)                    4400809     
    52      1 (GI=67)                    4400809     
    52      1 (GI=68)                    4400809     
    52      1 (GI=69)                    4400809     
    52      1 (GI=70)                    4400809     
    52      1 (GI=71)                    4400809     
    52      1 (GI=72)                    4400809     
    52      1 (GI=73)                    4400809     
    52      1 (GI=74)                    4400809     
    52      1 (GI=75)                    4400809     
    52      1 (GI=76)                    4400809     
    52      1 (GI=77)                    4400809     
    52      1 (GI=78)                    4400809     
    52      1 (GI=79)                    4400809     
    52      1 (GI=80)                    4400809     
    52      1 (GI=81)                    4400809     
    52      1 (GI=82)                    4400809     
    52      1 (GI=83)                    4400809     
    52      1 (GI=84)                    4400809     
    52      1 (GI=85)                    4400809     
    52      1 (GI=86)                    4400809     
    52      1 (GI=87)                    4400809     
    52      1 (GI=88)                    4400809     
    52      1 (GI=89)                    4400808     
    52      1 (GI=90)                    4400807     
    52      1 (GI=91)                    4400807     
    52      1 (GI=92)                    4400807     
    52      1 (GI=93)                    4400807     
    52      1 (GI=94)                    4400807     
    52      1 (GI=95)                    4400807     
    52      1 (GI=96)                    4400807     
    52      1 (GI=97)                    4400807     
    52      1 (GI=98)                    4400807     
    52      1 (GI=99)                    4400807     
    52     1 (GI=100)                    4400807     
    52     1 (GI=101)                    4400807     
    52     1 (GI=102)                    4400807     
    52     1 (GI=103)                    4400807     
    52     1 (GI=104)                    4400807     
    52     1 (GI=105)                    4400807     
    52     1 (GI=106)                    4400807     
    52     1 (GI=107)                    4400807     
    52     1 (GI=108)                    4400807     
    52     1 (GI=109)                    4400807     
    52     1 (GI=110)                    4400807     
    52     1 (GI=111)                    4400807     
    52     1 (GI=112)                    4400807     
    52     1 (GI=113)                    4400807     
    52     1 (GI=114)                    4400807     
    52     1 (GI=115)                    4400807     
    52     1 (GI=116)                    4400807     
    52     1 (GI=117)                    4400807     
    52     1 (GI=118)                    4400807     
    52     1 (GI=119)                    4400807     
    52     1 (GI=120)                    4400807     
    52     1 (GI=121)                    4400807     
    52     1 (GI=122)                    4400807     
    52     1 (GI=123)                    4400807     
    52     1 (GI=124)                    4400807     
    52     1 (GI=125)                    4400807     
    52     1 (GI=126)                    4400807     
    52     1 (GI=127)                    4400807     
    52     1 (GI=128)                    4400807     
    52     1 (GI=129)                    4400807     
    52     1 (GI=130)                    4400807     
    52     1 (GI=131)                    4400807     
    52     1 (GI=132)                    4400807     
    52     1 (GI=133)                    4400807     
    52     1 (GI=134)                    4400807     
    52     1 (GI=135)                    4400807     
    52     1 (GI=136)                    4400806     
    52     1 (GI=137)                    4400805     
    52     1 (GI=138)                    4400802     
    52     1 (GI=139)                    4400799     
    52     1 (GI=140)                    4400798     
    52     1 (GI=141)                    4400797     
    52     1 (GI=142)                    4400796     
    52     1 (GI=143)                    4400795     
    52     1 (GI=144)                    4400794     
    52     1 (GI=145)                    4400791     
    52     1 (GI=146)                    4400789     
    52     1 (GI=147)                    4400788     
    52     1 (GI=148)                    4400785     
    52     1 (GI=149)                    4400782     
    52     1 (GI=150)                    4400780     
    52     1 (GI=151)                    4400779     
    52     1 (GI=152)                    4400779     
    52     1 (GI=153)                    4400779     
    52     1 (GI=154)                    4400779     
    52     1 (GI=155)                    4400779     
    52     1 (GI=156)                    4400779     
    52     1 (GI=157)                    4400779     
    52     1 (GI=158)                    4400779     
    52     1 (GI=159)                    4400779     
    52     1 (GI=160)                    4400779     
    52     1 (GI=161)                    4400779     
    52     1 (GI=162)                    4400779     
    52     1 (GI=163)                    4400779     
    52     1 (GI=164)                    4400779     
    52     1 (GI=165)                    4400779     
    52     1 (GI=166)                    4400779     
    52     1 (GI=167)                    4400779     
    52     1 (GI=168)                    4400779     
    52     1 (GI=169)                    4400779     
    52     1 (GI=170)                    4400779     
    52     1 (GI=171)                    4400779     
    52     1 (GI=172)                    4400779     
    52     1 (GI=173)                    4400779     
    52     1 (GI=174)                    4400779     
    52     1 (GI=175)                    4400779     
    52     1 (GI=176)                    4400779     
    52     1 (GI=177)                    4400779     
    52     1 (GI=178)                    4400779     
    52     1 (GI=179)                    4400778     
    52     1 (GI=180)                    4400777     
    52     1 (GI=181)                    4400777     
    52     1 (GI=182)                    4400777     
    52     1 (GI=183)                    4400777     
    52     1 (GI=184)                    4400777     
    52     1 (GI=185)                    4400777     
    52     1 (GI=186)                    4400777     
    52     1 (GI=187)                    4400777     
    52     1 (GI=188)                    4400777     
    52     1 (GI=189)                    4400777     
    52     1 (GI=190)                    4400777     
    52     1 (GI=191)                    4400777     
    52     1 (GI=192)                    4400777     
    52     1 (GI=193)                    4400777     
    52     1 (GI=194)                    4400777     
    52     1 (GI=195)                    4400777     
    52     1 (GI=196)                    4400777     
    52     1 (GI=197)                    4400777     
    52     1 (GI=198)                    4400777     
    52     1 (GI=199)                    4400777     
    52     1 (GI=200)                    4400777     
    52     1 (GI=201)                    4400777     
    52     1 (GI=202)                    4400777     
    52     1 (GI=203)                    4400777     
    52     1 (GI=204)                    4400777     
    52     1 (GI=205)                    4400777     
    52     1 (GI=206)                    4400777     
    52     1 (GI=207)                    4400777     
    52     1 (GI=208)                    4400777     
    52     1 (GI=209)                    4400777     
    52     1 (GI=210)                    4400777     
    52     1 (GI=211)                    4400777     
    52     1 (GI=212)                    4400777     
    52     1 (GI=213)                    4400777     
    52     1 (GI=214)                    4400777     
    52     1 (GI=215)                    4400777     
    52     1 (GI=216)                    4400777     
    52     1 (GI=217)                    4400777     
    52     1 (GI=218)                    4400777     
    52     1 (GI=219)                    4400777     
    52     1 (GI=220)                    4400777     
    52     1 (GI=221)                    4400777     
    52     1 (GI=222)                    4400777     
    52     1 (GI=223)                    4400777     
    52     1 (GI=224)                    4400777     
    52     1 (GI=225)                    4400776     
    52     1 (GI=226)                    4400775     
    52     1 (GI=227)                    4400773     
    52     1 (GI=228)                    4400771     
    52     1 (GI=229)                    4400770     
    52     1 (GI=230)                    4400768     
    52     1 (GI=231)                    4400767     
    52     1 (GI=232)                    4400766     
    52     1 (GI=233)                    4400764     
    52     1 (GI=234)                    4400763     
    52     1 (GI=235)                    4400760     
    52     1 (GI=236)                    4400757     
    52     1 (GI=237)                    4400755     
    52     1 (GI=238)                    4400753     
    52     1 (GI=239)                    4400752     
    52     1 (GI=240)                    4400750     
    52     1 (GI=241)                    4400749     
    52     1 (GI=242)                    4400749     
    52     1 (GI=243)                    4400749     
    52     1 (GI=244)                    4400749     
    52     1 (GI=245)                    4400749     
    52     1 (GI=246)                    4400749     
    52     1 (GI=247)                    4400749     
    52     1 (GI=248)                    4400749     
    52     1 (GI=249)                    4400749     
    52     1 (GI=250)                    4400749     
    52     1 (GI=251)                    4400749     
    52     1 (GI=252)                    4400749     
    52     1 (GI=253)                    4400749     
    52     1 (GI=254)                    4400749     
    52     1 (GI=255)                    4400749     
    52     1 (GI=256)                    4400749     
    52     1 (GI=257)                    4400749     
    52     1 (GI=258)                    4400749     
    52     1 (GI=259)                    4400749     
    52     1 (GI=260)                    4400749     
    52     1 (GI=261)                    4400749     
    52     1 (GI=262)                    4400749     
    52     1 (GI=263)                    4400749     
    52     1 (GI=264)                    4400749     
    52     1 (GI=265)                    4400749     
    52     1 (GI=266)                    4400749     
    52     1 (GI=267)                    4400749     
    52     1 (GI=268)                    4400749     
    52     1 (GI=269)                    4400749     
    52     1 (GI=270)                    4400749     
    52     1 (GI=271)                    4400748     
    52     1 (GI=272)                    4400747     
    52     1 (GI=273)                    4400747     
    52     1 (GI=274)                    4400747     
    52     1 (GI=275)                    4400747     
    52     1 (GI=276)                    4400747     
    52     1 (GI=277)                    4400747     
    52     1 (GI=278)                    4400747     
    52     1 (GI=279)                    4400747     
    52     1 (GI=280)                    4400747     
    52     1 (GI=281)                    4400747     
    52     1 (GI=282)                    4400747     
    52     1 (GI=283)                    4400747     
    52     1 (GI=284)                    4400747     
    52     1 (GI=285)                    4400747     
    52     1 (GI=286)                    4400747     
    52     1 (GI=287)                    4400747     
    52     1 (GI=288)                    4400747     
    52     1 (GI=289)                    4400747     
    52     1 (GI=290)                    4400747     
    52     1 (GI=291)                    4400747     
    52     1 (GI=292)                    4400747     
    52     1 (GI=293)                    4400747     
    52     1 (GI=294)                    4400747     
    52     1 (GI=295)                    4400747     
    52     1 (GI=296)                    4400747     
    52     1 (GI=297)                    4400747     
    52     1 (GI=298)                    4400747     
    52     1 (GI=299)                    4400747     
    52     1 (GI=300)                    4400747     
    52     1 (GI=301)                    4400747     
    52     1 (GI=302)                    4400747     
    52     1 (GI=303)                    4400747     
    52     1 (GI=304)                    4400747     
    52     1 (GI=305)                    4400747     
    52     1 (GI=306)                    4400747     
    52     1 (GI=307)                    4400747     
    52     1 (GI=308)                    4400747     
    52     1 (GI=309)                    4400747     
    52     1 (GI=310)                    4400747     
    52     1 (GI=311)                    4400747     
    52     1 (GI=312)                    4400747     
    52     1 (GI=313)                    4400747     
    52     1 (GI=314)                    4400747     
    52     1 (GI=315)                    4400747     
    52     1 (GI=316)                    4400747     
    52     1 (GI=317)                    4400746     
    52     1 (GI=318)                    4400745     
    52     1 (GI=319)                    4400744     
    52     1 (GI=320)                    4400741     
    52     1 (GI=321)                    4400739     
    52     1 (GI=322)                    4400738     
    52     1 (GI=323)                    4400737     
    52     1 (GI=324)                    4400736     
    52     1 (GI=325)                    4400735     
    52     1 (GI=326)                    4400734     
    52     1 (GI=327)                    4400730     
    52     1 (GI=328)                    4400727     
    52     1 (GI=329)                    4400725     
    52     1 (GI=330)                    4400723     
    52     1 (GI=331)                    4400722     
    52     1 (GI=332)                    4400720     
    52     1 (GI=333)                    4400719     
    52     1 (GI=334)                    4400719     
    52     1 (GI=335)                    4400719     
    52     1 (GI=336)                    4400719     
    52     1 (GI=337)                    4400719     
    52     1 (GI=338)                    4400719     
    52     1 (GI=339)                    4400719     
    52     1 (GI=340)                    4400719     
    52     1 (GI=341)                    4400719     
    52     1 (GI=342)                    4400719     
    52     1 (GI=343)                    4400719     
    52     1 (GI=344)                    4400719     
    52     1 (GI=345)                    4400719     
    52     1 (GI=346)                    4400719     
    52     1 (GI=347)                    4400719     
    52     1 (GI=348)                    4400719     
    52     1 (GI=349)                    4400719     
    52     1 (GI=350)                    4400719     
    52     1 (GI=351)                    4400719     
    52     1 (GI=352)                    4400719     
    52     1 (GI=353)                    4400719     
    52     1 (GI=354)                    4400719     
    52     1 (GI=355)                    4400719     
    52     1 (GI=356)                    4400719     
    52     1 (GI=357)                    4400719     
    52     1 (GI=358)                    4400719     
    52     1 (GI=359)                    4400719     
    52     1 (GI=360)                    4400718     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator/Clk_gen_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           5           5      100.00 
                                            clk_90           5           5      100.00 
                                           clk_180           5           5      100.00 
                                            clk_in           5           5      100.00 
                                             rst_n           5           5      100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator
=== Design Unit: work.PMIX
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        29        24         5    82.75%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PMIX4.sv
------------------------------------IF Branch------------------------------------
    117                                109178261     Count coming in to IF
    117             1                   56112980         if (sin_sum >= THRESHOLD) CLK_Out_i = 1;
    118             1                   53065281         else CLK_Out_i = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    123                                396072900     Count coming in to IF
    123             1                  202436585         if (sin_0[index] >= THRESHOLD) sign_0 = 1;
    124             1                  193636315         else sign_0 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    129                                396072900     Count coming in to IF
    129             1                  202436275         if (sin_45[index] >= THRESHOLD) sign_45 = 1;
    130             1                  193636625         else sign_45 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    135                                396072900     Count coming in to IF
    135             1                  202435945         if (sin_90[index] >= THRESHOLD) sign_90 = 1;
    136             1                  193636955         else sign_90 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    141                                396072900     Count coming in to IF
    141             1                  202435635         if (sin_135[index] >= THRESHOLD) sign_135 = 1;
    142             1                  193637265         else sign_135 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    147                                396072900     Count coming in to IF
    147             1                  202435340         if (sin_180[index] >= THRESHOLD) sign_180 = 1;
    148             1                  193637560         else sign_180 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    153                                396072900     Count coming in to IF
    153             1                  202435635         if (sin_225[index] >= THRESHOLD) sign_225 = 1;
    154             1                  193637265         else sign_225 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    159                                396072900     Count coming in to IF
    159             1                  202435965         if (sin_270[index] >= THRESHOLD) sign_270 = 1;
    160             1                  193636935         else sign_270 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    164                                396072900     Count coming in to IF
    164             1                  202436285         if (sin_315[index] >= THRESHOLD) sign_315 = 1;
    165             1                  193636615         else sign_315 = 0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    280                                396322661     Count coming in to IF
    280             1                  396319066         if (!preparation_flag) begin
                                            3595     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    282                                396319066     Count coming in to CASE
    284             1                    7112416             3'b000: begin
    288             1                   82417852             3'b001: begin
    293             1                  293264363             3'b010: begin
    298             1                    ***0***             3'b011: begin
    303             1                    ***0***             3'b100: begin
    308             1                    ***0***             3'b101: begin
    313             1                    ***0***             3'b110: begin
    318             1                   13524435             3'b111: begin
                                         ***0***     All False Count
Branch totals: 4 hits of 9 branches = 44.44%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      10        10         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator --

  File PMIX4.sv
----------------Focused Condition View-------------------
Line       117 Item    1  (sin_sum >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (sin_sum >= 25)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (sin_sum >= 25)_0     -                             
  Row   2:          5  (sin_sum >= 25)_1     -                             

----------------Focused Condition View-------------------
Line       123 Item    1  (sin_0[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (sin_0[index] >= 25)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          5  (sin_0[index] >= 25)_0  -                             
  Row   2:          5  (sin_0[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       129 Item    1  (sin_45[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  (sin_45[index] >= 25)         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          5  (sin_45[index] >= 25)_0  -                             
  Row   2:          5  (sin_45[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       135 Item    1  (sin_90[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  (sin_90[index] >= 25)         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          5  (sin_90[index] >= 25)_0  -                             
  Row   2:          5  (sin_90[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       141 Item    1  (sin_135[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (sin_135[index] >= 25)         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          5  (sin_135[index] >= 25)_0  -                             
  Row   2:          5  (sin_135[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       147 Item    1  (sin_180[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (sin_180[index] >= 25)         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          5  (sin_180[index] >= 25)_0  -                             
  Row   2:          5  (sin_180[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       153 Item    1  (sin_225[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (sin_225[index] >= 25)         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          5  (sin_225[index] >= 25)_0  -                             
  Row   2:          5  (sin_225[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       159 Item    1  (sin_270[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (sin_270[index] >= 25)         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          5  (sin_270[index] >= 25)_0  -                             
  Row   2:          5  (sin_270[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       164 Item    1  (sin_315[index] >= 25)
Condition totals: 1 of 1 input term covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (sin_315[index] >= 25)         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          5  (sin_315[index] >= 25)_0  -                             
  Row   2:          5  (sin_315[index] >= 25)_1  -                             

----------------Focused Condition View-------------------
Line       253 Item    1  (i != 360)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  (i != 360)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          5  (i != 360)_0          -                             
  Row   2:          5  (i != 360)_1          -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     445       441         4    99.10%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PMIX4.sv
    3                                                module PMIX #(
    4                                                    parameter THRESHOLD = 25,
    5                                                    parameter WIDTH = 9
    6                                                ) (
    7                                                    input             CLK,
    8                                                    input      [10:0] Code,
    9                                                
    10                                                   // output reg        clk_filter_
    11                                                   `ifdef THREE_CLKS
    12                                                       input   rst_n         ,
    13                                                       output  clk_90        ,
    14                                                       output  clk_180       ,
    15                                                   `endif
    16                                               
    17                                                   output reg        CLK_Out_i
    18                                                   
    19                                               );
    20                                               
    21                                               
    22                                                 realtime        Queue       [$];
    23                                               
    24                                                 reg             clk_index;
    25                                                 int             index;
    26                                                 reg      [15:0] sin_sum ;
    27                                               
    28                                               
    29                                               // `ifdef THREE_CLKS
    30                                               //   reg [15:0] sin_sum2 , sin_sum3;
    31                                               // `endif 
    32                                               
    33                                               
    34                                               
    35                                               
    36                                                 integer         PHASE_SHIFT;
    37                                               
    38                                                 realtime        t1;
    39                                                 realtime        t2;
    40                                                 realtime T1, T_;
    41                                                 reg      [15:0] sin1;
    42                                               
    43                                               
    44                                                 realtime        t3;
    45                                                 realtime        t4;
    46                                                 realtime        T1_P2;
    47                                                 reg      [15:0] sin2;
    48                                               
    49                                                 realtime        t5;
    50                                                 realtime        t6;
    51                                                 realtime        RESULT_PERIOD;
    52                                               
    53                                               
    54                                                 // reg             CLK_Out_i;
    55                                                 realtime        time_now;
    56                                                 reg             preparation_flag;
    57                                               
    58                                                 //////////////////////////////////
    59                                                 /////// CLK FILTERING SIGNALS/////
    60                                                 //////////////////////////////////
    61                                                 // reg             clk_filter;
    62                                                 reg glitchR_found, glitchF_found;
    63                                                 //////////////////////////////////
    64                                                 //////////////////////////////////  
    65                                               
    66                                                 reg [WIDTH-1:0] sine[0:359];
    67                                               
    68                                                 int PPM;
    69                                               
    70                                               
    71                                                 assign CLK_Out = CLK_Out_i;
    72                                               
    73                                               
    74                                                 integer i, j, k;
    75                                                 realtime               last_time;  // Require time data type
    76                                               
    77                                                 reg      [WIDTH - 1:0] sin_0                                [0:359];
    78                                                 reg      [WIDTH - 1:0] sin_90                               [0:359];
    79                                                 reg      [WIDTH - 1:0] sin_180                              [0:359];
    80                                                 reg      [WIDTH - 1:0] sin_270                              [0:359];
    81                                                 reg      [WIDTH - 1:0] sin_45                               [0:359];
    82                                                 reg      [WIDTH - 1:0] sin_135                              [0:359];
    83                                                 reg      [WIDTH - 1:0] sin_225                              [0:359];
    84                                                 reg      [WIDTH - 1:0] sin_315                              [0:359];
    85                                               
    86                                               
    87                                               
    88                                                 reg                    sign_0;
    89                                                 reg                    sign_90;
    90                                                 reg                    sign_180;
    91                                                 reg                    sign_270;
    92                                                 reg                    sign_45;
    93                                                 reg                    sign_135;
    94                                                 reg                    sign_225;
    95                                                 reg                    sign_315;
    96                                               
    97                                               
    98                                               
    99                                               `ifdef THREE_CLKS
    100                                              
    101                                                 Clk_Gen Clk_gen_U(
    102                                                 
    103                                                 .clk_in(CLK_Out_i)  ,
    104                                                 .rst_n (rst_n)  ,
    105                                                 
    106                                                 .clk_90  (clk_90),
    107                                                 .clk_180 (clk_180)
    108                                                 );
    109                                              
    110                                              `endif
    111                                              
    112                                                ////////////////////////////////////////////////
    113                                                //////////////// SIGN OF SIN WAVES //////////////
    114                                                ////////////////////////////////////////////////
    115                                              
    116             1                  109178261       always @* begin
    117             1                   56112980         if (sin_sum >= THRESHOLD) CLK_Out_i = 1;
    118             1                   53065281         else CLK_Out_i = 0;
    119                                                end
    120                                              
    121                                              
    122             1                  396072900       always @* begin
    123             1                  202436585         if (sin_0[index] >= THRESHOLD) sign_0 = 1;
    124             1                  193636315         else sign_0 = 0;
    125                                                end
    126                                              
    127                                              
    128             1                  396072900       always @* begin
    129             1                  202436275         if (sin_45[index] >= THRESHOLD) sign_45 = 1;
    130             1                  193636625         else sign_45 = 0;
    131                                                end
    132                                              
    133                                              
    134             1                  396072900       always @* begin
    135             1                  202435945         if (sin_90[index] >= THRESHOLD) sign_90 = 1;
    136             1                  193636955         else sign_90 = 0;
    137                                                end
    138                                              
    139                                              
    140             1                  396072900       always @* begin
    141             1                  202435635         if (sin_135[index] >= THRESHOLD) sign_135 = 1;
    142             1                  193637265         else sign_135 = 0;
    143                                                end
    144                                              
    145                                              
    146             1                  396072900       always @* begin
    147             1                  202435340         if (sin_180[index] >= THRESHOLD) sign_180 = 1;
    148             1                  193637560         else sign_180 = 0;
    149                                                end
    150                                              
    151                                              
    152             1                  396072900       always @* begin
    153             1                  202435635         if (sin_225[index] >= THRESHOLD) sign_225 = 1;
    154             1                  193637265         else sign_225 = 0;
    155                                                end
    156                                              
    157                                              
    158             1                  396072900       always @* begin
    159             1                  202435965         if (sin_270[index] >= THRESHOLD) sign_270 = 1;
    160             1                  193636935         else sign_270 = 0;
    161                                                end
    162                                              
    163             1                  396072900       always @* begin
    164             1                  202436285         if (sin_315[index] >= THRESHOLD) sign_315 = 1;
    165             1                  193636615         else sign_315 = 0;
    166                                                end
    167                                              
    168                                              
    169                                              
    170                                              
    171                                                ////////////////////////////////////////////////
    172                                                ////////////////////////////////////////////////
    173                                                ////////////////////////////////////////////////
    174                                              
    175                                              
    176                                                // always @* begin
    177                                                // PHASE_SHIFT    = t3 - t1 ;
    178                                                // end
    179                                              
    180                                              
    181                                                initial begin
    182             1                          5         i             = 0;
    183             1                          5         j             = 0;
    184             1                          5         k             = 0;
    185             1                          5         last_time     = 0;
    186             1                          5         T1            = 0;
    187                                                  // clk_filter_   = 0;
    188                                                  // clk_filter    = 0;
    189             1                          5         glitchF_found = 0;
    190             1                          5         glitchR_found = 0;
    191                                                end
    192                                              
    193                                              
    194                                                initial begin
    195             1                          5         forever begin
    196             1                     549915           @(posedge CLK);
    197             1                     549915           t1 = $realtime;
    198             1                     549915           @(posedge CLK);
    199             1                     549910           t2  = $realtime;
    200             1                     549910           T1  = t2 - t1;
    201             1                     549910           PPM = int'(((5 - (1 / T1)) / (5)) * (10 ** 6));
    202                                                  end
    203                                                end
    204                                              
    205                                              
    206                                                initial begin
    207             1                          5         forever begin
    208             1                     550455           @(negedge sign_0);
    209             1                     550455           t3 = $realtime;
    210             1                     550455           @(negedge sign_0);
    211             1                     550450           t4 = $realtime;
    212             1                     550450           T_ = t4 - t3;
    213                                                  end
    214                                                end
    215                                              
    216                                              
    217                                              
    218                                              
    219                                              
    220                                                initial begin
    221             1                          5         forever begin
    222             1                     550183           @(posedge CLK_Out_i);
    223             1                     550178           t5 = $realtime;
    224             1                     550178           @(posedge CLK_Out_i);
    225             1                     550178           t6 = $realtime;
    226             1                     550178           RESULT_PERIOD = t6 - t5;
    227                                                  end
    228                                                end
    229                                              
    230                                              
    231                                              
    232                                              
    233                                                reg clk_sin;
    234             1                          5       initial clk_sin = 0;
    235             1                  791508995       always #(((0.2 / 360) / 2)) clk_sin = ~clk_sin;
    235             2                  791508990     
    236                                              
    237                                              
    238                                              
    239                                                initial begin
    240                                              
    241             1                       1800         do begin
    242             1                       1800           preparation_flag = 1;
    243             1                       1800           @(posedge clk_sin);
    244             1                       1800           sin_0[i]   = sine[i];
    245             1                       1800           sin_45[i]  = sine[(i+45)%360];
    246             1                       1800           sin_90[i]  = sine[(i+90)%360];
    247             1                       1800           sin_135[i] = sine[(i+135)%360];
    248             1                       1800           sin_180[i] = sine[(i+180)%360];
    249             1                       1800           sin_225[i] = sine[(i+225)%360];
    250             1                       1800           sin_270[i] = sine[(i+270)%360];
    251             1                       1800           sin_315[i] = sine[(i+315)%360];
    252             1                       1800           i          = i + 1;
    253                                                  end while (i != 360);
    254             1                          5         i = 0;
    255             1                          5         preparation_flag = 0;
    256                                                end
    257                                              
    258                                              
    259                                              
    260                                              
    261             1                          5       initial clk_index = 0;
    262             1                        INF       always #(0.0001) clk_index = ~clk_index;  //0.0002
    262             2                        INF     
    263                                              
    264                                              
    265                                                ////////////////////////////////////////////////
    266                                                //////////////// INDEX CHANGE //////////////////
    267                                                ////////////////////////////////////////////////
    268                                              
    269             1                 1100197500       always @(posedge clk_index) begin
    270             1                 1100197500         time_now = $realtime - 0.2 * $floor($realtime / 0.2);  //T1 ---> change to T1
    271             1                 1100197500         index    = integer'((time_now / 0.2) * 360) % 360;
    272                                                end
    273                                              
    274                                                ////////////////////////////////////////////////
    275                                                ////////////////////////////////////////////////
    276                                                ////////////////////////////////////////////////
    277                                              
    278                                              
    279             1                  396322661       always @(*) begin
    280                                                  if (!preparation_flag) begin
    281                                              
    282                                                    case (Code[10:8])
    283                                              
    284                                                      3'b000: begin
    285             1                    7112416               sin_sum  = ((Code[7:0]/255.0 * sin_45[index]  + ((255.0 - Code[7:0])/255.0 * sin_0[index] )))      ;
    286                                                      end
    287                                              
    288                                                      3'b001: begin
    289             1                   82417852               sin_sum   = ((Code[7:0]/255.0 * sin_90[index]  + ((255.0 - Code[7:0])/255.0 * sin_45[index] )))       ;
    290                                              
    291                                                      end
    292                                              
    293                                                      3'b010: begin
    294             1                  293264363               sin_sum  = ((Code[7:0]/255.0 * sin_135[index] + ((255.0 - Code[7:0])/255.0 * sin_90[index] )))    ;
    295                                              
    296                                                      end
    297                                              
    298                                                      3'b011: begin
    299             1                    ***0***               sin_sum  = ((Code[7:0]/255.0 * sin_180[index]  + ((255.0 - Code[7:0])/255.0 * sin_135[index] )))  ;
    300                                                 
    301                                                      end
    302                                              
    303                                                      3'b100: begin
    304             1                    ***0***               sin_sum  = ((Code[7:0]/255.0 * sin_225[index]  + ((255.0 - Code[7:0])/255.0 * sin_180[index] )))  ;
    305                                              
    306                                                      end
    307                                              
    308                                                      3'b101: begin
    309             1                    ***0***               sin_sum  = ((Code[7:0]/255.0 * sin_270[index]  + ((255.0 - Code[7:0])/255.0 * sin_225[index] )))  ;
    310                                              
    311                                                      end
    312                                              
    313                                                      3'b110: begin
    314             1                    ***0***               sin_sum  = ((Code[7:0]/255.0 * sin_315[index]  + ((255.0 - Code[7:0])/255.0 * sin_270[index] )))  ;
    315                                              
    316                                                      end
    317                                              
    318                                                      3'b111: begin
    319             1                   13524435               sin_sum  = ((Code[7:0]/255.0 * sin_0[index]  + ((255.0 - Code[7:0])/255.0 * sin_315[index] )))    ;
    320                                                   
    321                                                      end
    322                                                    endcase
    323                                              
    324                                                  end
    325                                                end
    326                                              
    327                                              
    328                                              
    329                                                // always @(*) begin
    330                                                //   // if (!glitchF_found) begin
    331                                                //   @(posedge CLK_Out_i);
    332                                                //   clk_filter = 1;
    333                                                //   // #0.000002;
    334                                                //   #0.01;
    335                                                //   // $display("HERE 11,out = %b , filter = %b ,t= %t", CLK_Out_i, clk_filter, $realtime);
    336                                              
    337                                                //   if (clk_filter != CLK_Out_i) begin
    338                                                //     clk_filter_ = 0;
    339                                                //     // glitchR_found = 1;
    340                                                //     // $display("HERE 1, t= %t", $realtime);
    341                                                //   end else begin
    342                                                //     clk_filter_ = 1;
    343                                                //     // glitchR_found = 0;
    344                                                //     // $display("HERE 2");
    345                                                //   end
    346                                                //   // end
    347                                                // end
    348                                              
    349                                              
    350                                                // always @(*) begin
    351                                                //   // if (!glitchR_found) begin
    352                                                //   @(negedge CLK_Out_i);
    353                                                //   clk_filter = 0;
    354                                                //   // #0.000002;
    355                                                //   #0.01;
    356                                                //   if (clk_filter != CLK_Out_i) begin
    357                                                //     clk_filter_ = 1;
    358                                                //     // glitchF_found = 1;
    359                                                //     // $display("HERE 3");
    360                                                //   end else begin
    361                                                //     clk_filter_ = 0;
    362                                                //     // glitchF_found = 1'b0;
    363                                                //     // $display("HERE 4");
    364                                                //   end
    365                                                //   // end
    366                                                // end
    367                                              
    368                                              
    369                                              
    370                                                initial begin
    371                                              
    372                                              
    373             1                          5         sine[0]   = 25;
    374             1                          5         sine[1]   = 25;
    375             1                          5         sine[2]   = 26;
    376             1                          5         sine[3]   = 26;
    377             1                          5         sine[4]   = 27;
    378             1                          5         sine[5]   = 27;
    379             1                          5         sine[6]   = 28;
    380             1                          5         sine[7]   = 28;
    381             1                          5         sine[8]   = 28;
    382             1                          5         sine[9]   = 29;
    383             1                          5         sine[10]  = 29;
    384             1                          5         sine[11]  = 30;
    385             1                          5         sine[12]  = 30;
    386             1                          5         sine[13]  = 31;
    387             1                          5         sine[14]  = 31;
    388             1                          5         sine[15]  = 31;
    389             1                          5         sine[16]  = 32;
    390             1                          5         sine[17]  = 32;
    391             1                          5         sine[18]  = 33;
    392             1                          5         sine[19]  = 33;
    393             1                          5         sine[20]  = 34;
    394             1                          5         sine[21]  = 34;
    395             1                          5         sine[22]  = 34;
    396             1                          5         sine[23]  = 35;
    397             1                          5         sine[24]  = 35;
    398             1                          5         sine[25]  = 36;
    399             1                          5         sine[26]  = 36;
    400             1                          5         sine[27]  = 36;
    401             1                          5         sine[28]  = 37;
    402             1                          5         sine[29]  = 37;
    403             1                          5         sine[30]  = 38;
    404             1                          5         sine[31]  = 38;
    405             1                          5         sine[32]  = 38;
    406             1                          5         sine[33]  = 39;
    407             1                          5         sine[34]  = 39;
    408             1                          5         sine[35]  = 39;
    409             1                          5         sine[36]  = 40;
    410             1                          5         sine[37]  = 40;
    411             1                          5         sine[38]  = 40;
    412             1                          5         sine[39]  = 41;
    413             1                          5         sine[40]  = 41;
    414             1                          5         sine[41]  = 41;
    415             1                          5         sine[42]  = 42;
    416             1                          5         sine[43]  = 42;
    417             1                          5         sine[44]  = 42;
    418             1                          5         sine[45]  = 43;
    419             1                          5         sine[46]  = 43;
    420             1                          5         sine[47]  = 43;
    421             1                          5         sine[48]  = 44;
    422             1                          5         sine[49]  = 44;
    423             1                          5         sine[50]  = 44;
    424             1                          5         sine[51]  = 44;
    425             1                          5         sine[52]  = 45;
    426             1                          5         sine[53]  = 45;
    427             1                          5         sine[54]  = 45;
    428             1                          5         sine[55]  = 45;
    429             1                          5         sine[56]  = 46;
    430             1                          5         sine[57]  = 46;
    431             1                          5         sine[58]  = 46;
    432             1                          5         sine[59]  = 46;
    433             1                          5         sine[60]  = 47;
    434             1                          5         sine[61]  = 47;
    435             1                          5         sine[62]  = 47;
    436             1                          5         sine[63]  = 47;
    437             1                          5         sine[64]  = 47;
    438             1                          5         sine[65]  = 48;
    439             1                          5         sine[66]  = 48;
    440             1                          5         sine[67]  = 48;
    441             1                          5         sine[68]  = 48;
    442             1                          5         sine[69]  = 48;
    443             1                          5         sine[70]  = 48;
    444             1                          5         sine[71]  = 49;
    445             1                          5         sine[72]  = 49;
    446             1                          5         sine[73]  = 49;
    447             1                          5         sine[74]  = 49;
    448             1                          5         sine[75]  = 49;
    449             1                          5         sine[76]  = 49;
    450             1                          5         sine[77]  = 49;
    451             1                          5         sine[78]  = 49;
    452             1                          5         sine[79]  = 50;
    453             1                          5         sine[80]  = 50;
    454             1                          5         sine[81]  = 50;
    455             1                          5         sine[82]  = 50;
    456             1                          5         sine[83]  = 50;
    457             1                          5         sine[84]  = 50;
    458             1                          5         sine[85]  = 50;
    459             1                          5         sine[86]  = 50;
    460             1                          5         sine[87]  = 50;
    461             1                          5         sine[88]  = 50;
    462             1                          5         sine[89]  = 50;
    463             1                          5         sine[90]  = 50;
    464             1                          5         sine[91]  = 50;
    465             1                          5         sine[92]  = 50;
    466             1                          5         sine[93]  = 50;
    467             1                          5         sine[94]  = 50;
    468             1                          5         sine[95]  = 50;
    469             1                          5         sine[96]  = 50;
    470             1                          5         sine[97]  = 50;
    471             1                          5         sine[98]  = 50;
    472             1                          5         sine[99]  = 50;
    473             1                          5         sine[100] = 50;
    474             1                          5         sine[101] = 50;
    475             1                          5         sine[102] = 50;
    476             1                          5         sine[103] = 49;
    477             1                          5         sine[104] = 49;
    478             1                          5         sine[105] = 49;
    479             1                          5         sine[106] = 49;
    480             1                          5         sine[107] = 49;
    481             1                          5         sine[108] = 49;
    482             1                          5         sine[109] = 49;
    483             1                          5         sine[110] = 49;
    484             1                          5         sine[111] = 48;
    485             1                          5         sine[112] = 48;
    486             1                          5         sine[113] = 48;
    487             1                          5         sine[114] = 48;
    488             1                          5         sine[115] = 48;
    489             1                          5         sine[116] = 48;
    490             1                          5         sine[117] = 47;
    491             1                          5         sine[118] = 47;
    492             1                          5         sine[119] = 47;
    493             1                          5         sine[120] = 47;
    494             1                          5         sine[121] = 47;
    495             1                          5         sine[122] = 46;
    496             1                          5         sine[123] = 46;
    497             1                          5         sine[124] = 46;
    498             1                          5         sine[125] = 46;
    499             1                          5         sine[126] = 45;
    500             1                          5         sine[127] = 45;
    501             1                          5         sine[128] = 45;
    502             1                          5         sine[129] = 45;
    503             1                          5         sine[130] = 44;
    504             1                          5         sine[131] = 44;
    505             1                          5         sine[132] = 44;
    506             1                          5         sine[133] = 44;
    507             1                          5         sine[134] = 43;
    508             1                          5         sine[135] = 43;
    509             1                          5         sine[136] = 43;
    510             1                          5         sine[137] = 42;
    511             1                          5         sine[138] = 42;
    512             1                          5         sine[139] = 42;
    513             1                          5         sine[140] = 41;
    514             1                          5         sine[141] = 41;
    515             1                          5         sine[142] = 41;
    516             1                          5         sine[143] = 40;
    517             1                          5         sine[144] = 40;
    518             1                          5         sine[145] = 40;
    519             1                          5         sine[146] = 39;
    520             1                          5         sine[147] = 39;
    521             1                          5         sine[148] = 39;
    522             1                          5         sine[149] = 38;
    523             1                          5         sine[150] = 38;
    524             1                          5         sine[151] = 38;
    525             1                          5         sine[152] = 37;
    526             1                          5         sine[153] = 37;
    527             1                          5         sine[154] = 36;
    528             1                          5         sine[155] = 36;
    529             1                          5         sine[156] = 36;
    530             1                          5         sine[157] = 35;
    531             1                          5         sine[158] = 35;
    532             1                          5         sine[159] = 34;
    533             1                          5         sine[160] = 34;
    534             1                          5         sine[161] = 34;
    535             1                          5         sine[162] = 33;
    536             1                          5         sine[163] = 33;
    537             1                          5         sine[164] = 32;
    538             1                          5         sine[165] = 32;
    539             1                          5         sine[166] = 31;
    540             1                          5         sine[167] = 31;
    541             1                          5         sine[168] = 31;
    542             1                          5         sine[169] = 30;
    543             1                          5         sine[170] = 30;
    544             1                          5         sine[171] = 29;
    545             1                          5         sine[172] = 29;
    546             1                          5         sine[173] = 28;
    547             1                          5         sine[174] = 28;
    548             1                          5         sine[175] = 28;
    549             1                          5         sine[176] = 27;
    550             1                          5         sine[177] = 27;
    551             1                          5         sine[178] = 26;
    552             1                          5         sine[179] = 26;
    553             1                          5         sine[180] = 25;
    554             1                          5         sine[181] = 25;
    555             1                          5         sine[182] = 25;
    556             1                          5         sine[183] = 24;
    557             1                          5         sine[184] = 24;
    558             1                          5         sine[185] = 23;
    559             1                          5         sine[186] = 23;
    560             1                          5         sine[187] = 22;
    561             1                          5         sine[188] = 22;
    562             1                          5         sine[189] = 22;
    563             1                          5         sine[190] = 21;
    564             1                          5         sine[191] = 21;
    565             1                          5         sine[192] = 20;
    566             1                          5         sine[193] = 20;
    567             1                          5         sine[194] = 19;
    568             1                          5         sine[195] = 19;
    569             1                          5         sine[196] = 19;
    570             1                          5         sine[197] = 18;
    571             1                          5         sine[198] = 18;
    572             1                          5         sine[199] = 17;
    573             1                          5         sine[200] = 17;
    574             1                          5         sine[201] = 16;
    575             1                          5         sine[202] = 16;
    576             1                          5         sine[203] = 16;
    577             1                          5         sine[204] = 15;
    578             1                          5         sine[205] = 15;
    579             1                          5         sine[206] = 14;
    580             1                          5         sine[207] = 14;
    581             1                          5         sine[208] = 14;
    582             1                          5         sine[209] = 13;
    583             1                          5         sine[210] = 13;
    584             1                          5         sine[211] = 13;
    585             1                          5         sine[212] = 12;
    586             1                          5         sine[213] = 12;
    587             1                          5         sine[214] = 11;
    588             1                          5         sine[215] = 11;
    589             1                          5         sine[216] = 11;
    590             1                          5         sine[217] = 10;
    591             1                          5         sine[218] = 10;
    592             1                          5         sine[219] = 10;
    593             1                          5         sine[220] = 9;
    594             1                          5         sine[221] = 9;
    595             1                          5         sine[222] = 9;
    596             1                          5         sine[223] = 8;
    597             1                          5         sine[224] = 8;
    598             1                          5         sine[225] = 8;
    599             1                          5         sine[226] = 7;
    600             1                          5         sine[227] = 7;
    601             1                          5         sine[228] = 7;
    602             1                          5         sine[229] = 6;
    603             1                          5         sine[230] = 6;
    604             1                          5         sine[231] = 6;
    605             1                          5         sine[232] = 6;
    606             1                          5         sine[233] = 5;
    607             1                          5         sine[234] = 5;
    608             1                          5         sine[235] = 5;
    609             1                          5         sine[236] = 5;
    610             1                          5         sine[237] = 4;
    611             1                          5         sine[238] = 4;
    612             1                          5         sine[239] = 4;
    613             1                          5         sine[240] = 4;
    614             1                          5         sine[241] = 3;
    615             1                          5         sine[242] = 3;
    616             1                          5         sine[243] = 3;
    617             1                          5         sine[244] = 3;
    618             1                          5         sine[245] = 3;
    619             1                          5         sine[246] = 2;
    620             1                          5         sine[247] = 2;
    621             1                          5         sine[248] = 2;
    622             1                          5         sine[249] = 2;
    623             1                          5         sine[250] = 2;
    624             1                          5         sine[251] = 2;
    625             1                          5         sine[252] = 1;
    626             1                          5         sine[253] = 1;
    627             1                          5         sine[254] = 1;
    628             1                          5         sine[255] = 1;
    629             1                          5         sine[256] = 1;
    630             1                          5         sine[257] = 1;
    631             1                          5         sine[258] = 1;
    632             1                          5         sine[259] = 1;
    633             1                          5         sine[260] = 0;
    634             1                          5         sine[261] = 0;
    635             1                          5         sine[262] = 0;
    636             1                          5         sine[263] = 0;
    637             1                          5         sine[264] = 0;
    638             1                          5         sine[265] = 0;
    639             1                          5         sine[266] = 0;
    640             1                          5         sine[267] = 0;
    641             1                          5         sine[268] = 0;
    642             1                          5         sine[269] = 0;
    643             1                          5         sine[270] = 0;
    644             1                          5         sine[271] = 0;
    645             1                          5         sine[272] = 0;
    646             1                          5         sine[273] = 0;
    647             1                          5         sine[274] = 0;
    648             1                          5         sine[275] = 0;
    649             1                          5         sine[276] = 0;
    650             1                          5         sine[277] = 0;
    651             1                          5         sine[278] = 0;
    652             1                          5         sine[279] = 0;
    653             1                          5         sine[280] = 0;
    654             1                          5         sine[281] = 0;
    655             1                          5         sine[282] = 0;
    656             1                          5         sine[283] = 1;
    657             1                          5         sine[284] = 1;
    658             1                          5         sine[285] = 1;
    659             1                          5         sine[286] = 1;
    660             1                          5         sine[287] = 1;
    661             1                          5         sine[288] = 1;
    662             1                          5         sine[289] = 1;
    663             1                          5         sine[290] = 1;
    664             1                          5         sine[291] = 2;
    665             1                          5         sine[292] = 2;
    666             1                          5         sine[293] = 2;
    667             1                          5         sine[294] = 2;
    668             1                          5         sine[295] = 2;
    669             1                          5         sine[296] = 2;
    670             1                          5         sine[297] = 3;
    671             1                          5         sine[298] = 3;
    672             1                          5         sine[299] = 3;
    673             1                          5         sine[300] = 3;
    674             1                          5         sine[301] = 3;
    675             1                          5         sine[302] = 4;
    676             1                          5         sine[303] = 4;
    677             1                          5         sine[304] = 4;
    678             1                          5         sine[305] = 4;
    679             1                          5         sine[306] = 5;
    680             1                          5         sine[307] = 5;
    681             1                          5         sine[308] = 5;
    682             1                          5         sine[309] = 5;
    683             1                          5         sine[310] = 6;
    684             1                          5         sine[311] = 6;
    685             1                          5         sine[312] = 6;
    686             1                          5         sine[313] = 6;
    687             1                          5         sine[314] = 7;
    688             1                          5         sine[315] = 7;
    689             1                          5         sine[316] = 7;
    690             1                          5         sine[317] = 8;
    691             1                          5         sine[318] = 8;
    692             1                          5         sine[319] = 8;
    693             1                          5         sine[320] = 9;
    694             1                          5         sine[321] = 9;
    695             1                          5         sine[322] = 9;
    696             1                          5         sine[323] = 10;
    697             1                          5         sine[324] = 10;
    698             1                          5         sine[325] = 10;
    699             1                          5         sine[326] = 11;
    700             1                          5         sine[327] = 11;
    701             1                          5         sine[328] = 11;
    702             1                          5         sine[329] = 12;
    703             1                          5         sine[330] = 12;
    704             1                          5         sine[331] = 13;
    705             1                          5         sine[332] = 13;
    706             1                          5         sine[333] = 13;
    707             1                          5         sine[334] = 14;
    708             1                          5         sine[335] = 14;
    709             1                          5         sine[336] = 14;
    710             1                          5         sine[337] = 15;
    711             1                          5         sine[338] = 15;
    712             1                          5         sine[339] = 16;
    713             1                          5         sine[340] = 16;
    714             1                          5         sine[341] = 16;
    715             1                          5         sine[342] = 17;
    716             1                          5         sine[343] = 17;
    717             1                          5         sine[344] = 18;
    718             1                          5         sine[345] = 18;
    719             1                          5         sine[346] = 19;
    720             1                          5         sine[347] = 19;
    721             1                          5         sine[348] = 19;
    722             1                          5         sine[349] = 20;
    723             1                          5         sine[350] = 20;
    724             1                          5         sine[351] = 21;
    725             1                          5         sine[352] = 21;
    726             1                          5         sine[353] = 22;
    727             1                          5         sine[354] = 22;
    728             1                          5         sine[355] = 22;
    729             1                          5         sine[356] = 23;
    730             1                          5         sine[357] = 23;
    731             1                          5         sine[358] = 24;
    732             1                          5         sine[359] = 25;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        408       103       305    25.24%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst/phase_interpolator --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               CLK           5           5      100.00 
                                           CLK_Out           5           5      100.00 
                                         CLK_Out_i           5           5      100.00 
                                        Code[0-10]           5           5      100.00 
                                 PHASE_SHIFT[0-31]           0           0        0.00 
                                         PPM[0-31]           0           0        0.00 
                                            clk_90           5           5      100.00 
                                           clk_180           5           5      100.00 
                                         clk_index           5           5      100.00 
                                           clk_sin           5           5      100.00 
                                            i[0-8]           5           5      100.00 
                                           i[9-31]           0           0        0.00 
                                        index[0-8]           5           5      100.00 
                                       index[9-31]           0           0        0.00 
                                  preparation_flag           5           0       50.00 
                                             rst_n           5           5      100.00 
                                            sign_0           5           5      100.00 
                                           sign_45           5           5      100.00 
                                           sign_90           5           5      100.00 
                                          sign_135           5           5      100.00 
                                          sign_180           5           5      100.00 
                                          sign_225           5           5      100.00 
                                          sign_270           5           5      100.00 
                                          sign_315           5           5      100.00 
                                        sin1[0-15]           0           0        0.00 
                                        sin2[0-15]           0           0        0.00 
                                      sin_sum[0-5]           5           5      100.00 
                                     sin_sum[6-15]           0           0        0.00 

Total Node Count     =        204 
Toggled Node Count   =         51 
Untoggled Node Count =        153 

Toggle Coverage      =      25.24% (103 of 408 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/CDRLoopInst
=== Design Unit: work.CDR_Loop
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CDR_Loop.sv
    2                                                module CDR_Loop (
    3                                                    input rst_n,  // Asynchronous reset active low
    4                                                    input clk_0,
    5                                                    input clk_data,
    6                                                    // input clk_90,
    7                                                    // input clk_180,
    8                                                    // input clk_270,
    9                                                    input Din,
    10                                                   output PI_Clk,
    11                                                   output Dout
    12                                               );
    13                                               
    14                                               `ifdef THREE_CLKS
    15                                               
    16                                               wire clk_90 ;
    17                                               wire clk_180;
    18                                               
    19                                               `endif
    20                                               
    21                                               
    22                                                 // wire PI_clk;
    23                                                 wire up, dn;
    24                                                 wire [10:0] code;
    25                                                 reg voting_clk;
    26                                               
    27                                                 parameter NUMBER_SAMPLES = 3;
    28                                                 parameter period = 0.2;
    29                                               
    30                                                 initial begin
    31              1                          5         voting_clk = 0;
    32              1                          5         forever #((period / 2) / 2*NUMBER_SAMPLES) voting_clk = ~voting_clk;  //200/5 (5 samples per bits)
    32              2                    1466935     
    32              3                    1466930     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         48        46         2    95.83%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/CDRLoopInst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               Din           5           5      100.00 
                                              Dout           5           5      100.00 
                                            PI_Clk           5           5      100.00 
                                             clk_0           5           5      100.00 
                                            clk_90           5           5      100.00 
                                           clk_180           5           5      100.00 
                                          clk_data           0           0        0.00 
                                        code[0-10]           5           5      100.00 
                                                dn           5           5      100.00 
                                             rst_n           5           5      100.00 
                                                up           5           5      100.00 
                                           vote_Dn           5           5      100.00 
                                           vote_Up           5           5      100.00 
                                        voting_clk           5           5      100.00 

Total Node Count     =         24 
Toggled Node Count   =         23 
Untoggled Node Count =          1 

Toggle Coverage      =      95.83% (46 of 48 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U/serialToparallel
=== Design Unit: work.Serial_to_Parallel
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         3         1    75.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/PMA_U/PM_RX_U/serialToparallel

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Serial_to_Parallel.v
------------------------------------IF Branch------------------------------------
    27                                    669040     Count coming in to IF
    27              1                    ***0***       assign serial = (RxPolarity) ? !Ser_in : Ser_in;
    27              2                     669040       assign serial = (RxPolarity) ? !Ser_in : Ser_in;
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    31                                   1099699     Count coming in to IF
    31              1                         20         if (~Rst_n) begin
    33              1                    1099679         end else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         1         1    50.00%

================================Expression Details================================

Expression Coverage for instance /top/DUT/PMA_U/PM_RX_U/serialToparallel --

  File Serial_to_Parallel.v
-----------Focused Expression View (Bimodal)------------
Line       27 Item    1  (RxPolarity? ~Ser_in: Ser_in)
Expression totals: 1 of 2 input terms covered = 50.00%

    Input Term   Covered  Reason for no coverage                  Hint
   -----------  --------  --------------------------------------  --------------
    RxPolarity         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
        Ser_in         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           5           5  RxPolarity_0          -                                  
 Row   2:           0           0  RxPolarity_1          -                                  
 Row   3:           5           0  Ser_in_0              RxPolarity, ~RxPolarity            
 Row   4:           0           5  Ser_in_1              RxPolarity, ~RxPolarity            


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U/PM_RX_U/serialToparallel --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Serial_to_Parallel.v
    2                                                module Serial_to_Parallel #(
    3                                                    parameter DATA_WIDTH = 10
    4                                                ) (
    5                                                
    6                                                    input Recovered_Bit_Clk,
    7                                                
    8                                                    input Ser_in,
    9                                                
    10                                                   input Rst_n,
    11                                               
    12                                                   input RxPolarity,
    13                                               
    14                                                   //output K285,
    15                                               
    16                                                   output reg [DATA_WIDTH-1:0] Data_Collected  //change
    17                                               
    18                                               );
    19                                               
    20                                                 // reg [3:0] count;
    21                                                 // reg [9:0] collect_register;
    22                                               
    23                                               
    24                                                 wire serial;
    25                                               
    26                                               
    27              1                     669055       assign serial = (RxPolarity) ? !Ser_in : Ser_in;
    28                                               
    29                                               
    30              1                    1099699       always @(posedge Recovered_Bit_Clk or negedge Rst_n) begin : proc_
    31                                                   if (~Rst_n) begin
    32              1                         20           Data_Collected <= 0;
    33                                                   end else begin
    34              1                    1099679           Data_Collected <= {serial, Data_Collected[9:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        28         2    93.33%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U/serialToparallel --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                               Data_Collected[0-9]           5           5      100.00 
                                 Recovered_Bit_Clk           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                        RxPolarity           0           0        0.00 
                                            Ser_in           5           5      100.00 
                                            serial           5           5      100.00 

Total Node Count     =         15 
Toggled Node Count   =         14 
Untoggled Node Count =          1 

Toggle Coverage      =      93.33% (28 of 30 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U/PM_RX_U
=== Design Unit: work.PMA_RX
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         36        34         2    94.44%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U/PM_RX_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            CLK_5G           5           5      100.00 
                                     Data_out[0-9]           5           5      100.00 
                                            RX_NEG           5           5      100.00 
                                            RX_POS           5           5      100.00 
                                     Recoverd_data           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                        RxPolarity           0           0        0.00 
                                        rec_clk_5G           5           5      100.00 
                                  recovered_clk_5G           5           5      100.00 

Total Node Count     =         18 
Toggled Node Count   =         17 
Untoggled Node Count =          1 

Toggle Coverage      =      94.44% (34 of 36 bins)

=================================================================================
=== Instance: /top/DUT/PMA_U
=== Design Unit: work.PMA
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/PMA_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PMA.v
    2                                                module PMA (
    3                                                    input       Bit_Rate_Clk_10,
    4                                                    input       Bit_Rate_Clk,
    5                                                    `ifdef OFFSET_TEST
    6                                                       input  Bit_Rate_Clk_offset,
    7                                                    `endif
    8                                                    input       Rst_n,
    9                                                    input [9:0] Data_in,
    10                                                   input       MAC_Data_En,
    11                                                   input       RxPolarity,
    12                                                   //input                    RX_POS          ,
    13                                                   //input                    RX_NEG          ,
    14                                                   // input       Ser_in,
    15                                               
    16                                               
    17                                                   output       TX_Out_P,
    18                                                   output       TX_Out_N,
    19                                                   //output                   K285            ,
    20                                                   output [9:0] RX_Out,
    21                                                   output       recovered_clk_5G
    22                                               );
    23                                                 
    24                                                 // reg Bit_Rate_Clk_offset;
    25                                                 // reg Bit_Rate_Clk_10_offset;
    26                                               
    27                                                 parameter OFFSET_PERIOD = 100.01;
    28                                                 // parameter OFFSET_10_PERIOD = 1000.10001;
    29                                                 parameter N             = 10;
    30                                                 parameter Threshold = 0.5;
    31                                               
    32                                               
    33                                                 // initial begin
    34                                                 //   Bit_Rate_Clk_offset = 0;
    35                                                 //   forever begin
    36                                                 //     #(OFFSET_PERIOD) Bit_Rate_Clk_offset = ~Bit_Rate_Clk_offset;
    37                                                 //   end
    38                                                 // end
    39                                               
    40                                               
    41                                                 //   initial begin
    42                                                 //   Bit_Rate_Clk_10_offset = 0;
    43                                                 //   forever begin
    44                                                 //     #(OFFSET_10_PERIOD) Bit_Rate_Clk_10_offset = ~Bit_Rate_Clk_10_offset;
    45                                                 //   end
    46                                                 // end
    47                                               
    48                                               
    49                                               reg channel_clk;
    50                                               
    51                                               initial begin
    52              1                          5       channel_clk = 0;
    53              1                          5       forever #(OFFSET_PERIOD/N) channel_clk = ~channel_clk;
    53              2                   22001750     
    53              3                   22001745     

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         66        64         2    96.96%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/PMA_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      Bit_Rate_Clk           5           5      100.00 
                                   Bit_Rate_Clk_10           5           5      100.00 
                               Bit_Rate_Clk_offset           5           5      100.00 
                                      Data_in[0-9]           5           5      100.00 
                                          Data_out           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                       RX_Out[0-9]           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                        RxPolarity           0           0        0.00 
                                              TX_N           5           5      100.00 
                                          TX_Out_N           5           5      100.00 
                                          TX_Out_P           5           5      100.00 
                                              TX_P           5           5      100.00 
                                       channel_clk           5           5      100.00 
                                  recovered_clk_5G           5           5      100.00 

Total Node Count     =         33 
Toggled Node Count   =         32 
Untoggled Node Count =          1 

Toggle Coverage      =      96.96% (64 of 66 bins)

=================================================================================
=== Instance: /top/DUT
=== Design Unit: work.PHY
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        224       214        10    95.53%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Bit_Rate_CLK_10           5           5      100.00 
                                      Bit_Rate_Clk           5           5      100.00 
                               Bit_Rate_Clk_offset           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                  Data_In_PMA[0-9]           5           5      100.00 
                                 Data_Out_PMA[0-9]           5           5      100.00 
                                       MAC_Data_En           5           5      100.00 
                                 MAC_TX_Data[0-31]           5           5      100.00 
                                 MAC_TX_DataK[0-3]           5           5      100.00 
                                              PCLK           5           5      100.00 
                                     RX_Data[0-31]           5           5      100.00 
                                          RX_DataK           5           5      100.00 
                                    RX_Status[0-2]           5           5      100.00 
                                          RX_Valid           5           5      100.00 
                                           Ref_CLK           5           5      100.00 
                                           Reset_n           5           5      100.00 
                                        RxPolarity           0           0        0.00 
                                              TX_N           5           5      100.00 
                                          TX_Out_N           5           5      100.00 
                                          TX_Out_P           5           5      100.00 
                                              TX_P           5           5      100.00 
                                  recovered_clk_5G           5           5      100.00 

Total Node Count     =        112 
Toggled Node Count   =        106 
Untoggled Node Count =          6 

Toggle Coverage      =      95.53% (214 of 224 bins)

=================================================================================
=== Instance: /top/PPM_checker_PI_clk_U
=== Design Unit: work.PPM_checker
=================================================================================

Assertion Coverage:
    Assertions                       4         0         4     0.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/top/PPM_checker_PI_clk_U/assert_PPM
                     PPM_checker.sv(46)                15          5
/top/PPM_checker_PI_clk_U/assert_no_glitch
                     PPM_checker.sv(61)                 5          5
/top/PPM_checker_PI_clk_U/assert_PI_PPM
                     PPM_checker.sv(111)           109031          5
/top/PPM_checker_PI_clk_U/assert_no_PI_glitch
                     PPM_checker.sv(124)                5          5
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/PPM_checker_PI_clk_U

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PPM_checker.sv
------------------------------------IF Branch------------------------------------
    13                                   1099840     Count coming in to IF
    13              1                         15         if (~Rst_n) begin
    15              1                    1099825         end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                   1100371     Count coming in to IF
    79              1                         20         if (~Rst_n) begin
    81              1                    1100351         end else begin
Branch totals: 2 hits of 2 branches = 100.00%



Directive Coverage:
    Directives                       4         4         0   100.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/top/PPM_checker_PI_clk_U/cover_assert_PPM 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(59)
                                                                              1099805 Covered   
/top/PPM_checker_PI_clk_U/cover_no_glitch 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(69)
                                                                              1099815 Covered   
/top/PPM_checker_PI_clk_U/cover_assert__PI_PPM 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(122)
                                                                              991325 Covered   
/top/PPM_checker_PI_clk_U/cover_no_PI_glitch 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(132)
                                                                              1100351 Covered   
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      12        12         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/PPM_checker_PI_clk_U --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File PPM_checker.sv
    2                                                module PPM_checker #(
    3                                                    parameter real PERIOD  = 200.0,
    4                                                    parameter real MAX_PPM = 50.0
    5                                                ) (
    6                                                    input logic clk,
    7                                                    input logic PI_clk,
    8                                                    input logic Rst_n
    9                                                );
    10                                                 realtime current_period = 0;
    11                                                 realtime previous_rising_edge = 0;
    12              1                    1099840       always_ff @(posedge clk or negedge Rst_n) begin
    13                                                   if (~Rst_n) begin
    14              1                         15           current_period = $realtime();
    15                                                   end else begin
    16              1                    1099825           current_period = $realtime() - previous_rising_edge;
    17              1                    1099825           previous_rising_edge = $realtime();
    18                                                   end
    19                                                 end
    20                                               
    21                                                 //PPM calculation
    22                                                 int PPM_value;
    23              1                         30       always @(current_period) begin
    24              1                         30         PPM_value = 1e6 * (current_period - PERIOD) / PERIOD;
    25                                                 end
    26                                               
    27                                                  property PPM_check;
    28                                                  (@(posedge clk) (Rst_n && (PPM_value >= -MAX_PPM && PPM_value<= MAX_PPM  ) )
    29                                                 //  ,   $display(
    30                                                 //           "Assertion passed: Current period = %0.2f ps, PPM deviation = %0.2f, within max allowed %0.2f PPM",
    31                                                 //           current_period, PPM_value, MAX_PPM
    32                                                 //       )
    33                                                       ) 
    34                                               
    35                                                  endproperty
    36                                               
    37                                                 property clk_glitch_check;
    38                                                  (@(posedge clk) (Rst_n && current_period> 0.25* PERIOD)
    39                                                 //  ,   $display(
    40                                                 //           "Assertion passed: Current period = %0.2f ps, PPM deviation = %0.2f, within max allowed %0.2f PPM",
    41                                                 //           current_period, PPM_value, MAX_PPM
    42                                                 //       )
    43                                                       ) 
    44                                                  endproperty
    45                                               
    46                                               assert_PPM:assert property (PPM_check)  
    47                                                       else
    48                                                         begin
    49                                                           @(posedge clk)
    50                                                   $display(
    51                                                       "Clock period PPM deviation out of bounds: %0.2f PPM , max allowed PPM: %0.2f, Current period = %0.2f ps, neg_PPM = %0.2f",
    52                                                       $past(PPM_value),
    53                                               
    54                                                       MAX_PPM,
    55                                                       current_period,
    56                                                       -MAX_PPM
    57                                                   );
    58                                                         end
    59                                               cover_assert_PPM:cover property  ( PPM_check);
    60                                               
    61                                               assert_no_glitch:assert property (clk_glitch_check)  
    62                                                       else
    63                                                   $error(
    64                                                       "%t: Clock period: %0.2f , normal period: %0.2f",
    65                                                       $time,
    66                                                       $past(current_period),
    67                                                       PERIOD
    68                                                   );
    69                                               cover_no_glitch:cover property  ( clk_glitch_check); 
    70                                               
    71                                               
    72                                               ////////////////////////////////////////////////
    73                                               ////////////////PI_CLK//////////////////////////
    74                                               ////////////////////////////////////////////////
    75                                               
    76                                               realtime PI_current_period = 0;
    77                                                 realtime PI_previous_rising_edge = 0;
    78              1                    1100371       always_ff @(posedge PI_clk or negedge Rst_n) begin
    79                                                   if (~Rst_n) begin
    80              1                         20           PI_current_period = $realtime();
    81                                                   end else begin
    82              1                    1100351           PI_current_period = $realtime() - PI_previous_rising_edge;
    83              1                    1100351           PI_previous_rising_edge = $realtime();
    84                                                   end
    85                                                 end
    86                                               
    87                                                 //PPM calculation
    88                                                 int PI_PPM_value;
    89              1                     287476       always @(PI_current_period) begin
    90              1                     287476         PI_PPM_value = 1e6 * (PI_current_period - PERIOD) / PERIOD;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        134       122        12    91.04%

================================Toggle Details================================

Toggle Coverage for instance /top/PPM_checker_PI_clk_U --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   PI_PPM_value[0]           0           0        0.00 
                                PI_PPM_value[1-31]           5           5      100.00 
                                            PI_clk           5           5      100.00 
                                    PPM_value[0-3]           0           0        0.00 
                                   PPM_value[4-11]           5           5      100.00 
                                     PPM_value[12]           0           0        0.00 
                                  PPM_value[13-31]           5           5      100.00 
                                             Rst_n           5           5      100.00 
                                               clk           5           5      100.00 

Total Node Count     =         67 
Toggled Node Count   =         61 
Untoggled Node Count =          6 

Toggle Coverage      =      91.04% (122 of 134 bins)

=================================================================================
=== Instance: /top/DUTA
=== Design Unit: work.my_assertion
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        12         8    60.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUTA --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                           Bit_CLK           5           5      100.00 
                                 DataBusWidth[0-2]           0           0        0.00 
                                   DataBusWidth[3]           0           5       50.00 
                                   DataBusWidth[4]           5           5      100.00 
                                   DataBusWidth[5]           5           0       50.00 
                                              PCLK           5           5      100.00 
                                          TX_Out_P           5           5      100.00 
                                          Word_CLK           5           5      100.00 

Total Node Count     =         10 
Toggled Node Count   =          5 
Untoggled Node Count =          5 

Toggle Coverage      =      60.00% (12 of 20 bins)

=================================================================================
=== Instance: /top
=== Design Unit: work.top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      33        33         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File top.sv
    11                                               module top;
    12                                               
    13                                                 ////////////////////////////////////
    14                                                 //////////// INTERFACE /////////////
    15                                                 ////////////////////////////////////
    16                                               
    17                                               
    18                                                 BFM_if dut_if ();
    19                                                 INTERNALS_if internals_if ();
    20                                               
    21                                               
    22                                                 /////////////////////////////////////
    23                                                 ///////// Design instance ///////////
    24                                                 /////////////////////////////////////
    25                                               
    26                                                 PHY DUT (
    27                                                     .Ref_CLK     (dut_if.Ref_CLK),
    28                                                     .Reset_n     (dut_if.Reset_n),
    29                                                     .DataBusWidth(dut_if.DataBusWidth),
    30                                                     .MAC_TX_Data (dut_if.MAC_TX_Data),
    31                                                     .MAC_TX_DataK(dut_if.MAC_TX_DataK),
    32                                                     .MAC_Data_En (dut_if.MAC_Data_En),
    33                                                     .RxPolarity  (dut_if.RxPolarity),
    34                                               
    35                                                     .TX_Out_P (dut_if.TX_Out_P),
    36                                                     .TX_Out_N (dut_if.TX_Out_N),
    37                                                     .RX_Data  (dut_if.Rx_Data),
    38                                                     .RX_DataK (dut_if.Rx_DataK),
    39                                                     .RX_Status(dut_if.Rx_Status),
    40                                                     .RX_Valid (dut_if.Rx_Valid),
    41                                                     .PCLK     (dut_if.PCLK)
    42                                                 );
    43                                               
    44                                                 ////////////////////////////////////
    45                                                 //////////// INTERNALS /////////////
    46                                                 ////////////////////////////////////
    47                                               
    48              1                    2199655       assign internals_if.Bit_CLK          = DUT.Bit_Rate_Clk;
    49              1                     219975       assign internals_if.Word_CLK         = DUT.Bit_Rate_CLK_10;
    50              1                      95005       assign internals_if.PCLK             = DUT.PCLK;
    51              1                         20       assign internals_if.DataBusWidth     = DUT.DataBusWidth;
    52              1                     678873       assign internals_if.TX_Out_P         = DUT.PMA_U.TX_Out_P;
    53              1                    2199650       assign internals_if.Clk_offset       = DUT.PMA_U.Bit_Rate_Clk_offset;
    54              1                    2200716       assign internals_if.recovered_clk_5G = DUT.PMA_U.recovered_clk_5G;
    55              1                         30       assign internals_if.MAC_Data_En      = DUT.MAC_Data_En;
    56              1                       1644       assign internals_if.Decode_Error     = DUT.PCS_U.PCS_RX_U.DecodeError;
    57              1                      54452       assign internals_if.Disparity_Error  = DUT.PCS_U.PCS_RX_U.Disparity_Error;
    58              1                     100946       assign internals_if.COMMA_PULSE      = DUT.PCS_U.PCS_RX_U.Comma_pulse;
    59                                               
    60                                                 PPM_checker #(
    61                                                     .PERIOD (PARAMETERS_PKG::REF_CLK_PERIOD_5G),
    62                                                     .MAX_PPM(PARAMETERS_PKG::PPM_TOLERANCE_MAX)
    63                                                 ) PPM_checker_PI_clk_U (
    64                                                     DUT.PMA_U.Bit_Rate_Clk,
    65                                                     DUT.PMA_U.recovered_clk_5G,
    66                                                     dut_if.Reset_n
    67                                                 );
    68                                               
    69                                                 my_assertion DUTA (
    70                                               
    71                                                     .Bit_CLK     (DUT.Bit_Rate_Clk),
    72                                                     .Word_CLK    (DUT.Bit_Rate_CLK_10),
    73                                                     .PCLK        (DUT.PCLK),
    74                                                     .DataBusWidth(DUT.DataBusWidth),
    75                                                     .TX_Out_P    (DUT.PMA_U.TX_Out_P)
    76                                               
    77                                                 );
    78                                               
    79                                               
    80                                                 ///////////////////////////////////
    81                                                 ///////// CLOCK GENERATION ////////
    82                                                 ///////////////////////////////////
    83                                               
    84                                                 initial begin
    85              1                          5         dut_if.Ref_CLK = 0;
    86              1                          5         forever begin
    87              1                      44010           #(REF_CLK_PERIOD / 2) dut_if.Ref_CLK = ~dut_if.Ref_CLK;
    87              2                      44005     
    88                                                   end
    89                                                 end
    90                                               
    91                                               
    92                                                 ///////////////////////////////////
    93                                                 ///////////// DATABASE ////////////
    94                                                 ///////////////////////////////////
    95                                               
    96                                                 initial begin
    97              1                          5         uvm_config_db#(virtual BFM_if)::set(null, "*", "bfm_if", dut_if);  // BUS FUNCTIONAL MODEL
    98              1                          5         uvm_config_db#(virtual INTERNALS_if)::set(null, "*", "internals_if",
    99                                                                                             internals_if);  // INTERNAL INTERFACE
    100                                              
    101                                                  //------ RUNNING THE TEST --------
    102             1                          5         run_test("my_test");
    103                                                end
    104                                              
    105                                              
    106                                              
    107                                                ///////////////////////////////////
    108                                                /////// MATLAB PREPARATION ////////
    109                                                ///////////////////////////////////
    110                                              
    111                                                wire [15:0] Freq_Integrator;
    112                                                wire [15:0] Phase_Integrator;
    113                                              
    114             1                     181582       assign UP = DUT.PMA_U.PM_RX_U.CDRLoopInst.DLF_U.Up;
    115             1                     143867       assign DN = DUT.PMA_U.PM_RX_U.CDRLoopInst.DLF_U.Dn;
    116                                                assign Freq_Integrator = DUT.PMA_U.PM_RX_U.CDRLoopInst.DLF_U.freq_integrator;
    117                                                assign Phase_Integrator = DUT.PMA_U.PM_RX_U.CDRLoopInst.DLF_U.phase_integrator;
    118                                              
    119                                                int fd, fd2, fd3, fd4, fd5;
    120                                                initial begin
    121             1                          5         fd  = $fopen("./Up_Dn.hex", "w");
    122             1                          5         fd2 = $fopen("./Freq_Integrator.hex", "w");
    123             1                          5         fd3 = $fopen("./Phase_Integrator.hex", "w");
    124                                              
    125                                                  //to empty files
    126             1                          5         fd4 = $fopen("./MAC_TX_Data_Stim.hex", "w");
    127             1                          5         $fclose(fd4);
    128             1                          5         fd5 = $fopen("./PHY_OUT.hex", "w");
    129             1                          5         $fclose(fd5);
    130                                              
    131                                              
    132                                                end
    133                                              
    134             1                     268855       always @(UP, DN) begin
    135             1                     268855         $fwrite(fd, "%h,%h\n", UP, DN);
    136                                                end
    137                                              
    138             1                     253892       always @(Freq_Integrator) begin
    139             1                     253892         $fwrite(fd2, "%h\n", Freq_Integrator);
    140                                                end
    141                                              
    142                                              
    143             1                     253892       always @(Phase_Integrator) begin
    144             1                     253892         $fwrite(fd3, "%h\n", Phase_Integrator);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        388        82       306    21.13%

================================Toggle Details================================

Toggle Coverage for instance /top --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                                DN           5           5      100.00 
                             Freq_Integrator[0-15]           5           5      100.00 
                            Phase_Integrator[0-15]           5           5      100.00 
                                                UP           5           5      100.00 
                                           fd[0-1]           0           5       50.00 
                                          fd[2-30]           0           0        0.00 
                                            fd[31]           0           5       50.00 
                                          fd2[0-1]           0           0        0.00 
                                            fd2[2]           0           5       50.00 
                                         fd2[3-30]           0           0        0.00 
                                           fd2[31]           0           5       50.00 
                                            fd3[0]           0           5       50.00 
                                            fd3[1]           0           0        0.00 
                                            fd3[2]           0           5       50.00 
                                         fd3[3-30]           0           0        0.00 
                                           fd3[31]           0           5       50.00 
                                            fd4[0]           0           0        0.00 
                                          fd4[1-2]           0           5       50.00 
                                         fd4[3-30]           0           0        0.00 
                                           fd4[31]           0           5       50.00 
                                            fd5[0]           0           0        0.00 
                                          fd5[1-2]           0           5       50.00 
                                         fd5[3-30]           0           0        0.00 
                                           fd5[31]           0           5       50.00 

Total Node Count     =        194 
Toggled Node Count   =         34 
Untoggled Node Count =        160 

Toggle Coverage      =      21.13% (82 of 388 bins)

=================================================================================
=== Instance: /my_sequence_item_pkg
=== Design Unit: work.my_sequence_item_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /my_sequence_item_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_sequence_item.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(my_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(my_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(my_sequence_item);
    9               4                    ***0***         `uvm_object_utils(my_sequence_item);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(my_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(my_sequence_item);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /my_sequence_item_pkg --

  File my_sequence_item.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      17         8         9    47.05%

================================Statement Details================================

Statement Coverage for instance /my_sequence_item_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_sequence_item.sv
    1                                                package my_sequence_item_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                
    7                                                  class my_sequence_item extends uvm_sequence_item;
    8                                                
    9               1                    ***0***         `uvm_object_utils(my_sequence_item);
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                      47500     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11                                                   // logic [3:0] CommandK_Arr [3:0];
    12                                               
    13                                               
    14                                               
    15                                                   //////// INPUTS //////////
    16                                               
    17                                                   //rand logic                      Reset_n          ;
    18                                                   logic      [ 5 : 0] DataBusWidth;
    19                                                   rand logic [31 : 0] MAC_TX_Data;
    20                                                   rand logic [ 3 : 0] MAC_TX_DataK;
    21                                                   rand logic          MAC_Data_En;
    22                                                   rand logic          RxPolarity;
    23                                               
    24                                               
    25                                               
    26                                                   ///////// OUTPUTS ///////// 
    27                                                   logic               TX_Out_P;
    28                                                   logic               TX_Out_N;
    29                                                   logic      [31 : 0] Rx_Data;
    30                                                   logic               Rx_DataK;
    31                                                   logic      [ 2 : 0] Rx_Status;
    32                                                   logic               Rx_Valid;
    33                                                   logic               PCLK;
    34                                               
    35                                                   //////// Helpers ////////////
    36                                                   logic      [ 3 : 0] randomK;
    37                                                   logic      [31 : 0] Data_post;
    38                                                   int                 count_8;
    39                                                   int                 count_16;
    40                                               
    41                                               
    42                                                   function new(string name = "my_sequence_item");
    43              1                    1147365           super.new(name);
    44                                                     // CommandK_Arr = '{4'b0001 , 4'b0010 , 4'b0100 , 4'b1000};
    45              1                    1147365           Data_post = 0;
    46              1                    1147365           count_8   = 0;
    47              1                    1147365           count_16  = 0;
    48                                                   endfunction
    49                                               
    50                                               
    51                                               
    52                                                   // constraint reset_c {
    53                                                   //     Reset_n dist {1'b1:/ 95 , 1'b0:/5 };
    54                                                   // }
    55                                               
    56                                               
    57                                                   //---------- MAC_DATAK_CONSTRAINT --------
    58                                                   constraint MAC_TX_Data_32c {
    59                                                     if (Data_post == 32'hBCBC_BCBC) {
    60                                                       MAC_TX_Data inside {[32'h0 : 32'hFFFF_FFFF]};
    61                                                     } else {
    62                                                       MAC_TX_Data == 32'hBCBC_BCBC;
    63                                                     }
    64                                               
    65                                                   }
    66                                               
    67                                               
    68                                               
    69                                                   constraint MAC_TX_Data_TSEQ {
    70                                                     if (Data_post == 32'hBCBC_BCBC) {
    71                                                       MAC_TX_Data == 32'h4A_4A_4A_4A;
    72                                                     } else {
    73                                                       MAC_TX_Data == 32'hBCBC_BCBC;
    74                                                     }
    75                                                   }
    76                                               
    77                                               
    78                                               
    79                                                   //---------- MAC_DATAK_CONSTRAINT ---------
    80                                                   constraint MAC_TX_DataK_32c {
    81                                                     if (Data_post != 32'hBCBC_BCBC) {
    82                                                       MAC_TX_DataK == 4'b1111;
    83                                                     } else {
    84                                                       MAC_TX_DataK == 4'b0000;
    85                                                     }
    86                                                   }
    87                                               
    88                                               
    89                                               
    90                                                   //------ MAC_DATA_En CONSTARINT------
    91                                                   constraint MAC_Data_En_c {
    92                                                     // MAC_Data_En dist {1'b1 :/ 95 , 1'b0:/ 5};
    93                                                     MAC_Data_En == 1'b1;
    94                                                   }
    95                                               
    96                                               
    97                                                   //--------RXPOLARITY CONSTRAINT--------
    98                                                   constraint RxPolarity_c {RxPolarity == 0;}
    99                                               
    100                                              
    101                                                  function void post_randomize;
    102             1                      47500           Data_post = MAC_TX_Data;
    103             1                      47500           count_16  = (count_16 + 1) % 3;
    104             1                      47500           count_8   = (count_8 + 1) % 5;


=================================================================================
=== Instance: /my_sequence_pkg
=== Design Unit: work.my_sequence_pkg
=================================================================================

Assertion Coverage:
    Assertions                       8         8         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/my_sequence_pkg/my_sequence_32/body/#ublk#34052679#30/immed__32
                     my_sequence.sv(32)                 0          5
/my_sequence_pkg/my_sequence_32/body/#ublk#34052679#47/immed__51
                     my_sequence.sv(51)                 0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#92/immed__94
                     my_sequence.sv(94)                 0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#109/immed__113
                     my_sequence.sv(113)                0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#126/immed__130
                     my_sequence.sv(130)                0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#144/immed__148
                     my_sequence.sv(148)                0          5
/my_sequence_pkg/my_sequence_8/body/#ublk#34052679#184/immed__186
                     my_sequence.sv(186)                0          5
/my_sequence_pkg/my_sequence_8/body/#ublk#34052679#201/immed__205
                     my_sequence.sv(205)                0          5
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        58        19        39    32.75%

================================Branch Details================================

Branch Coverage for instance /my_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_sequence.sv
------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              1                    ***0***         `uvm_object_utils(my_sequence_32);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              2                    ***0***         `uvm_object_utils(my_sequence_32);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              3                    ***0***         `uvm_object_utils(my_sequence_32);
    10              4                    ***0***         `uvm_object_utils(my_sequence_32);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              5                    ***0***         `uvm_object_utils(my_sequence_32);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              6                    ***0***         `uvm_object_utils(my_sequence_32);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    17                                         5     Count coming in to IF
    17              1                          5           `uvm_info("MY_SEQUENCE_32", "SEQ CREATED", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    25                                         5     Count coming in to IF
    25              1                          5           `uvm_info("MY_SEQUENCE_32", "BEFORE START ITEM", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    34                                      7500     Count coming in to IF
    34              1                    ***0***             if (stim_seq_item.MAC_TX_Data != 32'hbcbcbcbc && stim_seq_item.MAC_TX_Data != 32'h4A4A4A4A) begin
                                            7500     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    53                                      7500     Count coming in to IF
    53              1                       3750             if (stim_seq_item.MAC_TX_Data != 32'hbcbcbcbc) begin
                                            3750     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              1                    ***0***         `uvm_object_utils(my_sequence_16);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              2                    ***0***         `uvm_object_utils(my_sequence_16);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              3                    ***0***         `uvm_object_utils(my_sequence_16);
    71              4                    ***0***         `uvm_object_utils(my_sequence_16);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              5                    ***0***         `uvm_object_utils(my_sequence_16);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    71                                   ***0***     Count coming in to IF
    71              6                    ***0***         `uvm_object_utils(my_sequence_16);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    78                                         5     Count coming in to IF
    78              1                          5           `uvm_info("MY_SEQUENCE_16", "SEQ CREATED", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    86                                         5     Count coming in to IF
    86              1                          5           `uvm_info("MY_SEQUENCE_16", "BEFORE START ITEM", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    96                                      7500     Count coming in to IF
    96              1                    ***0***             if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc && stim_seq_item.MAC_TX_Data[15:0] != 16'h4A4A) begin
                                            7500     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    115                                     3750     Count coming in to IF
    115             1                       1875             if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
                                            1875     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    132                                     2500     Count coming in to IF
    132             1                       1250             if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
                                            1250     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    150                                     3750     Count coming in to IF
    150             1                       1875             if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
                                            1875     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             1                    ***0***         `uvm_object_utils(my_sequence_8);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             2                    ***0***         `uvm_object_utils(my_sequence_8);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             3                    ***0***         `uvm_object_utils(my_sequence_8);
    164             4                    ***0***         `uvm_object_utils(my_sequence_8);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             5                    ***0***         `uvm_object_utils(my_sequence_8);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             6                    ***0***         `uvm_object_utils(my_sequence_8);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    171                                        5     Count coming in to IF
    171             1                          5           `uvm_info("MY_SEQUENCE_8", "SEQ CREATED", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    179                                        5     Count coming in to IF
    179             1                          5           `uvm_info("MY_SEQUENCE_8", "BEFORE START ITEM", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    188                                     7500     Count coming in to IF
    188             1                    ***0***             if (stim_seq_item.MAC_TX_Data[7:0] != 8'hbc && stim_seq_item.MAC_TX_Data[7:0] != 8'h4A) begin
                                            7500     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    207                                     7500     Count coming in to IF
    207             1                       3734             if (stim_seq_item.MAC_TX_Data[7:0] != 8'hbc) begin
                                            3766     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      17         5        12    29.41%

================================Condition Details================================

Condition Coverage for instance /my_sequence_pkg --

  File my_sequence.sv
----------------Focused Condition View-------------------
Line       10 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       10 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       34 Item    1  ((this.stim_seq_item.MAC_TX_Data != -1128481604) && (this.stim_seq_item.MAC_TX_Data != 1246382666))
Condition totals: 0 of 2 input terms covered = 0.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data != -1128481604)         N  '_1' not hit             Hit '_1'
   (this.stim_seq_item.MAC_TX_Data != 1246382666)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data != -1128481604)_0  -                             
  Row   2:    ***0***  (this.stim_seq_item.MAC_TX_Data != -1128481604)_1  (this.stim_seq_item.MAC_TX_Data != 1246382666)
  Row   3:          5  (this.stim_seq_item.MAC_TX_Data != 1246382666)_0   (this.stim_seq_item.MAC_TX_Data != -1128481604)
  Row   4:    ***0***  (this.stim_seq_item.MAC_TX_Data != 1246382666)_1   (this.stim_seq_item.MAC_TX_Data != -1128481604)

----------------Focused Condition View-------------------
Line       53 Item    1  (this.stim_seq_item.MAC_TX_Data != -1128481604)
Condition totals: 1 of 1 input term covered = 100.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data != -1128481604)         Y

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data != -1128481604)_0  -                             
  Row   2:          5  (this.stim_seq_item.MAC_TX_Data != -1128481604)_1  -                             

----------------Focused Condition View-------------------
Line       71 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       71 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       96 Item    1  ((this.stim_seq_item.MAC_TX_Data[15:0] != 48316) && (this.stim_seq_item.MAC_TX_Data[15:0] != 19018))
Condition totals: 0 of 2 input terms covered = 0.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)         N  '_1' not hit             Hit '_1'
  (this.stim_seq_item.MAC_TX_Data[15:0] != 19018)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_0  -                             
  Row   2:    ***0***  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_1  (this.stim_seq_item.MAC_TX_Data[15:0] != 19018)
  Row   3:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 19018)_0  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)
  Row   4:    ***0***  (this.stim_seq_item.MAC_TX_Data[15:0] != 19018)_1  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)

----------------Focused Condition View-------------------
Line       115 Item    1  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)
Condition totals: 1 of 1 input term covered = 100.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)         Y

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_0  -                             
  Row   2:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_1  -                             

----------------Focused Condition View-------------------
Line       132 Item    1  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)
Condition totals: 1 of 1 input term covered = 100.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)         Y

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_0  -                             
  Row   2:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_1  -                             

----------------Focused Condition View-------------------
Line       150 Item    1  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)
Condition totals: 1 of 1 input term covered = 100.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)         Y

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_0  -                             
  Row   2:          5  (this.stim_seq_item.MAC_TX_Data[15:0] != 48316)_1  -                             

----------------Focused Condition View-------------------
Line       164 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       164 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       188 Item    1  ((this.stim_seq_item.MAC_TX_Data[7:0] != 188) && (this.stim_seq_item.MAC_TX_Data[7:0] != 74))
Condition totals: 0 of 2 input terms covered = 0.00%

                                    Input Term   Covered  Reason for no coverage   Hint
                                   -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)         N  '_1' not hit             Hit '_1'
   (this.stim_seq_item.MAC_TX_Data[7:0] != 74)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                      Non-masking condition(s)      
 ---------  ---------  --------------------                            -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)_0  -                             
  Row   2:    ***0***  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)_1  (this.stim_seq_item.MAC_TX_Data[7:0] != 74)
  Row   3:          5  (this.stim_seq_item.MAC_TX_Data[7:0] != 74)_0   (this.stim_seq_item.MAC_TX_Data[7:0] != 188)
  Row   4:    ***0***  (this.stim_seq_item.MAC_TX_Data[7:0] != 74)_1   (this.stim_seq_item.MAC_TX_Data[7:0] != 188)

----------------Focused Condition View-------------------
Line       207 Item    1  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)
Condition totals: 1 of 1 input term covered = 100.00%

                                    Input Term   Covered  Reason for no coverage   Hint
                                   -----------  --------  -----------------------  --------------
  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)         Y

     Rows:       Hits  FEC Target                                      Non-masking condition(s)      
 ---------  ---------  --------------------                            -------------------------     
  Row   1:          5  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)_0  -                             
  Row   2:          5  (this.stim_seq_item.MAC_TX_Data[7:0] != 188)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     108        78        30    72.22%

================================Statement Details================================

Statement Coverage for instance /my_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_sequence.sv
    1                                                package my_sequence_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                  import my_sequence_item_pkg::*;
    7                                                
    8                                                  class my_sequence_32 extends uvm_sequence #(my_sequence_item);
    9                                                
    10              1                    ***0***         `uvm_object_utils(my_sequence_32);
    10              2                    ***0***     
    10              3                    ***0***     
    10              4                    ***0***     
    10              5                    ***0***     
    10              6                          5     
    10              7                    ***0***     
    10              8                    ***0***     
    10              9                    ***0***     
    10             10                    ***0***     
    11                                               
    12                                                   int              fd;
    13                                                   my_sequence_item stim_seq_item;
    14                                               
    15                                                   function new(string name = "my_sequence_32");
    16              1                          5           super.new(name);
    17              1                          5           `uvm_info("MY_SEQUENCE_32", "SEQ CREATED", UVM_MEDIUM);
    18              1                          5           fd = $fopen("./MAC_TX_Data_Stim.hex", "a");
    19                                                   endfunction
    20                                               
    21                                               
    22                                                   task body();
    23                                               
    24              1                          5           stim_seq_item = my_sequence_item::type_id::create("stim_seq_item");
    25              1                          5           `uvm_info("MY_SEQUENCE_32", "BEFORE START ITEM", UVM_MEDIUM);
    26                                               
    27              1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(1);
    28              1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(0);
    29                                               
    30              1                       7500           repeat (1500) begin
    31              1                       7500             start_item(stim_seq_item);
    32                                                       assert (stim_seq_item.randomize());
    33                                               
    34                                                       if (stim_seq_item.MAC_TX_Data != 32'hbcbcbcbc && stim_seq_item.MAC_TX_Data != 32'h4A4A4A4A) begin
    35                                                         //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_DEBUG);
    36              1                    ***0***               $fwrite(fd, "%h\n", stim_seq_item.MAC_TX_Data);
    37                                                       end
    38              1                       7500             finish_item(stim_seq_item);
    39              1                       7500             get_response(stim_seq_item);
    40                                                     end
    41                                               
    42                                               
    43              1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(0);
    44              1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(1);
    45                                               
    46                                               
    47              1                       7500           repeat (1500) begin
    48                                               
    49              1                       7500             start_item(stim_seq_item);
    50                                                       //`uvm_info("MY_SEQUENCE", "AFTER START ITEM", UVM_DEBUG);
    51                                                       assert (stim_seq_item.randomize());
    52                                               
    53                                                       if (stim_seq_item.MAC_TX_Data != 32'hbcbcbcbc) begin
    54                                                         //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_LOW);
    55              1                       3750               $fwrite(fd, "%h\n", stim_seq_item.MAC_TX_Data);
    56                                                       end
    57                                               
    58              1                       7500             finish_item(stim_seq_item);
    59              1                       7500             get_response(stim_seq_item);
    60                                               
    61                                               
    62                                                     end
    63                                               
    64              1                          5           $fclose(fd);
    65                                                   endtask
    66                                                 endclass
    67                                               
    68                                               
    69                                                 class my_sequence_16 extends uvm_sequence #(my_sequence_item);
    70                                               
    71              1                    ***0***         `uvm_object_utils(my_sequence_16);
    71              2                    ***0***     
    71              3                    ***0***     
    71              4                    ***0***     
    71              5                    ***0***     
    71              6                          5     
    71              7                    ***0***     
    71              8                    ***0***     
    71              9                    ***0***     
    71             10                    ***0***     
    72                                               
    73                                                   int              fd;
    74                                                   my_sequence_item stim_seq_item;
    75                                               
    76                                                   function new(string name = "my_sequence_16");
    77              1                          5           super.new(name);
    78              1                          5           `uvm_info("MY_SEQUENCE_16", "SEQ CREATED", UVM_MEDIUM);
    79              1                          5           fd = $fopen("./MAC_TX_Data_Stim.hex", "a");
    80                                                   endfunction
    81                                               
    82                                               
    83                                                   task body();
    84                                               
    85              1                          5           stim_seq_item = my_sequence_item::type_id::create("stim_seq_item");
    86              1                          5           `uvm_info("MY_SEQUENCE_16", "BEFORE START ITEM", UVM_MEDIUM);
    87                                               
    88                                               
    89              1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(1);
    90              1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(0);
    91                                               
    92              1                       7500           repeat (1500) begin
    93              1                       7500             start_item(stim_seq_item);
    94                                                       assert (stim_seq_item.randomize());
    95                                               
    96                                                       if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc && stim_seq_item.MAC_TX_Data[15:0] != 16'h4A4A) begin
    97                                                         //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_DEBUG);
    98              1                    ***0***               $fwrite(fd, "%h\n", {16'b0, stim_seq_item.MAC_TX_Data[15:0]});
    99                                                       end
    100             1                       7500             finish_item(stim_seq_item);
    101             1                       7500             get_response(stim_seq_item);
    102                                                    end
    103                                              
    104                                              
    105             1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(0);
    106             1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(1);
    107                                              
    108                                              
    109             1                       3750           repeat (750) begin
    110                                              
    111             1                       3750             start_item(stim_seq_item);
    112                                                      //`uvm_info("MY_SEQUENCE", "AFTER START ITEM", UVM_DEBUG);
    113                                                      assert (stim_seq_item.randomize());
    114                                              
    115                                                      if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
    116                                                        //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_LOW);
    117             1                       1875               $fwrite(fd, "%h\n", {16'b0, stim_seq_item.MAC_TX_Data[15:0]});
    118                                                      end
    119             1                       3750             finish_item(stim_seq_item);
    120             1                       3750             get_response(stim_seq_item);
    121                                                    end
    122             1                          5           stim_seq_item.MAC_Data_En_c.constraint_mode(0);
    123             1                          5           stim_seq_item.MAC_Data_En.rand_mode(0);
    124             1                          5           #1000;
    125             1                          5           stim_seq_item.MAC_Data_En = 0;
    126             1                       2500           repeat (500) begin
    127                                              
    128             1                       2500             start_item(stim_seq_item);
    129                                                      //`uvm_info("MY_SEQUENCE", "AFTER START ITEM", UVM_DEBUG);
    130                                                      assert (stim_seq_item.randomize());
    131                                              
    132                                                      if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
    133                                                        //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_LOW);
    134             1                       1250               $fwrite(fd, "%h\n", {16'b0, stim_seq_item.MAC_TX_Data[15:0]});
    135                                                      end
    136             1                       2500             finish_item(stim_seq_item);
    137             1                       2500             get_response(stim_seq_item);
    138                                                    end
    139             1                          5           #3000;
    140             1                          5           stim_seq_item.MAC_Data_En = 1;
    141                                              
    142             1                          5           stim_seq_item.MAC_Data_En.rand_mode(1);
    143             1                          5           stim_seq_item.MAC_Data_En_c.constraint_mode(1);
    144             1                       3750           repeat (750) begin
    145                                              
    146             1                       3750             start_item(stim_seq_item);
    147                                                      //`uvm_info("MY_SEQUENCE", "AFTER START ITEM", UVM_DEBUG);
    148                                                      assert (stim_seq_item.randomize());
    149                                              
    150                                                      if (stim_seq_item.MAC_TX_Data[15:0] != 16'hbcbc) begin
    151                                                        //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_LOW);
    152             1                       1875               $fwrite(fd, "%h\n", {16'b0, stim_seq_item.MAC_TX_Data[15:0]});
    153                                                      end
    154             1                       3750             finish_item(stim_seq_item);
    155             1                       3750             get_response(stim_seq_item);
    156                                                    end
    157                                              
    158             1                          5           $fclose(fd);
    159                                                  endtask
    160                                                endclass
    161                                              
    162                                                class my_sequence_8 extends uvm_sequence #(my_sequence_item);
    163                                              
    164             1                    ***0***         `uvm_object_utils(my_sequence_8);
    164             2                    ***0***     
    164             3                    ***0***     
    164             4                    ***0***     
    164             5                    ***0***     
    164             6                          5     
    164             7                    ***0***     
    164             8                    ***0***     
    164             9                    ***0***     
    164            10                    ***0***     
    165                                              
    166                                                  int              fd;
    167                                                  my_sequence_item stim_seq_item;
    168                                              
    169                                                  function new(string name = "my_sequence_8");
    170             1                          5           super.new(name);
    171             1                          5           `uvm_info("MY_SEQUENCE_8", "SEQ CREATED", UVM_MEDIUM);
    172             1                          5           fd = $fopen("./MAC_TX_Data_Stim.hex", "a");
    173                                                  endfunction
    174                                              
    175                                              
    176                                                  task body();
    177                                              
    178             1                          5           stim_seq_item = my_sequence_item::type_id::create("stim_seq_item");
    179             1                          5           `uvm_info("MY_SEQUENCE_8", "BEFORE START ITEM", UVM_MEDIUM);
    180                                              
    181             1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(1);
    182             1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(0);
    183                                              
    184             1                       7500           repeat (1500) begin
    185             1                       7500             start_item(stim_seq_item);
    186                                                      assert (stim_seq_item.randomize());
    187                                              
    188                                                      if (stim_seq_item.MAC_TX_Data[7:0] != 8'hbc && stim_seq_item.MAC_TX_Data[7:0] != 8'h4A) begin
    189                                                        //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_DEBUG);
    190             1                    ***0***               $fwrite(fd, "%h\n", {24'b0, stim_seq_item.MAC_TX_Data[7:0]});
    191                                                      end
    192             1                       7500             finish_item(stim_seq_item);
    193             1                       7500             get_response(stim_seq_item);
    194                                                    end
    195                                              
    196                                              
    197             1                          5           stim_seq_item.MAC_TX_Data_TSEQ.constraint_mode(0);
    198             1                          5           stim_seq_item.MAC_TX_Data_32c.constraint_mode(1);
    199                                              
    200                                              
    201             1                       7500           repeat (1500) begin
    202                                              
    203             1                       7500             start_item(stim_seq_item);
    204                                                      //`uvm_info("MY_SEQUENCE", "AFTER START ITEM", UVM_DEBUG);
    205                                                      assert (stim_seq_item.randomize());
    206                                              
    207                                                      if (stim_seq_item.MAC_TX_Data[7:0] != 8'hbc) begin
    208                                                        //  `uvm_info("FILE_IN", "AFTER FINISH ITEM", UVM_LOW);
    209             1                       3734               $fwrite(fd, "%h\n", {24'b0, stim_seq_item.MAC_TX_Data[7:0]});
    210                                                      end
    211                                              
    212                                              
    213             1                       7500             finish_item(stim_seq_item);
    214             1                       7500             get_response(stim_seq_item);
    215                                              
    216                                              
    217                                                    end
    218                                              
    219             1                          5           $fclose(fd);


=================================================================================
=== Instance: /my_coverage_pkg
=== Design Unit: work.my_coverage_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         2         6    25.00%

================================Branch Details================================

Branch Coverage for instance /my_coverage_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_coverage.sv
------------------------------------IF Branch------------------------------------
    141                                        5     Count coming in to IF
    141             1                    ***0***           if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", bfm_vif))
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    142                                  ***0***     Count coming in to IF
    142             1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING BFM INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    145                                        5     Count coming in to IF
    145             1                    ***0***           if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", internals_if))
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    146                                  ***0***     Count coming in to IF
    146             1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%



Covergroup Coverage:
    Covergroups                      4        na        na    98.80%
        Coverpoints/Crosses         12        na        na        na
            Covergroup Bins        107       105         2    98.13%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /my_coverage_pkg/my_coverage/PMA_COV_gp         100.00%        100          -    Covered              
    covered/total bins:                                    13         13          -                      
    missing/total bins:                                     0         13          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint TX_cp                                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_Data_cp                         100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_DataK_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_Enable_cp                       100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::PMA_COV_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    13         13          -                      
    missing/total bins:                                     0         13          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint TX_cp                                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        bin TX_HIGH_BIT                                555676          1          -    Covered              
        bin TX_LOW_BIT                                 544149          1          -    Covered              
        bin TRANS_10                                   339429          1          -    Covered              
        bin TRANS_01                                   339434          1          -    Covered              
        bin TRANS_11                                   216242          1          -    Covered              
        bin TRANS_00                                   204715          1          -    Covered              
    Coverpoint MAC_TX_Data_cp                         100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin MAC_STIM_COMMA                             550000          1          -    Covered              
        bin MAC_STIM_TSEQ                              262500          1          -    Covered              
        default bin MAC_STIM_DATA                      287325                     -    Occurred             
    Coverpoint MAC_TX_DataK_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin FULL_CMD_PKT                               550000          1          -    Covered              
    Coverpoint MAC_TX_Enable_cp                       100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin ENABLE_H                                  1049725          1          -    Covered              
        bin ENABLE_L                                    50100          1          -    Covered              
        bin ENABLE_HL                                       5          1          -    Covered              
        bin ENABLE_LH                                      10          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/PCS_COV_gp          95.23%        100          -    Uncovered            
    covered/total bins:                                    85         87          -                      
    missing/total bins:                                     2         87          -                      
    % Hit:                                             97.70%        100          -                      
    Coverpoint RX_DATA_cp                             100.00%        100          -    Covered              
        covered/total bins:                                64         64          -                      
        missing/total bins:                                 0         64          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Rx_Valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Rx_status_cp                            71.42%        100          -    Uncovered            
        covered/total bins:                                 5          7          -                      
        missing/total bins:                                 2          7          -                      
        % Hit:                                         71.42%        100          -                      
    Coverpoint COMMA_DETECTION_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Decode_Error_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Disparity_Error_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::PCS_COV_gp  
                                                       95.23%        100          -    Uncovered            
    covered/total bins:                                    85         87          -                      
    missing/total bins:                                     2         87          -                      
    % Hit:                                             97.70%        100          -                      
    Coverpoint RX_DATA_cp                             100.00%        100          -    Covered              
        covered/total bins:                                64         64          -                      
        missing/total bins:                                 0         64          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0:67108863]                           806525          1          -    Covered              
        bin auto[67108864:134217727]                     2280          1          -    Covered              
        bin auto[134217728:201326591]                    2360          1          -    Covered              
        bin auto[201326592:268435455]                    2880          1          -    Covered              
        bin auto[268435456:335544319]                    2380          1          -    Covered              
        bin auto[335544320:402653183]                    2640          1          -    Covered              
        bin auto[402653184:469762047]                    2960          1          -    Covered              
        bin auto[469762048:536870911]                    2000          1          -    Covered              
        bin auto[536870912:603979775]                    2160          1          -    Covered              
        bin auto[603979776:671088639]                    2200          1          -    Covered              
        bin auto[671088640:738197503]                    2480          1          -    Covered              
        bin auto[738197504:805306367]                    1880          1          -    Covered              
        bin auto[805306368:872415231]                    2480          1          -    Covered              
        bin auto[872415232:939524095]                    2320          1          -    Covered              
        bin auto[939524096:1006632959]                   2200          1          -    Covered              
        bin auto[1006632960:1073741823]                  2040          1          -    Covered              
        bin auto[1073741824:1140850687]                  2280          1          -    Covered              
        bin auto[1140850688:1207959551]                  2360          1          -    Covered              
        bin auto[1207959552:1275068415]                148740          1          -    Covered              
        bin auto[1275068416:1342177279]                  2360          1          -    Covered              
        bin auto[1342177280:1409286143]                  2360          1          -    Covered              
        bin auto[1409286144:1476395007]                  2120          1          -    Covered              
        bin auto[1476395008:1543503871]                  2240          1          -    Covered              
        bin auto[1543503872:1610612735]                  1960          1          -    Covered              
        bin auto[1610612736:1677721599]                  2600          1          -    Covered              
        bin auto[1677721600:1744830463]                  2160          1          -    Covered              
        bin auto[1744830464:1811939327]                  2640          1          -    Covered              
        bin auto[1811939328:1879048191]                  2600          1          -    Covered              
        bin auto[1879048192:1946157055]                  2340          1          -    Covered              
        bin auto[1946157056:2013265919]                  2640          1          -    Covered              
        bin auto[2013265920:2080374783]                  2320          1          -    Covered              
        bin auto[2080374784:2147483647]                  2600          1          -    Covered              
        bin auto[2147483648:2214592511]                  2040          1          -    Covered              
        bin auto[2214592512:2281701375]                  2920          1          -    Covered              
        bin auto[2281701376:2348810239]                  2400          1          -    Covered              
        bin auto[2348810240:2415919103]                  2000          1          -    Covered              
        bin auto[2415919104:2483027967]                  2160          1          -    Covered              
        bin auto[2483027968:2550136831]                  2320          1          -    Covered              
        bin auto[2550136832:2617245695]                  2360          1          -    Covered              
        bin auto[2617245696:2684354559]                  2680          1          -    Covered              
        bin auto[2684354560:2751463423]                  1720          1          -    Covered              
        bin auto[2751463424:2818572287]                  2360          1          -    Covered              
        bin auto[2818572288:2885681151]                  2040          1          -    Covered              
        bin auto[2885681152:2952790015]                  2440          1          -    Covered              
        bin auto[2952790016:3019898879]                  2280          1          -    Covered              
        bin auto[3019898880:3087007743]                  3000          1          -    Covered              
        bin auto[3087007744:3154116607]                  2400          1          -    Covered              
        bin auto[3154116608:3221225471]                  2320          1          -    Covered              
        bin auto[3221225472:3288334335]                  2420          1          -    Covered              
        bin auto[3288334336:3355443199]                  2440          1          -    Covered              
        bin auto[3355443200:3422552063]                  2120          1          -    Covered              
        bin auto[3422552064:3489660927]                  2000          1          -    Covered              
        bin auto[3489660928:3556769791]                  2480          1          -    Covered              
        bin auto[3556769792:3623878655]                  2320          1          -    Covered              
        bin auto[3623878656:3690987519]                  2240          1          -    Covered              
        bin auto[3690987520:3758096383]                  2120          1          -    Covered              
        bin auto[3758096384:3825205247]                  2200          1          -    Covered              
        bin auto[3825205248:3892314111]                  2120          1          -    Covered              
        bin auto[3892314112:3959422975]                  2160          1          -    Covered              
        bin auto[3959422976:4026531839]                  2360          1          -    Covered              
        bin auto[4026531840:4093640703]                  2780          1          -    Covered              
        bin auto[4093640704:4160749567]                  2080          1          -    Covered              
        bin auto[4160749568:4227858431]                  2520          1          -    Covered              
        bin auto[4227858432:4294967295]                  1920          1          -    Covered              
    Coverpoint Rx_Valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin RX_VALID_H                                  50468          1          -    Covered              
        bin RX_VALID_L                                1049357          1          -    Covered              
        bin TRANS_HL                                    50468          1          -    Covered              
        bin TRANS_LH                                    50468          1          -    Covered              
    Coverpoint Rx_status_cp                            71.42%        100          -    Uncovered            
        covered/total bins:                                 5          7          -                      
        missing/total bins:                                 2          7          -                      
        % Hit:                                         71.42%        100          -                      
        bin STATUS_NO_ERROR                            814024          1          -    Covered              
        bin STATUS_SKP_ADDED                               11          1          -    Covered              
        bin STATUS_SKP_REMOVED                              0          1          -    ZERO                 
        bin STATUS_OVERFLOW                                 0          1          -    ZERO                 
        bin STATUS_UNDERFLOW                            10300          1          -    Covered              
        bin STATUS_DECODE_ERROR                          8270          1          -    Covered              
        bin STATUS_DISPARITY_ERROE                     267220          1          -    Covered              
    Coverpoint COMMA_DETECTION_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin COMMA_H                                     50468          1          -    Covered              
        bin COMMA_L                                     50468          1          -    Covered              
        bin COMMA_HL                                    50468          1          -    Covered              
        bin COMMA_LH                                    50468          1          -    Covered              
    Coverpoint Decode_Error_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin DEC_ERR_H                                    8270          1          -    Covered              
        bin DEC_ERR_L                                    8270          1          -    Covered              
        bin DEC_ERR_HL                                    817          1          -    Covered              
        bin DEC_ERR_LH                                    817          1          -    Covered              
    Coverpoint Disparity_Error_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin Disparity_ERR_H                            272270          1          -    Covered              
        bin Disparity_ERR_L                            272270          1          -    Covered              
        bin Disparity_ERR_HL                            27221          1          -    Covered              
        bin Disparity_ERR_LH                            27221          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/RESET_gp           100.00%        100          -    Covered              
    covered/total bins:                                     4          4          -                      
    missing/total bins:                                     0          4          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint RESET_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::RESET_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                     4          4          -                      
    missing/total bins:                                     0          4          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint RESET_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin RESET_HIGH                                     15          1          -    Covered              
        bin RESET_LOW                                      10          1          -    Covered              
        bin RST_TRANS_HL                                   10          1          -    Covered              
        bin RST_TRANS_LH                                   10          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/CONFIG_gp          100.00%        100          -    Covered              
    covered/total bins:                                     3          3          -                      
    missing/total bins:                                     0          3          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint DATA_BUS_WIDTH_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin BUS_WIDTH_8                                149975          1          -    Covered              
        bin BUS_WIDTH_16                               349950          1          -    Covered              
        bin BUS_WIDTH_32                               599900          1          -    Covered              
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      26        21         5    80.76%

================================Statement Details================================

Statement Coverage for instance /my_coverage_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_coverage.sv
    1                                                package my_coverage_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                  import my_sequence_item_pkg::*;
    7                                                
    8                                                  class my_coverage extends uvm_component;
    9                                                
    10              1                    ***0***         `uvm_component_utils(my_coverage);
    10              2                    ***0***     
    10              3                    ***0***     
    11                                               
    12                                                   uvm_analysis_export #(my_sequence_item)   cov_export;
    13                                                   uvm_tlm_analysis_fifo #(my_sequence_item) cov_fifo;
    14                                                   my_sequence_item                          data_to_cover;
    15                                               
    16                                                   virtual BFM_if                            bfm_vif;
    17                                                   virtual INTERNALS_if                      internals_if;
    18                                               
    19                                               
    20                                               
    21                                                   ////////////////////////////////////////////////////////
    22                                                   //////////////////// COVER GROUPS //////////////////////
    23                                                   ////////////////////////////////////////////////////////
    24                                               
    25                                                   covergroup PMA_COV_gp;
    26                                               
    27                                                     TX_cp: coverpoint data_to_cover.TX_Out_P {
    28                                                       bins TX_HIGH_BIT = {1'b1};
    29                                                       bins TX_LOW_BIT = {1'b0};
    30                                                       bins TRANS_10 = (1 => 0);
    31                                                       bins TRANS_01 = (0 => 1);
    32                                                       bins TRANS_11 = (1 => 1);
    33                                                       bins TRANS_00 = (0 => 0);
    34                                                     }
    35                                               
    36                                                     MAC_TX_Data_cp: coverpoint data_to_cover.MAC_TX_Data {
    37                                                       bins MAC_STIM_COMMA = {32'hBC_BC_BC_BC};
    38                                                       bins MAC_STIM_TSEQ = {32'h4A_4A_4A_4A};
    39                                                       bins MAC_STIM_DATA = default;
    40                                                     }
    41                                               
    42                                                     MAC_TX_DataK_cp: coverpoint data_to_cover.MAC_TX_DataK iff (bfm_vif.Reset_n) {
    43                                                       bins FULL_CMD_PKT = {4'd15};
    44                                                     }
    45                                               
    46                                               
    47                                                     MAC_TX_Enable_cp: coverpoint internals_if.MAC_Data_En {
    48                                                       bins ENABLE_H = {1'b1};
    49                                                       bins ENABLE_L = {1'b0};
    50                                                       bins ENABLE_HL = (1 => 0);
    51                                                       bins ENABLE_LH = (0 => 1);
    52                                                     }
    53                                               
    54                                                   endgroup
    55                                               
    56                                               
    57                                                   //.................................
    58                                               
    59                                                   covergroup PCS_COV_gp;
    60                                               
    61                                                     RX_DATA_cp: coverpoint data_to_cover.Rx_Data;
    62                                               
    63                                               
    64                                                     Rx_Valid_cp: coverpoint data_to_cover.Rx_Valid {
    65                                                       bins RX_VALID_H = {1'b1};
    66                                                       bins RX_VALID_L = {1'b0};
    67                                                       bins TRANS_HL = (1 => 0);
    68                                                       bins TRANS_LH = (0 => 1);
    69                                                     }
    70                                               
    71                                               
    72                                                     Rx_status_cp: coverpoint data_to_cover.Rx_Status {
    73                                                       bins STATUS_NO_ERROR = {3'b000};
    74                                                       bins STATUS_SKP_ADDED = {3'b001};
    75                                                       bins STATUS_SKP_REMOVED = {3'b010};
    76                                                       bins STATUS_OVERFLOW = {3'b101};
    77                                                       bins STATUS_UNDERFLOW = {3'b110};
    78                                                       bins STATUS_DECODE_ERROR = {3'b100};
    79                                                       bins STATUS_DISPARITY_ERROE = {3'b111};
    80                                                     }
    81                                               
    82                                               
    83                                                     COMMA_DETECTION_cp: coverpoint internals_if.COMMA_PULSE {
    84                                                       bins COMMA_H = {1'b1};
    85                                                       bins COMMA_L = {1'b1};
    86                                                       bins COMMA_HL = (1 => 0);
    87                                                       bins COMMA_LH = (0 => 1);
    88                                                     }
    89                                               
    90                                               
    91                                                     Decode_Error_cp: coverpoint internals_if.Decode_Error {
    92                                                       bins DEC_ERR_H = {1'b1};
    93                                                       bins DEC_ERR_L = {1'b1};
    94                                                       bins DEC_ERR_HL = (1 => 0);
    95                                                       bins DEC_ERR_LH = (0 => 1);
    96                                                     }
    97                                               
    98                                               
    99                                                     Disparity_Error_cp: coverpoint internals_if.Disparity_Error {
    100                                                      bins Disparity_ERR_H = {1'b1};
    101                                                      bins Disparity_ERR_L = {1'b1};
    102                                                      bins Disparity_ERR_HL = (1 => 0);
    103                                                      bins Disparity_ERR_LH = (0 => 1);
    104                                                    }
    105                                              
    106                                              
    107                                                  endgroup
    108                                              
    109                                              
    110                                                  //...........................................
    111                                              
    112                                                  covergroup RESET_gp;
    113                                              
    114                                                    RESET_cp: coverpoint bfm_vif.Reset_n {
    115                                                      bins RESET_HIGH = {1'b1};
    116                                                      bins RESET_LOW = {1'b0};
    117                                                      bins RST_TRANS_HL = (1 => 0);
    118                                                      bins RST_TRANS_LH = (0 => 1);
    119                                                    }
    120                                                  endgroup
    121                                              
    122                                                  covergroup CONFIG_gp;
    123                                                    DATA_BUS_WIDTH_cp: coverpoint internals_if.DataBusWidth {
    124                                                      bins BUS_WIDTH_8 = {6'd8}; bins BUS_WIDTH_16 = {6'd16}; bins BUS_WIDTH_32 = {6'd32};
    125                                                    }
    126                                              
    127                                                  endgroup
    128                                              
    129                                              
    130                                                  ////////////////////////////////////////////////////////
    131                                                  ////////////////////////////////////////////////////////
    132                                                  ////////////////////////////////////////////////////////
    133                                              
    134                                              
    135                                                  function void build_phase(uvm_phase phase);
    136             1                          5           super.build_phase(phase);
    137             1                          5           cov_export    = new("cov_export", this);
    138             1                          5           cov_fifo      = new("cov_fifo", this);
    139             1                          5           data_to_cover = new("data_to_cover");
    140                                              
    141                                                    if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", bfm_vif))
    142             1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING BFM INTERFACE in CONFIG_DB");
    143                                              
    144                                              
    145                                                    if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", internals_if))
    146             1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
    147                                              
    148                                                  endfunction
    149                                              
    150                                              
    151                                                  function void connect_phase(uvm_phase phase);
    152             1                          5           super.connect_phase(phase);
    153             1                          5           cov_export.connect(cov_fifo.analysis_export);
    154                                                  endfunction
    155                                              
    156                                              
    157                                                  function new(string name = "my_coverage", uvm_component parent = null);
    158             1                          5           super.new(name, parent);
    159             1                          5           PMA_COV_gp = new();
    160             1                          5           PCS_COV_gp = new();
    161             1                          5           CONFIG_gp  = new();
    162             1                          5           RESET_gp   = new();
    163                                                  endfunction
    164                                              
    165                                              
    166                                              
    167                                                  task run_phase(uvm_phase phase);
    168             1                          5           super.run_phase(phase);
    169                                                    fork
    170                                                      begin
    171             1                          5               forever begin
    172             1                    1099830                 @(internals_if.Bit_CLK);
    173             1                    1099825                 cov_fifo.get(data_to_cover);
    174             1                    1099825                 PMA_COV_gp.sample();
    175             1                    1099825                 PCS_COV_gp.sample();
    176             1                    1099825                 CONFIG_gp.sample();
    177                                                        end
    178                                                      end
    179                                                      begin
    180             1                          5               forever begin
    181             1                         30                 @(bfm_vif.Reset_n);
    182             1                         25                 RESET_gp.sample();


=================================================================================
=== Instance: /my_scoreboard_pkg
=== Design Unit: work.my_scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        28        16        12    57.14%

================================Branch Details================================

Branch Coverage for instance /my_scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_scoreboard.sv
------------------------------------IF Branch------------------------------------
    65                                        10     Count coming in to IF
    65              1                    ***0***           if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", internals_if))
                                              10     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    66                                   ***0***     Count coming in to IF
    66              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    68                                        10     Count coming in to IF
    68              1                    ***0***           if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", bfm_vif))
                                              10     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    69                                   ***0***     Count coming in to IF
    69              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    71                                        10     Count coming in to IF
    71              1                         10           `uvm_info("MY_SCOREBOARD", "BUILD_PHASE", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    102                                  1099820     Count coming in to IF
    102             1                     494906             if (data_to_check.Rx_Data) begin
                                          604914     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                   494906     Count coming in to IF
    103             1                     252420               if (Queue_Data[$] != data_to_check.Rx_Data) begin
                                          242486     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    104                                   252420     Count coming in to IF
    104             1                      10370                 if ((internals_if.DataBusWidth==6'd32 && data_to_check.Rx_Data != 32'h4A4A_4A4A) || (internals_if.DataBusWidth==6'd16 && data_to_check.Rx_Data != 32'h0000_4A4A) || (internals_if.DataBusWidth==6'd8 && data_to_check.Rx_Data != 32'h0000_004A)) begin
                                          242050     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    135                                    20740     Count coming in to IF
    135             1                       7434             if (value1 == value2) begin
    139             1                      13306             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    137                                     7434     Count coming in to IF
    137             1                       7434               `uvm_info("CORRECT COUNT", $sformatf("ACTUAL DATA = %h , EXPECTED DATA = %h", value1,
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    141                                    13306     Count coming in to IF
    141             1                      13306               `uvm_info("WRONG COUNT", $sformatf("ACTUAL DATA = %h , EXPECTED DATA = %h", value1,
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    146                                       10     Count coming in to IF
    146             1                         10           `uvm_info("CHECK_PHASE", $sformatf("QUEUE SIZE = %d , LAST ELEMENT = %h", Queue_Data.size(),
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    150                                       10     Count coming in to IF
    150             1                         10           `uvm_info("CORRECT DATA", $sformatf("correct_count = %d", correct_count), UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    151                                       10     Count coming in to IF
    151             1                         10           `uvm_info("ERROR DATA  ", $sformatf("error_count = %d", error_count), UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         8         0   100.00%

================================Condition Details================================

Condition Coverage for instance /my_scoreboard_pkg --

  File my_scoreboard.sv
----------------Focused Condition View-------------------
Line       103 Item    1  (this.Queue_Data[$] != this.data_to_check.Rx_Data)
Condition totals: 1 of 1 input term covered = 100.00%

                                          Input Term   Covered  Reason for no coverage   Hint
                                         -----------  --------  -----------------------  --------------
  (this.Queue_Data[$] != this.data_to_check.Rx_Data)         Y

     Rows:       Hits  FEC Target                                            Non-masking condition(s)      
 ---------  ---------  --------------------                                  -------------------------     
  Row   1:          5  (this.Queue_Data[$] != this.data_to_check.Rx_Data)_0  -                             
  Row   2:          5  (this.Queue_Data[$] != this.data_to_check.Rx_Data)_1  -                             

----------------Focused Condition View-------------------
Line       104 Item    1  (((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) || ((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) || ((this.internals_if.DataBusWidth == 8) && (this.data_to_check.Rx_Data != 74)))
Condition totals: 6 of 6 input terms covered = 100.00%

                                  Input Term   Covered  Reason for no coverage   Hint
                                 -----------  --------  -----------------------  --------------
      (this.internals_if.DataBusWidth == 32)         Y
  (this.data_to_check.Rx_Data != 1246382666)         Y
      (this.internals_if.DataBusWidth == 16)         Y
       (this.data_to_check.Rx_Data != 19018)         Y
       (this.internals_if.DataBusWidth == 8)         Y
          (this.data_to_check.Rx_Data != 74)         Y

     Rows:       Hits  FEC Target                                    Non-masking condition(s)      
 ---------  ---------  --------------------                          -------------------------     
  Row   1:          5  (this.internals_if.DataBusWidth == 32)_0      ~(((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) || ((this.internals_if.DataBusWidth == 8) && (this.data_to_check.Rx_Data != 74)))
  Row   2:          5  (this.internals_if.DataBusWidth == 32)_1      (this.data_to_check.Rx_Data != 1246382666)
  Row   3:          5  (this.data_to_check.Rx_Data != 1246382666)_0  (~(((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) || ((this.internals_if.DataBusWidth == 8) && (this.data_to_check.Rx_Data != 74))) && (this.internals_if.DataBusWidth == 32))
  Row   4:          5  (this.data_to_check.Rx_Data != 1246382666)_1  (this.internals_if.DataBusWidth == 32)
  Row   5:          5  (this.internals_if.DataBusWidth == 16)_0      (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 8) && (this.data_to_check.Rx_Data != 74)))
  Row   6:          5  (this.internals_if.DataBusWidth == 16)_1      (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && (this.data_to_check.Rx_Data != 19018))
  Row   7:          5  (this.data_to_check.Rx_Data != 19018)_0       (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 8) && (this.data_to_check.Rx_Data != 74)) && (this.internals_if.DataBusWidth == 16))
  Row   8:          5  (this.data_to_check.Rx_Data != 19018)_1       (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && (this.internals_if.DataBusWidth == 16))
  Row   9:          5  (this.internals_if.DataBusWidth == 8)_0       (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)))
 Row   10:          5  (this.internals_if.DataBusWidth == 8)_1       (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) && (this.data_to_check.Rx_Data != 74))
 Row   11:          4  (this.data_to_check.Rx_Data != 74)_0          (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) && (this.internals_if.DataBusWidth == 8))
 Row   12:          5  (this.data_to_check.Rx_Data != 74)_1          (~((this.internals_if.DataBusWidth == 32) && (this.data_to_check.Rx_Data != 1246382666)) && ~((this.internals_if.DataBusWidth == 16) && (this.data_to_check.Rx_Data != 19018)) && (this.internals_if.DataBusWidth == 8))

----------------Focused Condition View-------------------
Line       135 Item    1  (this.value1 == this.value2)
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (this.value1 == this.value2)         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          5  (this.value1 == this.value2)_0  -                             
  Row   2:          5  (this.value1 == this.value2)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      51        46         5    90.19%

================================Statement Details================================

Statement Coverage for instance /my_scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_scoreboard.sv
    1                                                package my_scoreboard_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                  import my_sequence_item_pkg::*;
    7                                                  import PARAMETERS_PKG::*;
    8                                                
    9                                                
    10                                                 class my_scoreboard extends uvm_scoreboard;
    11                                               
    12              1                    ***0***         `uvm_component_utils(my_scoreboard);
    12              2                    ***0***     
    12              3                    ***0***     
    13                                               
    14                                                   uvm_analysis_export #(my_sequence_item)            sb_export;
    15                                                   uvm_tlm_analysis_fifo #(my_sequence_item)          sb_fifo;
    16                                               
    17                                                   // uvm_analysis_imp      #(my_sequence_item , my_scoreboard) sb_export ;
    18                                               
    19                                                   virtual BFM_if                                     bfm_vif;
    20                                                   virtual INTERNALS_if                               internals_if;
    21                                               
    22                                                   my_sequence_item                                   data_to_check;
    23                                               
    24                                                   int                                                fd,                  fd2;
    25                                                   int                                                correct_count;
    26                                                   int                                                error_count;
    27                                               
    28                                                   logic                                     [31 : 0] temp0;
    29                                                   logic                                     [31 : 0] Queue_Data      [$];
    30                                                   logic                                     [31 : 0] Queue_Expec_Data[$];
    31                                               
    32                                                   logic                                     [ 9 : 0] Coma_collection;
    33                                               
    34                                               
    35                                                   logic                                     [31 : 0] value1;
    36                                                   logic                                     [31 : 0] value2;
    37                                               
    38                                               
    39                                                   realtime                                           t1,                  t2,  t3, t4, t5, t6;
    40                                               
    41                                               
    42                                                   function new(string name = "my_scoreboard", uvm_component parent = null);
    43              1                         10           super.new(name, parent);
    44              1                         10           fd = 0;
    45              1                         10           fd2 = 0;
    46              1                         10           t1 = 0;
    47              1                         10           t2 = 0;
    48              1                         10           t3 = 0;
    49              1                         10           t4 = 0;
    50              1                         10           t5 = 0;
    51              1                         10           t6 = 0;
    52              1                         10           Coma_collection = 10'h0;
    53              1                         10           value1 = 0;
    54              1                         10           value2 = 0;
    55                                                   endfunction
    56                                               
    57                                               
    58                                               
    59                                                   function void build_phase(uvm_phase phase);
    60              1                         10           super.build_phase(phase);
    61              1                         10           sb_export     = new("sb_export", this);
    62              1                         10           sb_fifo       = new("sb_fifo", this);
    63              1                         10           data_to_check = new("data_to_check");
    64                                               
    65                                                     if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", internals_if))
    66              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
    67                                               
    68                                                     if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", bfm_vif))
    69              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
    70                                               
    71              1                         10           `uvm_info("MY_SCOREBOARD", "BUILD_PHASE", UVM_MEDIUM);
    72                                                   endfunction
    73                                               
    74                                               
    75                                                   function void connect_phase(uvm_phase phase);
    76              1                         10           super.connect_phase(phase);
    77              1                         10           sb_export.connect(sb_fifo.analysis_export);
    78                                                   endfunction
    79                                               
    80                                               
    81                                                   function void end_of_elaboration_phase(uvm_phase phase);
    82              1                         10           super.end_of_elaboration_phase(phase);  //  OPEN FILE
    83              1                         10           fd  = $fopen("./MAC_TX_Data_Stim.hex", "r");
    84              1                         10           fd2 = $fopen("./PHY_OUT.hex", "a");
    85              1                         10           Queue_Data.push_back(0);
    86                                                   endfunction
    87                                               
    88                                               
    89                                               
    90                                                   task run_phase(uvm_phase phase);
    91              1                         10           super.run_phase(phase);
    92                                               
    93                                               
    94              1                         10           forever begin  //Collect Outs in Queue after Comma Detection
    95              1                    1099830             sb_fifo.get(data_to_check);
    96              1                    1099825             @(internals_if.Bit_CLK);
    97                                                       //`uvm_info("CAPTURED DATA",$sformatf(" DATA = %h",data_to_check.Rx_Data),UVM_MEDIUM) ;
    98                                                       //`uvm_info("MY_SCOREBOARD","SOREBOARD's CAPTURING",UVM_MEDIUM);
    99                                               
    100                                                      // !(data_to_check.Rx_Data[7:0] == 8'h7c || data_to_check.Rx_Data[15:8] == 8'h7c || data_to_check.Rx_Data[23:16] == 8'h7c || data_to_check.Rx_Data[31:24] == 8'h7c
    101                                              
    102                                                      if (data_to_check.Rx_Data) begin
    103                                                        if (Queue_Data[$] != data_to_check.Rx_Data) begin
    104                                                          if ((internals_if.DataBusWidth==6'd32 && data_to_check.Rx_Data != 32'h4A4A_4A4A) || (internals_if.DataBusWidth==6'd16 && data_to_check.Rx_Data != 32'h0000_4A4A) || (internals_if.DataBusWidth==6'd8 && data_to_check.Rx_Data != 32'h0000_004A)) begin
    105             1                      10370                   Queue_Data.push_back(data_to_check.Rx_Data);
    106             1                      10370                   $fwrite(fd2, "%h\n", data_to_check.Rx_Data);
    107                                                          end
    108                                                        end
    109                                                      end
    110                                                    end
    111                                              
    112                                                  endtask
    113                                              
    114                                              
    115                                              
    116                                                  function void check_phase(uvm_phase phase);
    117             1                         10           super.check_phase(phase);
    118             1                         10           $fclose(fd2);
    119             1                         10           fd2 = $fopen("./PHY_OUT.hex", "r");
    120                                                  endfunction
    121                                              
    122                                              
    123                                              
    124                                                  function void report_phase(uvm_phase phase);
    125             1                         10           super.report_phase(phase);
    126                                              
    127                                              
    128             1                      20750           while (!$feof(
    129                                                        fd2
    130                                                    )) begin
    131                                                      //$fgets(value1,fd);
    132             1                      20740             $fscanf(fd, "%h\n", value1);
    133             1                      20740             $fscanf(fd2, "%h\n", value2);
    134                                              
    135                                                      if (value1 == value2) begin
    136             1                       7434               correct_count++;
    137             1                       7434               `uvm_info("CORRECT COUNT", $sformatf("ACTUAL DATA = %h , EXPECTED DATA = %h", value1,
    138                                                                                             value2), UVM_LOW);
    139                                                      end else begin
    140             1                      13306               error_count++;
    141             1                      13306               `uvm_info("WRONG COUNT", $sformatf("ACTUAL DATA = %h , EXPECTED DATA = %h", value1,
    142                                                                                           value2), UVM_LOW);
    143                                                      end
    144                                              
    145                                                    end
    146             1                         10           `uvm_info("CHECK_PHASE", $sformatf("QUEUE SIZE = %d , LAST ELEMENT = %h", Queue_Data.size(),
    147                                                                                       Queue_Data[$]), UVM_MEDIUM);
    148                                              
    149                                              
    150             1                         10           `uvm_info("CORRECT DATA", $sformatf("correct_count = %d", correct_count), UVM_LOW);
    151             1                         10           `uvm_info("ERROR DATA  ", $sformatf("error_count = %d", error_count), UVM_LOW);
    152                                              
    153                                                  endfunction
    154                                              
    155                                              
    156                                              
    157                                                  function void final_phase(uvm_phase phase);
    158             1                         10           super.final_phase(phase);
    159             1                         10           $fclose(fd);  // CLOSE FILE
    160             1                         10           $fclose(fd2);


=================================================================================
=== Instance: /my_sequencer_pkg
=== Design Unit: work.my_sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         2         3    40.00%

================================Statement Details================================

Statement Coverage for instance /my_sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_sequencer.sv
    1                                                package my_sequencer_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                import my_sequence_item_pkg::*;
    7                                                
    8                                                
    9                                                class my_sequencer extends uvm_sequencer #(my_sequence_item);
    10                                               
    11              1                    ***0***     `uvm_component_utils(my_sequencer) ;
    11              2                    ***0***     
    11              3                    ***0***     
    12                                               
    13                                               
    14                                               function new(string name = "my_sequencer" , uvm_component parent = null);
    15              1                          5     	super.new(name,parent);
    16                                               endfunction
    17                                               
    18                                               function void build_phase(uvm_phase phase);
    19              1                          5     	super.build_phase(phase);


=================================================================================
=== Instance: /my_config_db_pkg
=== Design Unit: work.my_config_db_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /my_config_db_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_config_db.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***     `uvm_object_utils(my_config_db);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***     `uvm_object_utils(my_config_db);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***     `uvm_object_utils(my_config_db);
    9               4                    ***0***     `uvm_object_utils(my_config_db);
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***     `uvm_object_utils(my_config_db);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***     `uvm_object_utils(my_config_db);
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /my_config_db_pkg --

  File my_config_db.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /my_config_db_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_config_db.sv
    1                                                package my_config_db_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                
    7                                                class my_config_db extends uvm_object;
    8                                                
    9               1                    ***0***     `uvm_object_utils(my_config_db);
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                    ***0***     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11                                               virtual BFM_if        dut_vif    ;
    12                                               virtual INTERNALS_if  internals_if;
    13                                               
    14                                               function new(string name = "my_config_db");
    15              1                         10     	super.new(name);


=================================================================================
=== Instance: /my_monitor_pkg
=== Design Unit: work.my_monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         2         2    50.00%

================================Branch Details================================

Branch Coverage for instance /my_monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_monitor.sv
------------------------------------IF Branch------------------------------------
    29                                         5     Count coming in to IF
    29              1                    ***0***     	`uvm_info("MY_MONITOR","BUILD_PHASE",UVM_HIGH);
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    40                                   1099825     Count coming in to IF
    40              1                    ***0***          `uvm_info("MY_MONITOR","MONITOR IS CAPTURING",UVM_HIGH);
                                         1099825     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        17         5    77.27%

================================Statement Details================================

Statement Coverage for instance /my_monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_monitor.sv
    1                                                package my_monitor_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                
    7                                                import my_sequence_item_pkg::*;
    8                                                
    9                                                
    10                                               class my_monitor extends uvm_monitor;
    11                                               
    12              1                    ***0***     `uvm_component_utils(my_monitor);
    12              2                    ***0***     
    12              3                    ***0***     
    13                                               
    14                                               uvm_analysis_port #(my_sequence_item)  mon_port ;
    15                                               
    16                                               virtual BFM_if bfm_vif ;
    17                                               virtual INTERNALS_if internals_if;
    18                                               
    19                                               my_sequence_item  rsp_seq_item ;
    20                                               
    21                                               function new(string name = "my_monitor" , uvm_component parent = null);
    22              1                          5     	super.new(name,parent);
    23                                               endfunction
    24                                               
    25                                               
    26                                               function void build_phase(uvm_phase phase);
    27              1                          5     	super.build_phase(phase);
    28              1                          5     	mon_port = new("mon_port" , this);
    29              1                    ***0***     	`uvm_info("MY_MONITOR","BUILD_PHASE",UVM_HIGH);
    30                                               
    31                                               endfunction 
    32                                               
    33                                               
    34                                               task run_phase(uvm_phase phase);
    35              1                          5     	super.run_phase(phase);
    36              1                          5     	forever begin
    37              1                    1099830     	rsp_seq_item = my_sequence_item:: type_id :: create("rsp_seq_item");
    38              1                    1099830          @(posedge internals_if.Bit_CLK);    // BIT CLK
    39                                                    
    40              1                    ***0***          `uvm_info("MY_MONITOR","MONITOR IS CAPTURING",UVM_HIGH);
    41                                                   
    42                                                    // rsp_seq_item.DataBusWidth = bfm_vif.DataBusWidth;
    43              1                    1099825          rsp_seq_item.MAC_TX_Data  = bfm_vif.MAC_TX_Data ;
    44              1                    1099825          rsp_seq_item.MAC_TX_DataK = bfm_vif.MAC_TX_DataK;
    45              1                    1099825          rsp_seq_item.MAC_Data_En  = bfm_vif.MAC_Data_En ;
    46                                               
    47              1                    1099825          rsp_seq_item.Rx_Data      = bfm_vif.Rx_Data     ;
    48              1                    1099825          rsp_seq_item.Rx_DataK     = bfm_vif.Rx_DataK    ;
    49              1                    1099825          rsp_seq_item.Rx_Status    = bfm_vif.Rx_Status   ;
    50              1                    1099825          rsp_seq_item.Rx_Valid     = bfm_vif.Rx_Valid    ;
    51              1                    1099825          rsp_seq_item.PCLK         = bfm_vif.PCLK        ;
    52                                               
    53              1                    1099825          rsp_seq_item.TX_Out_P     = bfm_vif.TX_Out_P    ;
    54                                                    
    55                                                    
    56                                               
    57              1                    1099825     	 mon_port.write(rsp_seq_item)                    ;


=================================================================================
=== Instance: /my_driver_pkg
=== Design Unit: work.my_driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         2         2    50.00%

================================Branch Details================================

Branch Coverage for instance /my_driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_driver.sv
------------------------------------IF Branch------------------------------------
    26                                         5     Count coming in to IF
    26              1                    ***0***           `uvm_info("MY_DRIVER", "BUILD_PHASE", UVM_HIGH);
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    52                                     47500     Count coming in to IF
    52              1                    ***0***           `uvm_info("MY_DRIVER", "DRIVE FUN", UVM_HIGH);
                                           47500     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      19        14         5    73.68%

================================Statement Details================================

Statement Coverage for instance /my_driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_driver.sv
    1                                                package my_driver_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                  import my_sequence_item_pkg::*;
    7                                                
    8                                                
    9                                                  class my_driver extends uvm_driver #(my_sequence_item);
    10                                               
    11              1                    ***0***         `uvm_component_utils(my_driver);
    11              2                    ***0***     
    11              3                    ***0***     
    12                                               
    13                                                   virtual BFM_if   bfm_vif;
    14                                                   my_sequence_item stim_seq_item;
    15                                               
    16                                               
    17                                               
    18                                                   function new(string name = "my_driver", uvm_component parent = null);
    19              1                          5           super.new(name, parent);
    20                                               
    21                                                   endfunction
    22                                               
    23                                               
    24                                                   function void build_phase(uvm_phase phase);
    25              1                          5           super.build_phase(phase);
    26              1                    ***0***           `uvm_info("MY_DRIVER", "BUILD_PHASE", UVM_HIGH);
    27                                                   endfunction
    28                                               
    29                                               
    30                                                   task run_phase(uvm_phase phase);
    31              1                          5           super.run_phase(phase);
    32              1                          5           forever begin
    33              1                      47505             stim_seq_item = my_sequence_item::type_id::create("stim_seq_item", this);
    34              1                      47505             seq_item_port.get_next_item(stim_seq_item);
    35              1                      47500             drive();
    36              1                      47500             seq_item_port.item_done(stim_seq_item);
    37                                                     end
    38                                                   endtask : run_phase
    39                                               
    40                                               
    41                                               
    42                                                   task drive();
    43              1                      47500           @(negedge bfm_vif.PCLK);
    44              1                      47500           stim_seq_item.DataBusWidth = bfm_vif.DataBusWidth;
    45                                                     // bfm_vif.DataBusWidth = stim_seq_item.DataBusWidth;
    46                                                     // bfm_vif.Reset_n      = stim_seq_item.Reset_n     ;
    47              1                      47500           bfm_vif.MAC_TX_Data = stim_seq_item.MAC_TX_Data;
    48              1                      47500           bfm_vif.MAC_TX_DataK = stim_seq_item.MAC_TX_DataK;
    49              1                      47500           bfm_vif.MAC_Data_En = stim_seq_item.MAC_Data_En;
    50              1                      47500           bfm_vif.RxPolarity = stim_seq_item.RxPolarity;
    51                                               
    52              1                    ***0***           `uvm_info("MY_DRIVER", "DRIVE FUN", UVM_HIGH);


=================================================================================
=== Instance: /my_agent_pkg
=== Design Unit: work.my_agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         3         5    37.50%

================================Branch Details================================

Branch Coverage for instance /my_agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_agent.sv
------------------------------------IF Branch------------------------------------
    44                                         5     Count coming in to IF
    44              1                    ***0***     	if(!uvm_config_db#(my_config_db)::get(this, "", "CFG",cfg))
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    45                                   ***0***     Count coming in to IF
    45              1                    ***0***     		`uvm_fatal("MY_AGENT" , "FAILED GETTING CONFIG DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    47                                         5     Count coming in to IF
    47              1                          5     	`uvm_info("MY_AGENT","BUILD_PHASE",UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    59                                         5     Count coming in to IF
    59              1                          5     	`uvm_info("MY_AGENT","CONNECT_PHASE",UVM_MEDIUM) ;
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        16         4    80.00%

================================Statement Details================================

Statement Coverage for instance /my_agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_agent.sv
    1                                                package my_agent_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                import my_driver_pkg::*       ;
    7                                                import my_sequence_item_pkg::*;
    8                                                import my_monitor_pkg::*      ;
    9                                                import my_config_db_pkg::*    ;
    10                                               import my_sequencer_pkg::*    ;
    11                                               import my_scoreboard_pkg::*   ;
    12                                               
    13                                               
    14                                               
    15                                               class my_agent extends uvm_agent;
    16                                               
    17              1                    ***0***     `uvm_component_utils(my_agent) ;
    17              2                    ***0***     
    17              3                    ***0***     
    18                                               
    19                                               uvm_analysis_port #(my_sequence_item) agt_port;
    20                                               
    21                                               	my_config_db cfg        ;
    22                                               	my_driver    driver     ;
    23                                               	my_monitor   monitor    ;    
    24                                               	my_scoreboard scoreboard;  
    25                                               	my_sequencer sqr        ;
    26                                               
    27                                               
    28                                               function new(string name = "my_agent" , uvm_component parent = null);
    29              1                          5     	super.new(name,parent);
    30                                               endfunction
    31                                               
    32                                               
    33                                               function void build_phase(uvm_phase phase);
    34              1                          5     	super.build_phase(phase);
    35                                               
    36              1                          5     	driver     = my_driver    :: type_id :: create("driver"    ,this) ;
    37              1                          5     	sqr        = my_sequencer :: type_id :: create("sqr"       ,this) ;
    38              1                          5     	monitor    = my_monitor   :: type_id :: create("monitor"   ,this) ;
    39              1                          5     	scoreboard = my_scoreboard:: type_id :: create("scoreboard",this) ;
    40              1                          5     	cfg        = my_config_db :: type_id :: create ("cfg"      ,this) ; 
    41              1                          5         agt_port   = new("agt_port", this);
    42                                               
    43                                               
    44                                               	if(!uvm_config_db#(my_config_db)::get(this, "", "CFG",cfg))
    45              1                    ***0***     		`uvm_fatal("MY_AGENT" , "FAILED GETTING CONFIG DB");
    46                                               
    47              1                          5     	`uvm_info("MY_AGENT","BUILD_PHASE",UVM_MEDIUM);
    48                                               endfunction 
    49                                               
    50                                               
    51                                               
    52                                               function void connect_phase(uvm_phase phase);
    53              1                          5     	super.connect_phase(phase)                       ;
    54              1                          5         monitor.bfm_vif = cfg.dut_vif                    ;
    55              1                          5         monitor.internals_if = cfg.internals_if          ;
    56                                                   //scoreboard.bfm_vif = cfg.dut_vif                 ;
    57                                                   //scoreboard.internals_if = cfg.internals_if       ;
    58              1                          5         driver.bfm_vif  = cfg.dut_vif                    ;
    59              1                          5     	`uvm_info("MY_AGENT","CONNECT_PHASE",UVM_MEDIUM) ;
    60              1                          5         driver.seq_item_port.connect(sqr.seq_item_export);
    61              1                          5         monitor.mon_port.connect(agt_port)               ;


=================================================================================
=== Instance: /my_env_pkg
=== Design Unit: work.my_env_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /my_env_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_env.sv
------------------------------------IF Branch------------------------------------
    31                                         5     Count coming in to IF
    31              1                    ***0***     	`uvm_info("MY_ENV","BUILD_PHASE",UVM_HIGH);
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      12         8         4    66.66%

================================Statement Details================================

Statement Coverage for instance /my_env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_env.sv
    1                                                package my_env_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                import my_agent_pkg     ::*;
    7                                                import my_monitor_pkg   ::*; 
    8                                                import my_scoreboard_pkg::*;
    9                                                import my_coverage_pkg  ::*;
    10                                               
    11                                               
    12                                               
    13                                               class my_env extends uvm_env;
    14                                               
    15              1                    ***0***     `uvm_component_utils(my_env);
    15              2                    ***0***     
    15              3                    ***0***     
    16                                               
    17                                               my_agent        agent      ;
    18                                               my_scoreboard   scoreboard ; 
    19                                               my_coverage     coverage   ;
    20                                               
    21                                               function new(string name = "my_env" , uvm_component parent = null);
    22              1                          5     	super.new(name,parent);
    23                                               endfunction
    24                                               
    25                                               
    26                                               function void build_phase(uvm_phase phase);
    27              1                          5     	super.build_phase(phase);
    28              1                          5     	agent      = my_agent      :: type_id :: create("agent"     ,this);
    29              1                          5     	scoreboard = my_scoreboard :: type_id :: create("scoreboard",this);
    30              1                          5     	coverage   = my_coverage   :: type_id :: create("coverage"  ,this);
    31              1                    ***0***     	`uvm_info("MY_ENV","BUILD_PHASE",UVM_HIGH);
    32                                               endfunction 
    33                                               
    34                                               
    35                                               function void connect_phase(uvm_phase phase);
    36              1                          5     	super.connect_phase(phase);
    37              1                          5     	agent.agt_port.connect(scoreboard.sb_export);
    38              1                          5     	agent.agt_port.connect(coverage.cov_export );


=================================================================================
=== Instance: /my_test_pkg
=== Design Unit: work.my_test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        22         9        13    40.90%

================================Branch Details================================

Branch Coverage for instance /my_test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_test.sv
------------------------------------IF Branch------------------------------------
    28                                         5     Count coming in to IF
    28              1                          5           `uvm_info("MY_TEST", "BUILD_PHASE", UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    37                                         5     Count coming in to IF
    37              1                    ***0***           if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", cfg.dut_vif))
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    38                                   ***0***     Count coming in to IF
    38              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING BFM INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    40                                         5     Count coming in to IF
    40              1                    ***0***           if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", cfg.internals_if))
                                               5     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    41                                   ***0***     Count coming in to IF
    41              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    60                                         5     Count coming in to IF
    60              1                          5               `uvm_warning("MY_TEST_32", "RESET");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    66                                         5     Count coming in to IF
    66              1                          5               `uvm_warning("MY_TEST_32", "MAIN TEST START..");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    72                                         5     Count coming in to IF
    72              1                          5               `uvm_warning("MY_TEST_16", "RESET");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    78                                         5     Count coming in to IF
    78              1                          5               `uvm_warning("MY_TEST_16", "MAIN TEST START..");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    88                                         5     Count coming in to IF
    88              1                          5               `uvm_warning("MY_TEST_8", "RESET");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    94                                         5     Count coming in to IF
    94              1                          5               `uvm_warning("MY_TEST_8", "MAIN TEST START..");
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      44        40         4    90.90%

================================Statement Details================================

Statement Coverage for instance /my_test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File my_test.sv
    1                                                package my_test_pkg;
    2                                                
    3                                                  import uvm_pkg::*;
    4                                                  `include "uvm_macros.svh"
    5                                                
    6                                                  import my_env_pkg::*;
    7                                                  import my_sequence_pkg::*;
    8                                                  import my_config_db_pkg::*;
    9                                                
    10                                               
    11                                                 class my_test extends uvm_test;
    12                                               
    13              1                    ***0***         `uvm_component_utils(my_test);
    13              2                    ***0***     
    13              3                          5     
    14                                               
    15                                                   my_env         env;
    16                                                   my_sequence_32 main_seq_32;
    17                                                   my_sequence_16 main_seq_16;
    18                                                   my_sequence_8  main_seq_8;
    19                                                   my_config_db   cfg;
    20                                               
    21                                                   function new(string name = "my_test", uvm_component parent = null);
    22              1                          5           super.new(name, parent);
    23                                                   endfunction
    24                                               
    25                                               
    26                                                   function void build_phase(uvm_phase phase);
    27              1                          5           super.build_phase(phase);
    28              1                          5           `uvm_info("MY_TEST", "BUILD_PHASE", UVM_MEDIUM);
    29                                               
    30              1                          5           env         = my_env::type_id::create("env", this);
    31              1                          5           main_seq_32 = my_sequence_32::type_id::create("main_seq_32", this);
    32              1                          5           main_seq_16 = my_sequence_16::type_id::create("main_seq_16", this);
    33              1                          5           main_seq_8  = my_sequence_8::type_id::create("main_seq_8", this);
    34              1                          5           cfg         = my_config_db::type_id::create("cfg", this);
    35                                               
    36                                               
    37                                                     if (!uvm_config_db#(virtual BFM_if)::get(this, "", "bfm_if", cfg.dut_vif))
    38              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING BFM INTERFACE in CONFIG_DB");
    39                                               
    40                                                     if (!uvm_config_db#(virtual INTERNALS_if)::get(this, "", "internals_if", cfg.internals_if))
    41              1                    ***0***             `uvm_fatal("MY_TEST", "FATAL PUTTING INTERNALS INTERFACE in CONFIG_DB");
    42                                               
    43              1                          5           uvm_config_db#(my_config_db)::set(this, "*", "CFG", cfg);
    44                                               
    45                                                   endfunction
    46                                               
    47                                               
    48                                                   task run_phase(uvm_phase phase);
    49              1                          5           phase.raise_objection(this);
    50                                               
    51                                                     fork
    52                                                       // begin
    53                                                       //   `uvm_warning("MY_TEST","MAIN SEQ START");
    54                                                       // end
    55                                                       begin
    56                                                         ///////////WIDTH = 32//////////////
    57                                               
    58              1                          5               cfg.dut_vif.DataBusWidth = 6'd32;
    59                                                         // cfg.dut_vif.DataBusWidth = 6'd32;
    60              1                          5               `uvm_warning("MY_TEST_32", "RESET");
    61              1                          5               cfg.dut_vif.Reset_n = 0;
    62              1                          5               #1000;
    63              1                          5               cfg.dut_vif.Reset_n = 1;
    64                                               
    65              1                          5               #4;
    66              1                          5               `uvm_warning("MY_TEST_32", "MAIN TEST START..");
    67              1                          5               main_seq_32.start(env.agent.sqr);
    68                                               
    69                                               
    70                                                         ////////////WIDTH = 16////////////
    71              1                          5               cfg.dut_vif.DataBusWidth = 6'd16;
    72              1                          5               `uvm_warning("MY_TEST_16", "RESET");
    73              1                          5               cfg.dut_vif.Reset_n = 0;
    74              1                          5               #1000;
    75              1                          5               cfg.dut_vif.Reset_n = 1;
    76                                               
    77              1                          5               #4;
    78              1                          5               `uvm_warning("MY_TEST_16", "MAIN TEST START..");
    79              1                          5               main_seq_16.start(env.agent.sqr);
    80                                               
    81              1                          5               #3000;
    82              1                          5               cfg.dut_vif.MAC_Data_En = 0;
    83              1                          5               #3000;
    84              1                          5               cfg.dut_vif.MAC_Data_En  = 1;
    85                                               
    86                                                         //////////WIDTH = 8////////////
    87              1                          5               cfg.dut_vif.DataBusWidth = 6'd8;
    88              1                          5               `uvm_warning("MY_TEST_8", "RESET");
    89              1                          5               cfg.dut_vif.Reset_n = 0;
    90              1                          5               #1000;
    91              1                          5               cfg.dut_vif.Reset_n = 1;
    92                                               
    93              1                          5               #4;
    94              1                          5               `uvm_warning("MY_TEST_8", "MAIN TEST START..");
    95              1                          5               main_seq_8.start(env.agent.sqr);
    96                                                       end
    97                                               
    98                                                     join
    99                                               
    100                                              
    101             1                          5           phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /my_coverage_pkg/my_coverage/PMA_COV_gp         100.00%        100          -    Covered              
    covered/total bins:                                    13         13          -                      
    missing/total bins:                                     0         13          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint TX_cp                                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_Data_cp                         100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_DataK_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint MAC_TX_Enable_cp                       100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::PMA_COV_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    13         13          -                      
    missing/total bins:                                     0         13          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint TX_cp                                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        bin TX_HIGH_BIT                                555676          1          -    Covered              
        bin TX_LOW_BIT                                 544149          1          -    Covered              
        bin TRANS_10                                   339429          1          -    Covered              
        bin TRANS_01                                   339434          1          -    Covered              
        bin TRANS_11                                   216242          1          -    Covered              
        bin TRANS_00                                   204715          1          -    Covered              
    Coverpoint MAC_TX_Data_cp                         100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin MAC_STIM_COMMA                             550000          1          -    Covered              
        bin MAC_STIM_TSEQ                              262500          1          -    Covered              
        default bin MAC_STIM_DATA                      287325                     -    Occurred             
    Coverpoint MAC_TX_DataK_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin FULL_CMD_PKT                               550000          1          -    Covered              
    Coverpoint MAC_TX_Enable_cp                       100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin ENABLE_H                                  1049725          1          -    Covered              
        bin ENABLE_L                                    50100          1          -    Covered              
        bin ENABLE_HL                                       5          1          -    Covered              
        bin ENABLE_LH                                      10          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/PCS_COV_gp          95.23%        100          -    Uncovered            
    covered/total bins:                                    85         87          -                      
    missing/total bins:                                     2         87          -                      
    % Hit:                                             97.70%        100          -                      
    Coverpoint RX_DATA_cp                             100.00%        100          -    Covered              
        covered/total bins:                                64         64          -                      
        missing/total bins:                                 0         64          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Rx_Valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Rx_status_cp                            71.42%        100          -    Uncovered            
        covered/total bins:                                 5          7          -                      
        missing/total bins:                                 2          7          -                      
        % Hit:                                         71.42%        100          -                      
    Coverpoint COMMA_DETECTION_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Decode_Error_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Disparity_Error_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::PCS_COV_gp  
                                                       95.23%        100          -    Uncovered            
    covered/total bins:                                    85         87          -                      
    missing/total bins:                                     2         87          -                      
    % Hit:                                             97.70%        100          -                      
    Coverpoint RX_DATA_cp                             100.00%        100          -    Covered              
        covered/total bins:                                64         64          -                      
        missing/total bins:                                 0         64          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0:67108863]                           806525          1          -    Covered              
        bin auto[67108864:134217727]                     2280          1          -    Covered              
        bin auto[134217728:201326591]                    2360          1          -    Covered              
        bin auto[201326592:268435455]                    2880          1          -    Covered              
        bin auto[268435456:335544319]                    2380          1          -    Covered              
        bin auto[335544320:402653183]                    2640          1          -    Covered              
        bin auto[402653184:469762047]                    2960          1          -    Covered              
        bin auto[469762048:536870911]                    2000          1          -    Covered              
        bin auto[536870912:603979775]                    2160          1          -    Covered              
        bin auto[603979776:671088639]                    2200          1          -    Covered              
        bin auto[671088640:738197503]                    2480          1          -    Covered              
        bin auto[738197504:805306367]                    1880          1          -    Covered              
        bin auto[805306368:872415231]                    2480          1          -    Covered              
        bin auto[872415232:939524095]                    2320          1          -    Covered              
        bin auto[939524096:1006632959]                   2200          1          -    Covered              
        bin auto[1006632960:1073741823]                  2040          1          -    Covered              
        bin auto[1073741824:1140850687]                  2280          1          -    Covered              
        bin auto[1140850688:1207959551]                  2360          1          -    Covered              
        bin auto[1207959552:1275068415]                148740          1          -    Covered              
        bin auto[1275068416:1342177279]                  2360          1          -    Covered              
        bin auto[1342177280:1409286143]                  2360          1          -    Covered              
        bin auto[1409286144:1476395007]                  2120          1          -    Covered              
        bin auto[1476395008:1543503871]                  2240          1          -    Covered              
        bin auto[1543503872:1610612735]                  1960          1          -    Covered              
        bin auto[1610612736:1677721599]                  2600          1          -    Covered              
        bin auto[1677721600:1744830463]                  2160          1          -    Covered              
        bin auto[1744830464:1811939327]                  2640          1          -    Covered              
        bin auto[1811939328:1879048191]                  2600          1          -    Covered              
        bin auto[1879048192:1946157055]                  2340          1          -    Covered              
        bin auto[1946157056:2013265919]                  2640          1          -    Covered              
        bin auto[2013265920:2080374783]                  2320          1          -    Covered              
        bin auto[2080374784:2147483647]                  2600          1          -    Covered              
        bin auto[2147483648:2214592511]                  2040          1          -    Covered              
        bin auto[2214592512:2281701375]                  2920          1          -    Covered              
        bin auto[2281701376:2348810239]                  2400          1          -    Covered              
        bin auto[2348810240:2415919103]                  2000          1          -    Covered              
        bin auto[2415919104:2483027967]                  2160          1          -    Covered              
        bin auto[2483027968:2550136831]                  2320          1          -    Covered              
        bin auto[2550136832:2617245695]                  2360          1          -    Covered              
        bin auto[2617245696:2684354559]                  2680          1          -    Covered              
        bin auto[2684354560:2751463423]                  1720          1          -    Covered              
        bin auto[2751463424:2818572287]                  2360          1          -    Covered              
        bin auto[2818572288:2885681151]                  2040          1          -    Covered              
        bin auto[2885681152:2952790015]                  2440          1          -    Covered              
        bin auto[2952790016:3019898879]                  2280          1          -    Covered              
        bin auto[3019898880:3087007743]                  3000          1          -    Covered              
        bin auto[3087007744:3154116607]                  2400          1          -    Covered              
        bin auto[3154116608:3221225471]                  2320          1          -    Covered              
        bin auto[3221225472:3288334335]                  2420          1          -    Covered              
        bin auto[3288334336:3355443199]                  2440          1          -    Covered              
        bin auto[3355443200:3422552063]                  2120          1          -    Covered              
        bin auto[3422552064:3489660927]                  2000          1          -    Covered              
        bin auto[3489660928:3556769791]                  2480          1          -    Covered              
        bin auto[3556769792:3623878655]                  2320          1          -    Covered              
        bin auto[3623878656:3690987519]                  2240          1          -    Covered              
        bin auto[3690987520:3758096383]                  2120          1          -    Covered              
        bin auto[3758096384:3825205247]                  2200          1          -    Covered              
        bin auto[3825205248:3892314111]                  2120          1          -    Covered              
        bin auto[3892314112:3959422975]                  2160          1          -    Covered              
        bin auto[3959422976:4026531839]                  2360          1          -    Covered              
        bin auto[4026531840:4093640703]                  2780          1          -    Covered              
        bin auto[4093640704:4160749567]                  2080          1          -    Covered              
        bin auto[4160749568:4227858431]                  2520          1          -    Covered              
        bin auto[4227858432:4294967295]                  1920          1          -    Covered              
    Coverpoint Rx_Valid_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin RX_VALID_H                                  50468          1          -    Covered              
        bin RX_VALID_L                                1049357          1          -    Covered              
        bin TRANS_HL                                    50468          1          -    Covered              
        bin TRANS_LH                                    50468          1          -    Covered              
    Coverpoint Rx_status_cp                            71.42%        100          -    Uncovered            
        covered/total bins:                                 5          7          -                      
        missing/total bins:                                 2          7          -                      
        % Hit:                                         71.42%        100          -                      
        bin STATUS_NO_ERROR                            814024          1          -    Covered              
        bin STATUS_SKP_ADDED                               11          1          -    Covered              
        bin STATUS_SKP_REMOVED                              0          1          -    ZERO                 
        bin STATUS_OVERFLOW                                 0          1          -    ZERO                 
        bin STATUS_UNDERFLOW                            10300          1          -    Covered              
        bin STATUS_DECODE_ERROR                          8270          1          -    Covered              
        bin STATUS_DISPARITY_ERROE                     267220          1          -    Covered              
    Coverpoint COMMA_DETECTION_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin COMMA_H                                     50468          1          -    Covered              
        bin COMMA_L                                     50468          1          -    Covered              
        bin COMMA_HL                                    50468          1          -    Covered              
        bin COMMA_LH                                    50468          1          -    Covered              
    Coverpoint Decode_Error_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin DEC_ERR_H                                    8270          1          -    Covered              
        bin DEC_ERR_L                                    8270          1          -    Covered              
        bin DEC_ERR_HL                                    817          1          -    Covered              
        bin DEC_ERR_LH                                    817          1          -    Covered              
    Coverpoint Disparity_Error_cp                     100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin Disparity_ERR_H                            272270          1          -    Covered              
        bin Disparity_ERR_L                            272270          1          -    Covered              
        bin Disparity_ERR_HL                            27221          1          -    Covered              
        bin Disparity_ERR_LH                            27221          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/RESET_gp           100.00%        100          -    Covered              
    covered/total bins:                                     4          4          -                      
    missing/total bins:                                     0          4          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint RESET_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/my_coverage_pkg::my_coverage::RESET_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                     4          4          -                      
    missing/total bins:                                     0          4          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint RESET_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin RESET_HIGH                                     15          1          -    Covered              
        bin RESET_LOW                                      10          1          -    Covered              
        bin RST_TRANS_HL                                   10          1          -    Covered              
        bin RST_TRANS_LH                                   10          1          -    Covered              
 TYPE /my_coverage_pkg/my_coverage/CONFIG_gp          100.00%        100          -    Covered              
    covered/total bins:                                     3          3          -                      
    missing/total bins:                                     0          3          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint DATA_BUS_WIDTH_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin BUS_WIDTH_8                                149975          1          -    Covered              
        bin BUS_WIDTH_16                               349950          1          -    Covered              
        bin BUS_WIDTH_32                               599900          1          -    Covered              

TOTAL COVERGROUP COVERAGE: 98.80%  COVERGROUP TYPES: 4

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/top/PPM_checker_PI_clk_U/cover_assert_PPM 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(59)
                                                                              1099805 Covered   
/top/PPM_checker_PI_clk_U/cover_no_glitch 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(69)
                                                                              1099815 Covered   
/top/PPM_checker_PI_clk_U/cover_assert__PI_PPM 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(122)
                                                                              991325 Covered   
/top/PPM_checker_PI_clk_U/cover_no_PI_glitch 
                                         PPM_checker Verilog  SVA  PPM_checker.sv(132)
                                                                              1100351 Covered   

TOTAL DIRECTIVE COVERAGE: 100.00%  COVERS: 4

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/top/PPM_checker_PI_clk_U/assert_PPM
                     PPM_checker.sv(46)                15          5
/top/PPM_checker_PI_clk_U/assert_no_glitch
                     PPM_checker.sv(61)                 5          5
/top/PPM_checker_PI_clk_U/assert_PI_PPM
                     PPM_checker.sv(111)           109031          5
/top/PPM_checker_PI_clk_U/assert_no_PI_glitch
                     PPM_checker.sv(124)                5          5
/my_sequence_pkg/my_sequence_32/body/#ublk#34052679#30/immed__32
                     my_sequence.sv(32)                 0          5
/my_sequence_pkg/my_sequence_32/body/#ublk#34052679#47/immed__51
                     my_sequence.sv(51)                 0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#92/immed__94
                     my_sequence.sv(94)                 0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#109/immed__113
                     my_sequence.sv(113)                0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#126/immed__130
                     my_sequence.sv(130)                0          5
/my_sequence_pkg/my_sequence_16/body/#ublk#34052679#144/immed__148
                     my_sequence.sv(148)                0          5
/my_sequence_pkg/my_sequence_8/body/#ublk#34052679#184/immed__186
                     my_sequence.sv(186)                0          5
/my_sequence_pkg/my_sequence_8/body/#ublk#34052679#201/immed__205
                     my_sequence.sv(205)                0          5

Total Coverage By Instance (filtered view): 88.62%

